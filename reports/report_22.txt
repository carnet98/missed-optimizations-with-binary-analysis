--- Interesting Case Report --- 

Interesting Variables: 
['g_347']

Interesting Assembly Lines: 
{'g_347': {'setting1:': [], 'setting2': [['movl', '$0,', 'g_347(%rip)']]}}

Source Code: 
/*
 * This is a RANDOMLY GENERATED PROGRAM.
 *
 * Generator: csmith 2.3.0
 * Git version: 30dccd7
 * Options:   --no-unions --safe-math --no-argc --no-volatiles --no-volatile-pointers --arrays --bitfields --checksum --no-comma-operators --compound-assignment --no-consts --divs --no-embedded-assigns --no-jumps --longlong --no-force-non-uniform-arrays --math64 --muls --packed-struct --paranoid --pointers --no-structs --inline-function --no-return-structs --no-arg-structs --no-dangling-global-pointers
 * Seed:      8323370470249193808
 */

#include "csmith.h"


static long __undefined;

/* --- Struct/Union Declarations --- */
/* --- GLOBAL VARIABLES --- */
static int32_t g_4 = 0x15252CB1L;
static int32_t g_15 = 0x409884CBL;
static int32_t *g_32[1][4] = {{(void*)0, &g_4, (void*)0, &g_4}};
static int32_t **g_31 = &g_32[0][0];
static int32_t g_68 = 0xAF535935L;
static int64_t g_160 = 4L;
static int16_t g_169[10][10][2] = {{{(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}}, {{(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}}, {{(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}}, {{(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}}, {{(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}}, {{(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}}, {{(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}}, {{(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}}, {{(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}}, {{(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}, {(-9L), (-9L)}}};
static uint32_t g_174 = 0xED98FD70L;
static int32_t g_347 = 0x759F329DL;
static uint32_t g_427 = 4294967295UL;
static int16_t g_433 = 0x0975L;


/* --- FORWARD DECLARATIONS --- */
inline static int8_t  func_1(void);
inline static int32_t  func_11(int32_t  p_12, int32_t ** p_13);
static int32_t  func_17(int32_t * p_18, int32_t ** p_19, int32_t * p_20, uint16_t  p_21);
static int32_t * func_22(int16_t  p_23, uint16_t  p_24, int64_t  p_25, int32_t ** p_26, int32_t ** p_27);
static uint32_t  func_33(uint64_t  p_34, int32_t ** p_35, int32_t ** p_36);
static int8_t  func_48(uint32_t  p_49, int32_t * p_50, int64_t  p_51);
inline static int32_t ** func_61(int32_t  p_62, int32_t  p_63, int32_t  p_64);
inline static int32_t * func_74(int32_t ** p_75, int32_t  p_76, int32_t ** p_77, int64_t  p_78);
static int32_t ** func_79(int32_t ** p_80, int32_t ** p_81, int32_t * p_82, uint16_t  p_83, int32_t  p_84);
inline static int32_t ** func_85(int32_t * p_86);


/* --- FUNCTIONS --- */
/* ------------------------------------------ */
/* 
 * reads : g_4 g_15 g_31 g_32 g_68 g_174 g_160 g_169 g_347 g_427 g_433
 * writes: g_4 g_15 g_32 g_174 g_160 g_68 g_427 g_433 g_347
 */
inline static int8_t  func_1(void)
{ /* block id: 0 */
    int32_t *l_3 = &g_4;
    int32_t **l_2 = &l_3;
    uint32_t l_5 = 0x69AED23BL;
    uint8_t l_495[9][2] = {{0xAFL, 255UL}, {0xAFL, 255UL}, {0xAFL, 255UL}, {0xAFL, 255UL}, {0xAFL, 255UL}, {0xAFL, 255UL}, {0xAFL, 255UL}, {0xAFL, 255UL}, {0xAFL, 255UL}};
    int32_t l_538 = 2L;
    int i, j;
    (*l_2) = (void*)0;
    /* statement id: 1 */
    assert (l_3 == 0);
    if (l_5)
    { /* block id: 2 */
        int32_t *l_6 = (void*)0;
        int32_t *l_7[10];
        uint16_t l_8 = 0x576CL;
        uint16_t l_549 = 0xD8F7L;
        int i;
        for (i = 0; i < 10; i++)
            l_7[i] = &g_4;
        l_8 = 0L;
        for (g_4 = 27; (g_4 >= 9); g_4 = safe_sub_func_uint16_t_u_u(g_4, 5))
        { /* block id: 6 */
            int32_t **l_14 = (void*)0;
            int32_t l_545 = 0x34E2AF29L;
            if (g_4)
            { /* block id: 7 */
                uint32_t l_16[5][8] = {{0UL, 1UL, 9UL, 1UL, 0UL, 0UL, 9UL, 0UL}, {0UL, 1UL, 9UL, 1UL, 0UL, 0UL, 9UL, 0UL}, {0UL, 1UL, 9UL, 1UL, 0UL, 0UL, 9UL, 0UL}, {0UL, 1UL, 9UL, 1UL, 0UL, 0UL, 9UL, 0UL}, {0UL, 1UL, 9UL, 1UL, 0UL, 0UL, 9UL, 0UL}};
                int i, j;
                g_15 |= func_11(g_4, l_14);
                l_16[2][0] = ((void*)0 == l_14);
            }
            else
            { /* block id: 12 */
                int64_t l_30 = (-7L);
                int32_t l_41 = 0L;
                int32_t *l_526 = &g_4;
                l_495[7][0] = func_17(func_22((safe_lshift_func_int16_t_s_s((-8L), (func_11((func_11(g_4, l_14) | l_30), g_31) <= func_33((safe_sub_func_uint64_t_u_u((safe_div_func_uint64_t_u_u(g_4, func_11(l_41, &g_32[0][0]))), g_4)), &g_32[0][0], &g_32[0][0])))), g_15, g_15, g_31, l_14), &l_7[4], l_7[9], g_15);
                for (l_8 = 0; (l_8 > 41); ++l_8)
                { /* block id: 201 */
                    uint32_t l_504 = 0xAA750571L;
                    uint64_t l_523 = 0x36499B4468725505LL;
                    int32_t l_525 = 0xDB35194DL;
                    l_504 = ((safe_add_func_uint16_t_u_u((safe_rshift_func_uint16_t_u_s(l_41, 6)), 0x340BL)) <= (l_14 == &g_32[0][2]));
                    if ((((void*)0 == (*g_31)) >= g_427))
                    { /* block id: 203 */
                        uint8_t l_524 = 0x76L;
                        int16_t l_535 = 1L;
                        l_525 = (safe_mul_func_uint16_t_u_u((((safe_sub_func_uint32_t_u_u(0x3D940F31L, (safe_mul_func_int16_t_s_s(((safe_add_func_uint64_t_u_u((safe_sub_func_int32_t_s_s((((&g_31 == (void*)0) != ((((safe_add_func_int8_t_s_s(((safe_lshift_func_uint16_t_u_s((((g_68 < (safe_mod_func_int64_t_s_s(g_347, (-5L)))) <= (g_169[7][1][1] > l_523)) & l_30), 14)) < 0L), 0xFCL)) | g_15) != l_523) != g_68)) ^ g_174), g_169[7][1][1])), 1UL)) | l_524), (-1L))))) | g_160) != g_4), g_68));
                        (*g_31) = l_526;
                        l_538 |= (safe_rshift_func_int16_t_s_u(((safe_add_func_int16_t_s_s((g_169[4][6][0] ^ g_4), (((*g_31) != &l_525) && (safe_sub_func_int64_t_s_s(g_174, ((g_4 | ((safe_add_func_int32_t_s_s((((l_535 >= ((safe_mod_func_int64_t_s_s((((g_174 != g_427) == g_169[7][1][1]) >= l_504), 2L)) > l_535)) | l_535) | (-9L)), 1UL)) | (*l_526))) > g_347)))))) & (*l_526)), 15));
                        if ((*l_526))
                            continue;
                    }
                    else
                    { /* block id: 208 */
                        uint16_t l_539 = 3UL;
                        (*g_31) = (void*)0;
                        l_539++;
                    }
                }
            }
            for (g_347 = 0; (g_347 >= 25); g_347 = safe_add_func_int16_t_s_s(g_347, 2))
            { /* block id: 216 */
                int16_t l_544[1][6][3] = {{{0x0412L, 8L, 0x0412L}, {0x0412L, 8L, 0x0412L}, {0x0412L, 8L, 0x0412L}, {0x0412L, 8L, 0x0412L}, {0x0412L, 8L, 0x0412L}, {0x0412L, 8L, 0x0412L}}};
                int32_t l_546 = 0L;
                int i, j, k;
                l_538 ^= l_544[0][0][1];
                l_546 &= l_545;
            }
            return g_169[7][1][1];
        }
        for (g_160 = 0; (g_160 == 14); g_160 = safe_add_func_int32_t_s_s(g_160, 5))
        { /* block id: 224 */
            ++l_549;
        }
    }
    else
    { /* block id: 227 */
        int32_t l_552 = 0xF6B7B5DFL;
        return l_552;
    }
    return g_169[0][7][1];
}


/* ------------------------------------------ */
/* 
 * reads : g_4
 * writes:
 */
inline static int32_t  func_11(int32_t  p_12, int32_t ** p_13)
{ /* block id: 8 */
    return g_4;
}


/* ------------------------------------------ */
/* 
 * reads : g_4 g_31 g_32 g_160 g_169 g_427 g_347 g_433
 * writes: g_433
 */
static int32_t  func_17(int32_t * p_18, int32_t ** p_19, int32_t * p_20, uint16_t  p_21)
{ /* block id: 166 */
    uint32_t l_446 = 0xB0B73074L;
    int16_t l_451 = 1L;
    int32_t l_460[4][4] = {{0x94BA776FL, 0x05CC52B3L, 0x94BA776FL, 0x05CC52B3L}, {0x94BA776FL, 0x05CC52B3L, 0x94BA776FL, 0x05CC52B3L}, {0x94BA776FL, 0x05CC52B3L, 0x94BA776FL, 0x05CC52B3L}, {0x94BA776FL, 0x05CC52B3L, 0x94BA776FL, 0x05CC52B3L}};
    int32_t l_461 = (-1L);
    int32_t *l_462 = (void*)0;
    uint8_t l_464 = 253UL;
    int32_t l_467 = (-1L);
    int i, j;
    l_446 = ((safe_sub_func_int32_t_s_s(((void*)0 != &p_19), 4294967295UL)) <= 1UL);
    l_460[2][2] |= (safe_mod_func_uint16_t_u_u((p_21 < (safe_rshift_func_int16_t_s_s(((**p_19) != ((l_451 < p_21) == l_451)), 14))), ((((((*g_31) != (*p_19)) >= ((safe_lshift_func_uint8_t_u_s(((safe_div_func_uint8_t_u_u(((safe_mul_func_int16_t_s_s((safe_sub_func_int32_t_s_s((((void*)0 != (*g_31)) & p_21), 4294967289UL)), 65534UL)) > p_21), g_160)) ^ l_451), 2)) == g_169[7][1][1])) & l_451) < g_427) || p_21)));
    l_460[2][2] ^= l_461;
    for (l_461 = 1; (l_461 >= 0); l_461 -= 1)
    { /* block id: 172 */
        int32_t *l_463[3];
        uint32_t l_468[7] = {0x5E0EDC92L, 0x96677B9AL, 0x5E0EDC92L, 0x96677B9AL, 0x5E0EDC92L, 0x96677B9AL, 0x5E0EDC92L};
        int32_t **l_489 = &l_462;
        int i;
        for (i = 0; i < 3; i++)
            l_463[i] = (void*)0;
        --l_464;
        --l_468[6];
        for (l_446 = 0; (l_446 <= 3); l_446 += 1)
        { /* block id: 177 */
            int32_t **l_475 = &l_463[2];
            int i, j;
            l_460[l_446][l_446] = (((-1L) >= (safe_mul_func_int8_t_s_s((safe_mul_func_uint8_t_u_u((l_460[l_461][(l_461 + 2)] == (&l_462 != l_475)), (safe_sub_func_uint32_t_u_u((safe_mod_func_uint32_t_u_u((safe_mod_func_uint32_t_u_u(((((((*g_31) == (void*)0) >= p_21) != g_347) != p_21) <= p_21), 0xA75A06DFL)), p_21)), p_21)))), 1UL))) != 0UL);
            for (l_451 = 0; (l_451 <= 1); l_451 += 1)
            { /* block id: 181 */
                int32_t l_484 = 0x3F8D4AF6L;
                int i, j, k;
                l_484 |= (((0xAB36L <= (g_169[(l_446 + 5)][(l_461 + 6)][l_451] | (g_169[(l_451 + 2)][(l_451 + 6)][l_461] || ((*g_31) != (void*)0)))) < ((safe_add_func_uint32_t_u_u((0xC48788AFL ^ (18446744073709551615UL || 8L)), ((*p_20) > (**p_19)))) & g_4)) < p_21);
                l_460[l_446][l_446] = (*p_18);
                for (g_433 = 1; (g_433 >= 0); g_433 -= 1)
                { /* block id: 186 */
                    int32_t l_486 = 0x64CD09F2L;
                    int32_t l_494 = 0x7692CD91L;
                    for (l_484 = 1; (l_484 >= 0); l_484 -= 1)
                    { /* block id: 189 */
                        l_467 = (*p_18);
                    }
                    l_494 = ((p_21 <= ((p_21 && (-10L)) <= ((g_169[(l_451 + 2)][(l_451 + 6)][l_461] >= ((!((l_486 & (safe_rshift_func_int8_t_s_u((l_489 == &p_18), 6))) > ((safe_mul_func_uint16_t_u_u(((safe_add_func_uint16_t_u_u(0UL, p_21)) || l_486), p_21)) > p_21))) != 1UL)) & 65535UL))) == 6L);
                }
            }
        }
    }
    return (*p_18);
}


/* ------------------------------------------ */
/* 
 * reads : g_347
 * writes: g_347
 */
static int32_t * func_22(int16_t  p_23, uint16_t  p_24, int64_t  p_25, int32_t ** p_26, int32_t ** p_27)
{ /* block id: 158 */
    uint32_t l_440[2];
    int32_t *l_443 = &g_4;
    int i;
    for (i = 0; i < 2; i++)
        l_440[i] = 0UL;
    for (g_347 = 0; (g_347 <= 11); g_347 = safe_add_func_uint16_t_u_u(g_347, 3))
    { /* block id: 161 */
        uint32_t l_441 = 0xE1866387L;
        int32_t l_442 = (-1L);
        l_442 = (safe_mul_func_int8_t_s_s(l_440[1], l_441));
        if (l_440[0])
            break;
    }
    return l_443;
    /* statement id: 165 */
    //assert (func_22_rv == &g_4);
}


/* ------------------------------------------ */
/* 
 * reads : g_15 g_4 g_31 g_32 g_68 g_174 g_160 g_169 g_347 g_427 g_433
 * writes: g_32 g_174 g_160 g_68 g_427 g_433
 */
static uint32_t  func_33(uint64_t  p_34, int32_t ** p_35, int32_t ** p_36)
{ /* block id: 13 */
    uint64_t l_52 = 18446744073709551606UL;
    for (p_34 = (-25); (p_34 <= 23); ++p_34)
    { /* block id: 16 */
        int32_t *l_53 = &g_15;
        int32_t *l_434 = (void*)0;
        int32_t *l_435 = &g_68;
        g_433 &= (safe_lshift_func_int8_t_s_u((safe_rshift_func_int16_t_s_u(((func_48(l_52, l_53, (*l_53)) <= ((safe_add_func_int8_t_s_s(p_34, (((0UL && 4294967286UL) != (0x9693L <= (((safe_lshift_func_int16_t_s_u((+(((*l_53) | (-1L)) <= l_52)), 11)) >= p_34) <= p_34))) > p_34))) || g_4)) | g_169[1][4][0]), 12)), g_15));
        (*l_435) &= (*l_53);
    }
    return p_34;
}


/* ------------------------------------------ */
/* 
 * reads : g_15 g_4 g_31 g_32 g_68 g_174 g_160 g_169 g_347 g_427
 * writes: g_32 g_174 g_160 g_68 g_427
 */
static int8_t  func_48(uint32_t  p_49, int32_t * p_50, int64_t  p_51)
{ /* block id: 17 */
    int64_t l_54 = 0xA7276463A47399D0LL;
    int32_t **l_55 = (void*)0;
    int32_t l_60 = (-6L);
    g_427 |= (((func_11(((*p_50) > l_54), &g_32[0][0]) ^ ((l_55 != (void*)0) && ((safe_lshift_func_int16_t_s_s(((safe_mod_func_int64_t_s_s(l_60, func_11(func_11((*p_50), func_61(((safe_rshift_func_uint8_t_u_u(((p_49 ^ 0x0DL) ^ p_49), l_54)) || 0xBF771356723FF491LL), g_15, p_49)), l_55))) < 255UL), p_51)) != p_51))) ^ p_51) < g_169[7][1][1]);
    return g_427;
}


/* ------------------------------------------ */
/* 
 * reads : g_31 g_32 g_15 g_68 g_174 g_160 g_169 g_4 g_347
 * writes: g_32 g_174 g_160 g_68
 */
inline static int32_t ** func_61(int32_t  p_62, int32_t  p_63, int32_t  p_64)
{ /* block id: 18 */
    int64_t l_70 = 1L;
    int32_t *l_103[10][9][1] = {{{&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}}, {{&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}}, {{&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}}, {{&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}}, {{&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}}, {{&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}}, {{&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}}, {{&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}}, {{&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}}, {{&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}, {&g_4}}};
    int32_t **l_102 = &l_103[8][8][0];
    int8_t l_152 = 3L;
    int16_t l_161[8][5] = {{0xFE63L, 0xA891L, 0x58A1L, 0xA891L, 0xFE63L}, {0xFE63L, 0xA891L, 0x58A1L, 0xA891L, 0xFE63L}, {0xFE63L, 0xA891L, 0x58A1L, 0xA891L, 0xFE63L}, {0xFE63L, 0xA891L, 0x58A1L, 0xA891L, 0xFE63L}, {0xFE63L, 0xA891L, 0x58A1L, 0xA891L, 0xFE63L}, {0xFE63L, 0xA891L, 0x58A1L, 0xA891L, 0xFE63L}, {0xFE63L, 0xA891L, 0x58A1L, 0xA891L, 0xFE63L}, {0xFE63L, 0xA891L, 0x58A1L, 0xA891L, 0xFE63L}};
    int64_t l_172 = 0x113C84784CF4E84CLL;
    uint8_t l_178 = 0x2EL;
    int32_t **l_229[5][9][5] = {{{&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}}, {{&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}}, {{&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}}, {{&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}}, {{&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}, {&g_32[0][0], &g_32[0][2], &g_32[0][1], &g_32[0][0], &g_32[0][0]}}};
    int32_t **l_266 = &g_32[0][3];
    uint16_t l_357 = 0x86BAL;
    uint64_t l_389[9][1][2] = {{{18446744073709551608UL, 1UL}}, {{18446744073709551608UL, 1UL}}, {{18446744073709551608UL, 1UL}}, {{18446744073709551608UL, 1UL}}, {{18446744073709551608UL, 1UL}}, {{18446744073709551608UL, 1UL}}, {{18446744073709551608UL, 1UL}}, {{18446744073709551608UL, 1UL}}, {{18446744073709551608UL, 1UL}}};
    uint32_t l_390 = 9UL;
    int32_t **l_426 = &g_32[0][0];
    int i, j, k;
    for (p_63 = 0; (p_63 <= 0); p_63 += 1)
    { /* block id: 21 */
        int32_t *l_87 = &g_15;
        int32_t *l_104 = &g_15;
        int32_t *l_106 = &g_15;
        int32_t **l_141 = &l_103[8][8][0];
        int32_t l_142 = 0xB9B0FDDEL;
        int32_t l_143 = 6L;
        int32_t l_144 = 1L;
        int32_t l_145 = 0L;
        int32_t l_146 = (-2L);
        int32_t l_147 = 1L;
        int32_t l_148 = 9L;
        int32_t l_149 = (-1L);
        int32_t l_150 = 0L;
        int32_t l_151 = 0x5D964B4BL;
        int32_t l_153 = 0x38FA55F2L;
        int32_t l_154 = (-7L);
        int32_t l_155 = 1L;
        int32_t l_156 = 0x3E9C7F93L;
        int32_t l_157 = (-2L);
        int32_t l_158 = 0xD714BD89L;
        int32_t l_159 = 5L;
        int8_t l_162 = (-1L);
        int32_t l_163 = 0xA774B310L;
        int32_t l_164 = 0xB9962CEFL;
        int32_t l_165 = 1L;
        int32_t l_166 = 0x31C6678CL;
        int32_t l_167 = (-9L);
        int8_t l_168 = 1L;
        int32_t l_170 = 0L;
        int32_t l_171[6] = {0x3854A16AL, (-1L), 0x3854A16AL, (-1L), 0x3854A16AL, (-1L)};
        int32_t l_173 = 0x731A217AL;
        int32_t l_177 = 1L;
        uint64_t l_191[1][10] = {{18446744073709551609UL, 0x206E447777C2D394LL, 18446744073709551609UL, 0x206E447777C2D394LL, 18446744073709551609UL, 0x206E447777C2D394LL, 18446744073709551609UL, 0x206E447777C2D394LL, 18446744073709551609UL, 0x206E447777C2D394LL}};
        int32_t ***l_234 = &l_229[2][2][0];
        int i, j;
        if (p_64)
        { /* block id: 22 */
            int32_t *l_67 = &g_68;
            int32_t *l_69[7][7] = {{(void*)0, &g_68, &g_68, &g_4, &g_15, &g_4, &g_15}, {(void*)0, &g_68, &g_68, &g_4, &g_15, &g_4, &g_15}, {(void*)0, &g_68, &g_68, &g_4, &g_15, &g_4, &g_15}, {(void*)0, &g_68, &g_68, &g_4, &g_15, &g_4, &g_15}, {(void*)0, &g_68, &g_68, &g_4, &g_15, &g_4, &g_15}, {(void*)0, &g_68, &g_68, &g_4, &g_15, &g_4, &g_15}, {(void*)0, &g_68, &g_68, &g_4, &g_15, &g_4, &g_15}};
            uint16_t l_71 = 0x0C99L;
            int32_t *l_105 = &g_4;
            int64_t l_107 = 0x10B13A75C3328131LL;
            int i, j;
            if (p_64)
                break;
            l_71--;
            (*l_102) = func_74(func_79(func_85(l_87), l_102, l_104, (((&p_62 != l_105) == (((l_106 == &p_62) < l_107) ^ p_62)) != 0xCD3EL), p_64), p_63, &l_105, g_68);
        }
        else
        { /* block id: 51 */
            p_62 &= (safe_mod_func_int8_t_s_s(g_68, (g_15 | (l_141 != &g_32[0][0]))));
        }
        ++g_174;
        l_178++;
    }
    (*g_31) = (void*)0;
    for (g_160 = 22; (g_160 < 2); g_160 = safe_sub_func_uint64_t_u_u(g_160, 5))
    { /* block id: 93 */
        int64_t l_258[10] = {1L, 7L, 1L, 7L, 1L, 7L, 1L, 7L, 1L, 7L};
        int32_t l_275 = (-3L);
        int32_t l_276 = 1L;
        int32_t l_277[8] = {(-10L), (-10L), 0xFCB27B7EL, (-10L), (-10L), 0xFCB27B7EL, (-10L), (-10L)};
        int8_t l_311 = 0xE5L;
        uint32_t l_322 = 0xAAB5C722L;
        int32_t **l_345 = (void*)0;
        int32_t l_346 = 0L;
        uint32_t l_361 = 18446744073709551606UL;
        int8_t l_408 = 0xA3L;
        uint16_t l_412[3];
        int i;
        for (i = 0; i < 3; i++)
            l_412[i] = 65535UL;
        for (g_174 = 0; (g_174 <= 1); g_174 += 1)
        { /* block id: 96 */
            int64_t l_249[2];
            int32_t *l_255 = &g_68;
            uint16_t l_256 = 65535UL;
            uint8_t l_259 = 0xDEL;
            int32_t ***l_271 = &l_266;
            int32_t l_273 = 0x2376B98DL;
            int32_t l_274 = 0xF414E0ADL;
            int32_t l_310 = 0x8146954AL;
            int32_t l_312 = (-1L);
            int32_t l_313 = 3L;
            int32_t l_319 = 0xB9D005FBL;
            int32_t l_320 = 0x3E8E110FL;
            int32_t l_321[10] = {0x76F87DB6L, 0x6C8E15FFL, 0x76F87DB6L, 0x6C8E15FFL, 0x76F87DB6L, 0x6C8E15FFL, 0x76F87DB6L, 0x6C8E15FFL, 0x76F87DB6L, 0x6C8E15FFL};
            int64_t l_329[10] = {0x118F45BC19C81CFELL, 0x34DFA2A91BA2B85ALL, 0xD911D911948A072CLL, 0xD911D911948A072CLL, 0x34DFA2A91BA2B85ALL, 0x118F45BC19C81CFELL, 0x34DFA2A91BA2B85ALL, 0xD911D911948A072CLL, 0xD911D911948A072CLL, 0x34DFA2A91BA2B85ALL};
            uint32_t l_423[5];
            int i;
            for (i = 0; i < 2; i++)
                l_249[i] = (-1L);
            for (i = 0; i < 5; i++)
                l_423[i] = 0xFC71C8D3L;
            for (p_64 = 0; (p_64 <= 1); p_64 += 1)
            { /* block id: 99 */
                int64_t l_254 = 6L;
                int32_t l_272[10];
                int32_t **l_284 = (void*)0;
                int32_t l_360 = 0x68146027L;
                int i;
                for (i = 0; i < 10; i++)
                    l_272[i] = 0xE76D961DL;
                if ((safe_add_func_uint16_t_u_u((safe_add_func_int64_t_s_s((safe_mul_func_int8_t_s_s((safe_mod_func_int16_t_s_s(g_160, ((safe_div_func_int8_t_s_s((g_68 == ((safe_sub_func_int64_t_s_s(l_249[0], (safe_sub_func_int8_t_s_s(g_160, g_15)))) & (&g_31 == (void*)0))), (safe_mod_func_int32_t_s_s(p_62, g_68)))) || p_62))), l_254)), p_64)), 65535UL)))
                { /* block id: 100 */
                    uint32_t l_278 = 5UL;
                    int32_t l_302 = (-2L);
                    int32_t l_303 = 7L;
                    int32_t l_304 = 0x35F3F7A3L;
                    int32_t l_305 = 0xE869EB95L;
                    int32_t l_306 = 9L;
                    int32_t l_307 = 0xFF6A7CA8L;
                    int32_t l_308 = 0x21D3C004L;
                    int32_t l_309 = 1L;
                    int64_t l_314 = 0x6F48A93D07BB10A7LL;
                    int32_t l_315 = 0xAEA02C45L;
                    int32_t l_316 = 0xBA1694FDL;
                    int32_t l_317 = (-1L);
                    int32_t l_318[9] = {0L, 0L, 0xA872D6C6L, 0L, 0L, 0xA872D6C6L, 0L, 0L, 0xA872D6C6L};
                    int i;
                    if ((((void*)0 == l_255) != (0x8F39C980L < (*l_255))))
                    { /* block id: 101 */
                        (*l_102) = func_74(&l_255, p_62, &g_32[0][0], l_256);
                        (*l_255) = (p_63 >= (~(l_258[5] ^ p_62)));
                        if (l_259)
                            break;
                        if (p_63)
                            break;
                    }
                    else
                    { /* block id: 106 */
                        int32_t **l_260 = &l_255;
                        return &g_32[0][0];
                        /* statement id: 107 */
                        //assert ((func_61_rv >= &g_32[0][0] && func_61_rv <= &g_32[0][3]));
                    }
                    if ((safe_mul_func_uint16_t_u_u(((l_254 > (safe_unary_minus_func_int16_t_s((safe_add_func_int32_t_s_s((g_68 < ((0x86C6L & ((l_266 == (void*)0) <= ((safe_mod_func_uint64_t_u_u((safe_sub_func_int32_t_s_s((0x6107DB0DL & (l_254 & ((void*)0 != l_271))), p_63)), l_254)) && 0xE5L))) < l_258[5])), g_169[7][1][1]))))) | g_160), l_254)))
                    { /* block id: 109 */
                        int32_t **l_281[4][4][6] = {{{&g_32[0][0], &l_103[8][8][0], &l_103[8][8][0], &l_103[8][7][0], &l_103[5][5][0], &g_32[0][3]}, {&g_32[0][0], &l_103[8][8][0], &l_103[8][8][0], &l_103[8][7][0], &l_103[5][5][0], &g_32[0][3]}, {&g_32[0][0], &l_103[8][8][0], &l_103[8][8][0], &l_103[8][7][0], &l_103[5][5][0], &g_32[0][3]}, {&g_32[0][0], &l_103[8][8][0], &l_103[8][8][0], &l_103[8][7][0], &l_103[5][5][0], &g_32[0][3]}}, {{&g_32[0][0], &l_103[8][8][0], &l_103[8][8][0], &l_103[8][7][0], &l_103[5][5][0], &g_32[0][3]}, {&g_32[0][0], &l_103[8][8][0], &l_103[8][8][0], &l_103[8][7][0], &l_103[5][5][0], &g_32[0][3]}, {&g_32[0][0], &l_103[8][8][0], &l_103[8][8][0], &l_103[8][7][0], &l_103[5][5][0], &g_32[0][3]}, {&g_32[0][0], &l_103[8][8][0], &l_103[8][8][0], &l_103[8][7][0], &l_103[5][5][0], &g_32[0][3]}}, {{&g_32[0][0], &l_103[8][8][0], &l_103[8][8][0], &l_103[8][7][0], &l_103[5][5][0], &g_32[0][3]}, {&g_32[0][0], &l_103[8][8][0], &l_103[8][8][0], &l_103[8][7][0], &l_103[5][5][0], &g_32[0][3]}, {&g_32[0][0], &l_103[8][8][0], &l_103[8][8][0], &l_103[8][7][0], &l_103[5][5][0], &g_32[0][3]}, {&g_32[0][0], &l_103[8][8][0], &l_103[8][8][0], &l_103[8][7][0], &l_103[5][5][0], &g_32[0][3]}}, {{&g_32[0][0], &l_103[8][8][0], &l_103[8][8][0], &l_103[8][7][0], &l_103[5][5][0], &g_32[0][3]}, {&g_32[0][0], &l_103[8][8][0], &l_103[8][8][0], &l_103[8][7][0], &l_103[5][5][0], &g_32[0][3]}, {&g_32[0][0], &l_103[8][8][0], &l_103[8][8][0], &l_103[8][7][0], &l_103[5][5][0], &g_32[0][3]}, {&g_32[0][0], &l_103[8][8][0], &l_103[8][8][0], &l_103[8][7][0], &l_103[5][5][0], &g_32[0][3]}}};
                        int i, j, k;
                        --l_278;
                        if (p_62)
                            continue;
                        return &g_32[0][0];
                        /* statement id: 112 */
                        //assert ((func_61_rv >= &g_32[0][0] && func_61_rv <= &g_32[0][3]));
                    }
                    else
                    { /* block id: 113 */
                        uint16_t l_285 = 0x88DAL;
                        p_62 |= (safe_sub_func_int16_t_s_s(((p_63 > ((void*)0 != l_284)) == (&g_32[0][0] != &g_32[0][0])), p_63));
                        ++l_285;
                        p_62 = (safe_mul_func_uint16_t_u_u(((((safe_rshift_func_int8_t_s_s(0L, (safe_mul_func_int8_t_s_s(((safe_mod_func_uint8_t_u_u(g_68, (((safe_div_func_uint16_t_u_u(((p_63 < l_285) != (safe_rshift_func_int16_t_s_u(((void*)0 == l_271), 12))), p_63)) | g_169[7][1][1]) & (safe_add_func_int64_t_s_s((0x0FC6L > 0xF4E9L), 0xAA95250DB643D52DLL))))) > p_63), p_64)))) >= g_160) || g_15) <= p_63), p_64));
                    }
                    --l_322;
                    l_312 ^= (((safe_lshift_func_int16_t_s_u(((safe_sub_func_int16_t_s_s(((l_329[4] != ((~((l_306 >= (g_15 != (((~p_62) | (safe_div_func_int8_t_s_s(g_68, p_62))) <= ((safe_lshift_func_uint8_t_u_s(((safe_mul_func_uint16_t_u_u(g_15, ((safe_add_func_int32_t_s_s(l_315, (l_277[5] <= 0x8BCFCF372AC8007FLL))) ^ 0x1A3404E0D5435FC2LL))) >= p_62), 5)) > g_169[7][1][1])))) ^ p_64)) <= p_62)) | 254UL), g_4)) && (-2L)), 11)) >= g_174) || g_15);
                }
                else
                { /* block id: 120 */
                    int8_t l_348 = 0x28L;
                    int32_t l_349 = 0xA8EB0B87L;
                    int32_t l_350 = (-1L);
                    int32_t l_351 = 3L;
                    int32_t l_352 = 0x81F49BC3L;
                    int32_t l_353 = 0x73F2ED75L;
                    int32_t l_354 = (-1L);
                    int32_t l_355 = 0x0189A8A8L;
                    int32_t l_356 = 0x98240AA1L;
                    for (l_313 = 0; (l_313 >= 0); l_313 -= 1)
                    { /* block id: 123 */
                        int i, j;
                        (*g_31) = func_74(func_79(l_284, l_345, &l_275, p_63, l_346), p_62, l_284, p_62);
                        (**l_271) = (*l_266);
                    }
                    ++l_357;
                }
                ++l_361;
            }
            if (p_64)
                break;
            l_277[5] &= ((safe_mod_func_int64_t_s_s(g_347, (safe_lshift_func_uint16_t_u_u((safe_add_func_uint8_t_u_u((((safe_lshift_func_int8_t_s_u((+(((-1L) ^ (((safe_mul_func_int16_t_s_s(p_64, ((((safe_mul_func_int8_t_s_s((*l_255), (&g_31 != (void*)0))) >= ((safe_lshift_func_uint16_t_u_u((safe_sub_func_int64_t_s_s(((&l_345 != l_271) > (safe_add_func_int64_t_s_s((((safe_lshift_func_uint8_t_u_s((((((safe_mul_func_int8_t_s_s((p_63 != 65531UL), g_4)) & (-2L)) != g_68) & 0x5FL) != g_4), (*l_255))) >= 0x8FL) || g_15), p_62))), l_389[5][0][0])), p_64)) < g_15)) != 0x64777E1D9C467F25LL) | 0x17L))) & g_160) || 0x6BDDL)) >= p_64)), 5)) <= p_64) & l_390), 0UL)), g_4)))) >= p_64);
            for (l_172 = 0; (l_172 <= 0); l_172 += 1)
            { /* block id: 135 */
                int32_t l_409 = 0L;
                int32_t l_417 = 0xBFE1DA7AL;
                int32_t l_418 = 0L;
                int32_t l_420 = 1L;
                int32_t l_422 = 1L;
                int i, j;
                (*g_31) = g_32[l_172][(g_174 + 1)];
                (*l_102) = g_32[l_172][(g_174 + 1)];
                (*l_255) = (+(p_63 > ((g_32[l_172][(l_172 + 2)] == (*g_31)) || (safe_add_func_int8_t_s_s(((!p_62) ^ (safe_sub_func_int32_t_s_s((safe_add_func_int8_t_s_s(l_276, (safe_sub_func_uint8_t_u_u((p_64 < ((safe_rshift_func_int8_t_s_u((safe_rshift_func_int16_t_s_s(p_62, (0x9348L < g_15))), g_4)) | (*l_255))), 0UL)))), p_64))), p_62)))));
                if (((*g_31) != (void*)0))
                { /* block id: 139 */
                    uint32_t l_405 = 0xAC005A63L;
                    --l_405;
                    return l_345;
                    /* statement id: 141 */
                    //assert (func_61_rv == 0);
                }
                else
                { /* block id: 142 */
                    int16_t l_410 = (-1L);
                    int32_t l_411 = (-1L);
                    int32_t l_415 = 0x3934D12AL;
                    int32_t l_416 = 0xA6F5A289L;
                    int32_t l_419 = (-1L);
                    int32_t l_421 = 0xA2BF4E05L;
                    l_412[1]++;
                    if (p_62)
                        break;
                    ++l_423[3];
                    (*l_102) = &p_62;
                }
            }
        }
    }
    /* facts after for loop */
    //assert (l_103[0][0][0] == &p_62 || l_103[0][0][0] == &g_68 || l_103[0][0][0] == 0 || l_103[0][0][0] == &g_15 || l_103[0][0][0] == &g_4);
    return l_426;
    /* statement id: 151 */
    //assert ((func_61_rv >= &g_32[0][0] && func_61_rv <= &g_32[0][3]));
}


/* ------------------------------------------ */
/* 
 * reads : g_32
 * writes:
 */
inline static int32_t * func_74(int32_t ** p_75, int32_t  p_76, int32_t ** p_77, int64_t  p_78)
{ /* block id: 47 */
    uint64_t l_138 = 0x6A2F9622FFCB4505LL;
    l_138 &= (2L ^ ((-7L) != p_76));
    return (*p_75);
    /* statement id: 49 */
    //assert (func_74_rv == &g_4 || func_74_rv == 0 || func_74_rv == &g_68);
}


/* ------------------------------------------ */
/* 
 * reads : g_15 g_68 g_31 g_32
 * writes:
 */
static int32_t ** func_79(int32_t ** p_80, int32_t ** p_81, int32_t * p_82, uint16_t  p_83, int32_t  p_84)
{ /* block id: 29 */
    uint32_t l_108 = 0x0C929913L;
    int32_t l_109[9];
    int32_t *l_110[2][8] = {{&l_109[0], &l_109[8], &l_109[0], &l_109[8], &l_109[0], &l_109[8], &l_109[0], &l_109[8]}, {&l_109[0], &l_109[8], &l_109[0], &l_109[8], &l_109[0], &l_109[8], &l_109[0], &l_109[8]}};
    uint64_t l_111 = 18446744073709551615UL;
    uint32_t l_135 = 0x2B377A34L;
    int i, j;
    for (i = 0; i < 9; i++)
        l_109[i] = 0xB52C7FF4L;
    l_109[0] ^= l_108;
    ++l_111;
    p_84 = (safe_add_func_int32_t_s_s((safe_mod_func_uint16_t_u_u((!(*p_82)), (0xC438L && g_15))), (safe_mod_func_uint64_t_u_u((safe_mod_func_int16_t_s_s(((0xB9EEC298L && 0x6DCB7496L) ^ ((safe_div_func_uint32_t_u_u((0xED3BL != g_15), (safe_div_func_int64_t_s_s(p_84, 0x0419DFFB93C35E3CLL)))) < 1L)), p_84)), g_68))));
    for (p_83 = 0; (p_83 <= 1); p_83 += 1)
    { /* block id: 35 */
        uint8_t l_127 = 0x1BL;
        int32_t l_128 = 4L;
        int32_t l_132 = (-6L);
        int32_t l_133 = 1L;
        int32_t l_134 = 1L;
        l_128 &= l_127;
        for (l_108 = 0; (l_108 <= 1); l_108 += 1)
        { /* block id: 39 */
            int32_t l_129 = 6L;
            int i, j;
            l_128 |= l_129;
            l_128 &= (safe_rshift_func_uint16_t_u_s(65528UL, 5));
        }
        p_84 ^= (&l_109[0] == (*g_31));
        --l_135;
    }
    return &g_32[0][0];
    /* statement id: 46 */
    //assert ((func_79_rv >= &g_32[0][0] && func_79_rv <= &g_32[0][3]));
}


/* ------------------------------------------ */
/* 
 * reads : g_31 g_32
 * writes: g_32
 */
inline static int32_t ** func_85(int32_t * p_86)
{ /* block id: 25 */
    int32_t l_88 = 0xC79E06D3L;
    int32_t *l_89 = &g_68;
    int32_t *l_90 = &l_88;
    int32_t *l_91 = &l_88;
    int32_t *l_92 = &g_68;
    int32_t *l_93 = &l_88;
    int32_t l_94 = (-1L);
    int32_t *l_95 = &g_68;
    int32_t *l_96 = &l_94;
    int32_t *l_97 = &l_88;
    int32_t *l_98[8] = {&g_15, &l_94, &g_15, &l_94, &g_15, &l_94, &g_15, &l_94};
    uint32_t l_99[8][5] = {{0x1A556116L, 0x132C5A17L, 0x1A556116L, 0x132C5A17L, 0x1A556116L}, {0x1A556116L, 0x132C5A17L, 0x1A556116L, 0x132C5A17L, 0x1A556116L}, {0x1A556116L, 0x132C5A17L, 0x1A556116L, 0x132C5A17L, 0x1A556116L}, {0x1A556116L, 0x132C5A17L, 0x1A556116L, 0x132C5A17L, 0x1A556116L}, {0x1A556116L, 0x132C5A17L, 0x1A556116L, 0x132C5A17L, 0x1A556116L}, {0x1A556116L, 0x132C5A17L, 0x1A556116L, 0x132C5A17L, 0x1A556116L}, {0x1A556116L, 0x132C5A17L, 0x1A556116L, 0x132C5A17L, 0x1A556116L}, {0x1A556116L, 0x132C5A17L, 0x1A556116L, 0x132C5A17L, 0x1A556116L}};
    int i, j;
    (*g_31) = (*g_31);
    l_99[2][1]++;
    return &g_32[0][2];
    /* statement id: 28 */
    //assert ((func_85_rv >= &g_32[0][0] && func_85_rv <= &g_32[0][3]));
}




/* ---------------------------------------- */
int main (void)
{
    int i, j, k;
    int print_hash_value = 0;
    platform_main_begin();
    crc32_gentab();
    func_1();
    transparent_crc(g_4, "g_4", print_hash_value);
    transparent_crc(g_15, "g_15", print_hash_value);
    transparent_crc(g_68, "g_68", print_hash_value);
    transparent_crc(g_160, "g_160", print_hash_value);
    for (i = 0; i < 10; i++)
    {
        for (j = 0; j < 10; j++)
        {
            for (k = 0; k < 2; k++)
            {
                transparent_crc(g_169[i][j][k], "g_169[i][j][k]", print_hash_value);
                if (print_hash_value) printf("index = [%d][%d][%d]\n", i, j, k);

            }
        }
    }
    transparent_crc(g_174, "g_174", print_hash_value);
    transparent_crc(g_347, "g_347", print_hash_value);
    transparent_crc(g_427, "g_427", print_hash_value);
    transparent_crc(g_433, "g_433", print_hash_value);
    platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
    return 0;
}

/************************ statistics *************************
XXX max struct depth: 0
breakdown:
   depth: 0, occurrence: 190
XXX total union variables: 0

XXX non-zero bitfields defined in structs: 0
XXX zero bitfields defined in structs: 0
XXX const bitfields defined in structs: 0
XXX volatile bitfields defined in structs: 0
XXX structs with bitfields in the program: 0
breakdown:
XXX full-bitfields structs in the program: 0
breakdown:
XXX times a bitfields struct's address is taken: 0
XXX times a bitfields struct on LHS: 0
XXX times a bitfields struct on RHS: 0
XXX times a single bitfield on LHS: 0
XXX times a single bitfield on RHS: 0

XXX max expression depth: 33
breakdown:
   depth: 1, occurrence: 128
   depth: 2, occurrence: 24
   depth: 3, occurrence: 4
   depth: 4, occurrence: 3
   depth: 5, occurrence: 2
   depth: 6, occurrence: 1
   depth: 10, occurrence: 1
   depth: 12, occurrence: 2
   depth: 13, occurrence: 1
   depth: 14, occurrence: 1
   depth: 15, occurrence: 1
   depth: 16, occurrence: 2
   depth: 17, occurrence: 1
   depth: 18, occurrence: 1
   depth: 19, occurrence: 1
   depth: 20, occurrence: 1
   depth: 21, occurrence: 1
   depth: 22, occurrence: 1
   depth: 23, occurrence: 1
   depth: 24, occurrence: 2
   depth: 33, occurrence: 1

XXX total number of pointers: 67

XXX times a variable address is taken: 174
XXX times a pointer is dereferenced on RHS: 45
breakdown:
   depth: 1, occurrence: 39
   depth: 2, occurrence: 6
XXX times a pointer is dereferenced on LHS: 16
breakdown:
   depth: 1, occurrence: 15
   depth: 2, occurrence: 1
XXX times a pointer is compared with null: 21
XXX times a pointer is compared with address of another variable: 10
XXX times a pointer is compared with another pointer: 7
XXX times a pointer is qualified to be dereferenced: 3747

XXX max dereference level: 3
breakdown:
   level: 0, occurrence: 0
   level: 1, occurrence: 158
   level: 2, occurrence: 117
   level: 3, occurrence: 3
XXX number of pointers point to pointers: 30
XXX number of pointers point to scalars: 37
XXX number of pointers point to structs: 0
XXX percent of pointers has null in alias set: 34.3
XXX average alias set size: 1.55

XXX times a non-volatile is read: 428
XXX times a non-volatile is write: 111
XXX times a volatile is read: 0
XXX    times read thru a pointer: 0
XXX times a volatile is write: 0
XXX    times written thru a pointer: 0
XXX times a volatile is available for access: 0
XXX percentage of non-volatile access: 100

XXX forward jumps: 0
XXX backward jumps: 0

XXX stmts: 115
XXX max block depth: 5
breakdown:
   depth: 0, occurrence: 29
   depth: 1, occurrence: 19
   depth: 2, occurrence: 16
   depth: 3, occurrence: 15
   depth: 4, occurrence: 16
   depth: 5, occurrence: 20

XXX percentage a fresh-made variable is used: 14.7
XXX percentage an existing variable is used: 85.3
********************* end of statistics **********************/



Assembly Code with Setting 1: 
	.text
	.file	"tmpp82_mhhg.c"
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5, 0x0                          # -- Begin function main
.LCPI0_0:
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	2                               # 0x2
	.long	3                               # 0x3
	.long	4                               # 0x4
	.long	5                               # 0x5
	.long	6                               # 0x6
	.long	7                               # 0x7
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0
.LCPI0_1:
	.long	3988292384                      # 0xedb88320
.LCPI0_2:
	.long	8                               # 0x8
	.text
	.globl	main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:
	pushq	%rax
	.cfi_def_cfa_offset 16
	vmovdqa	.LCPI0_0(%rip), %ymm0           # ymm0 = [0,1,2,3,4,5,6,7]
	xorl	%ecx, %ecx
	vpbroadcastd	.LCPI0_1(%rip), %ymm1   # ymm1 = [3988292384,3988292384,3988292384,3988292384,3988292384,3988292384,3988292384,3988292384]
	leaq	crc32_tab(%rip), %rax
	vpbroadcastd	.LCPI0_2(%rip), %ymm2   # ymm2 = [8,8,8,8,8,8,8,8]
	.p2align	4, 0x90
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
	vpsrld	$1, %ymm0, %ymm3
	vpxor	%ymm1, %ymm3, %ymm4
	vpslld	$31, %ymm0, %ymm5
	vblendvps	%ymm5, %ymm4, %ymm3, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vmovups	%ymm3, (%rcx,%rax)
	vpaddd	%ymm2, %ymm0, %ymm0
	addq	$32, %rcx
	cmpq	$1024, %rcx                     # imm = 0x400
	jne	.LBB0_1
# %bb.2:
	movslq	g_15(%rip), %rdx
	movl	%edx, %ecx
	movl	crc32_context(%rip), %esi
	movzbl	%sil, %edi
                                        # kill: def $esi killed $esi killed $rsi
	shrl	$8, %esi
	xorq	$27, %rdi
	xorl	(%rax,%rdi,4), %esi
	movzbl	%sil, %edi
	shrl	$8, %esi
	xorl	(%rax,%rdi,4), %esi
	movzbl	%sil, %edi
	shrl	$8, %esi
	xorl	(%rax,%rdi,4), %esi
	movzbl	%sil, %edi
	shrl	$8, %esi
	xorl	(%rax,%rdi,4), %esi
	movzbl	%sil, %edi
	shrl	$8, %esi
	xorl	(%rax,%rdi,4), %esi
	movzbl	%sil, %edi
	shrl	$8, %esi
	xorl	(%rax,%rdi,4), %esi
	movzbl	%sil, %edi
	shrl	$8, %esi
	xorl	(%rax,%rdi,4), %esi
	movzbl	%sil, %edi
	movl	%esi, %r8d
	shrl	$8, %r8d
	xorl	(%rax,%rdi,4), %r8d
	orl	$27, %ecx
	movl	%r8d, %esi
	shrl	$8, %esi
	xorl	%ecx, %r8d
	movzbl	%r8b, %edi
	xorl	(%rax,%rdi,4), %esi
	movl	%edx, %edi
	shrl	$8, %edi
	xorl	%esi, %edi
	shrl	$8, %esi
	movzbl	%dil, %edi
	xorl	(%rax,%rdi,4), %esi
	movl	%edx, %edi
	shrl	$16, %edi
	xorl	%esi, %edi
	shrl	$8, %esi
	movzbl	%dil, %edi
	xorl	(%rax,%rdi,4), %esi
	movl	%edx, %edi
	shrl	$24, %edi
	xorl	%esi, %edi
	shrl	$8, %esi
	movzbl	%dil, %edi
	xorl	(%rax,%rdi,4), %esi
	movq	%rdx, %rdi
	shrq	$32, %rdi
	xorl	%esi, %edi
	shrl	$8, %esi
	movzbl	%dil, %edi
	xorl	(%rax,%rdi,4), %esi
	movq	%rdx, %rdi
	shrq	$40, %rdi
	xorl	%esi, %edi
	shrl	$8, %esi
	movzbl	%dil, %edi
	xorl	(%rax,%rdi,4), %esi
	movq	%rdx, %rdi
	shrq	$48, %rdi
	xorl	%esi, %edi
	shrl	$8, %esi
	movzbl	%dil, %edi
	xorl	(%rax,%rdi,4), %esi
	shrq	$56, %rdx
	movzbl	%sil, %edi
	shrl	$8, %esi
	xorq	%rdx, %rdi
	xorl	(%rax,%rdi,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	$53, %edx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	$89, %edx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	$83, %edx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edi
	movl	%esi, %edx
	shrl	$8, %edx
	xorl	$175, %edi
	xorl	(%rax,%rdi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%ecx, g_15(%rip)
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	$4, %ecx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	movl	%edx, %r9d
	shrl	$8, %r9d
	xorl	(%rax,%rcx,4), %r9d
	leaq	g_169+2(%rip), %rcx
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB0_3:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB0_4 Depth 2
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB0_4:                                #   Parent Loop BB0_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movswl	-2(%rcx,%rsi,4), %edi
	movslq	%edi, %rdi
	movl	%r9d, %r8d
	shrl	$8, %r8d
	xorl	%edi, %r9d
	movzbl	%r9b, %r9d
	xorl	(%rax,%r9,4), %r8d
	movl	%edi, %r9d
	shrl	$8, %r9d
	xorl	%r8d, %r9d
	shrl	$8, %r8d
	movzbl	%r9b, %r9d
	xorl	(%rax,%r9,4), %r8d
	movl	%edi, %r9d
	shrl	$16, %r9d
	xorl	%r8d, %r9d
	shrl	$8, %r8d
	movzbl	%r9b, %r9d
	xorl	(%rax,%r9,4), %r8d
	movl	%edi, %r9d
	shrl	$24, %r9d
	xorl	%r8d, %r9d
	shrl	$8, %r8d
	movzbl	%r9b, %r9d
	xorl	(%rax,%r9,4), %r8d
	movq	%rdi, %r9
	shrq	$32, %r9
	xorl	%r8d, %r9d
	shrl	$8, %r8d
	movzbl	%r9b, %r9d
	xorl	(%rax,%r9,4), %r8d
	movq	%rdi, %r9
	shrq	$40, %r9
	xorl	%r8d, %r9d
	shrl	$8, %r8d
	movzbl	%r9b, %r9d
	xorl	(%rax,%r9,4), %r8d
	movq	%rdi, %r9
	shrq	$48, %r9
	xorl	%r8d, %r9d
	shrl	$8, %r8d
	movzbl	%r9b, %r9d
	xorl	(%rax,%r9,4), %r8d
	shrq	$56, %rdi
	movzbl	%r8b, %r9d
	movl	%r8d, %r10d
	shrl	$8, %r10d
	xorq	%rdi, %r9
	xorl	(%rax,%r9,4), %r10d
	movswl	(%rcx,%rsi,4), %edi
	movslq	%edi, %rdi
	movl	%r10d, %r8d
	shrl	$8, %r8d
	xorl	%edi, %r10d
	movzbl	%r10b, %r9d
	xorl	(%rax,%r9,4), %r8d
	movl	%edi, %r9d
	shrl	$8, %r9d
	xorl	%r8d, %r9d
	shrl	$8, %r8d
	movzbl	%r9b, %r9d
	xorl	(%rax,%r9,4), %r8d
	movl	%edi, %r9d
	shrl	$16, %r9d
	xorl	%r8d, %r9d
	shrl	$8, %r8d
	movzbl	%r9b, %r9d
	xorl	(%rax,%r9,4), %r8d
	movl	%edi, %r9d
	shrl	$24, %r9d
	xorl	%r8d, %r9d
	shrl	$8, %r8d
	movzbl	%r9b, %r9d
	xorl	(%rax,%r9,4), %r8d
	movq	%rdi, %r9
	shrq	$32, %r9
	xorl	%r8d, %r9d
	shrl	$8, %r8d
	movzbl	%r9b, %r9d
	xorl	(%rax,%r9,4), %r8d
	movq	%rdi, %r9
	shrq	$40, %r9
	xorl	%r8d, %r9d
	shrl	$8, %r8d
	movzbl	%r9b, %r9d
	xorl	(%rax,%r9,4), %r8d
	movq	%rdi, %r9
	shrq	$48, %r9
	xorl	%r8d, %r9d
	shrl	$8, %r8d
	movzbl	%r9b, %r9d
	xorl	(%rax,%r9,4), %r8d
	shrq	$56, %rdi
	movzbl	%r8b, %r10d
	movl	%r8d, %r9d
	shrl	$8, %r9d
	xorq	%rdi, %r10
	xorl	(%rax,%r10,4), %r9d
	incq	%rsi
	cmpq	$10, %rsi
	jne	.LBB0_4
# %bb.5:                                #   in Loop: Header=BB0_3 Depth=1
	incq	%rdx
	addq	$40, %rcx
	cmpq	$10, %rdx
	jne	.LBB0_3
# %bb.6:
	movl	%r9d, %ecx
	shrl	$8, %ecx
	movzbl	%r9b, %edx
	xorl	$112, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$253, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$152, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$237, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$117, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$9, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	movl	%ecx, %esi
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movl	%esi, crc32_context(%rip)
	notl	%esi
	leaq	.L.str.13(%rip), %rdi
	xorl	%eax, %eax
	vzeroupper
	callq	printf@PLT
	xorl	%eax, %eax
	popq	%rcx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end0:
	.size	main, .Lfunc_end0-main
	.cfi_endproc
                                        # -- End function
	.type	g_15,@object                    # @g_15
	.data
	.p2align	2, 0x0
g_15:
	.long	1083737291                      # 0x409884cb
	.size	g_15, 4

	.type	g_169,@object                   # @g_169
	.section	.rodata,"a",@progbits
	.p2align	4, 0x0
g_169:
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.short	65527                           # 0xfff7
	.size	g_169, 400

	.type	crc32_context,@object           # @crc32_context
	.data
	.p2align	2, 0x0
crc32_context:
	.long	4294967295                      # 0xffffffff
	.size	crc32_context, 4

	.type	crc32_tab,@object               # @crc32_tab
	.local	crc32_tab
	.comm	crc32_tab,1024,16
	.type	.L.str.13,@object               # @.str.13
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.13:
	.asciz	"checksum = %X\n"
	.size	.L.str.13, 15

	.ident	"clang version 16.0.6"
	.section	".note.GNU-stack","",@progbits
	.addrsig


Assembly Code with Setting 2: 
	.file	"tmp8yitmf46.c"
	.text
	.p2align 4
	.type	crc32_8bytes, @function
crc32_8bytes:
.LFB104:
	.cfi_startproc
	movl	crc32_context(%rip), %eax
	leaq	crc32_tab(%rip), %rdx
	movq	%rdi, %rcx
	movl	%eax, %esi
	shrl	$8, %eax
	xorl	%edi, %esi
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movzbl	%ch, %esi
	shrq	$56, %rcx
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movq	%rdi, %rsi
	shrq	$16, %rsi
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movl	%edi, %esi
	shrl	$24, %esi
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movq	%rdi, %rsi
	shrq	$32, %rsi
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movq	%rdi, %rsi
	shrq	$40, %rsi
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movq	%rdi, %rsi
	shrq	$48, %rsi
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	xorl	%eax, %ecx
	shrl	$8, %eax
	movzbl	%cl, %ecx
	xorl	(%rdx,%rcx,4), %eax
	movl	%eax, crc32_context(%rip)
	ret
	.cfi_endproc
.LFE104:
	.size	crc32_8bytes, .-crc32_8bytes
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC6:
	.string	"checksum = %X\n"
	.section	.text.startup,"ax",@progbits
	.p2align 4
	.globl	main
	.type	main, @function
main:
.LFB117:
	.cfi_startproc
	movl	$8, %ecx
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	leaq	crc32_tab(%rip), %rax
	vmovdqa	.LC2(%rip), %ymm5
	vmovd	%ecx, %xmm6
	leaq	1024(%rax), %rdx
	vpxor	%xmm4, %xmm4, %xmm4
	movl	$1, %ecx
	vmovd	%ecx, %xmm3
	movl	$-306674912, %ecx
	vpbroadcastd	%xmm6, %ymm6
	vmovd	%ecx, %xmm2
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	vpbroadcastd	%xmm3, %ymm3
	andq	$-32, %rsp
	vpbroadcastd	%xmm2, %ymm2
	.p2align 4,,10
	.p2align 3
.L4:
	vmovdqa	%ymm5, %ymm1
	addq	$32, %rax
	vpaddd	%ymm6, %ymm5, %ymm5
	vpand	%ymm3, %ymm1, %ymm0
	vpsrld	$1, %ymm1, %ymm1
	vpsubd	%ymm0, %ymm4, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm0, %ymm0
	vpand	%ymm3, %ymm0, %ymm1
	vpsrld	$1, %ymm0, %ymm0
	vpsubd	%ymm1, %ymm4, %ymm1
	vpand	%ymm2, %ymm1, %ymm1
	vpxor	%ymm0, %ymm1, %ymm1
	vpand	%ymm3, %ymm1, %ymm0
	vpsrld	$1, %ymm1, %ymm1
	vpsubd	%ymm0, %ymm4, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm0, %ymm0
	vpand	%ymm3, %ymm0, %ymm1
	vpsrld	$1, %ymm0, %ymm0
	vpsubd	%ymm1, %ymm4, %ymm1
	vpand	%ymm2, %ymm1, %ymm1
	vpxor	%ymm0, %ymm1, %ymm1
	vpand	%ymm3, %ymm1, %ymm0
	vpsrld	$1, %ymm1, %ymm1
	vpsubd	%ymm0, %ymm4, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm0, %ymm0
	vpand	%ymm3, %ymm0, %ymm1
	vpsrld	$1, %ymm0, %ymm0
	vpsubd	%ymm1, %ymm4, %ymm1
	vpand	%ymm2, %ymm1, %ymm1
	vpxor	%ymm0, %ymm1, %ymm1
	vpand	%ymm3, %ymm1, %ymm0
	vpsrld	$1, %ymm1, %ymm1
	vpsubd	%ymm0, %ymm4, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm0, %ymm0
	vpand	%ymm3, %ymm0, %ymm1
	vpsrld	$1, %ymm0, %ymm0
	vpsubd	%ymm1, %ymm4, %ymm1
	vpand	%ymm2, %ymm1, %ymm1
	vpxor	%ymm0, %ymm1, %ymm0
	vmovdqa	%ymm0, -32(%rax)
	cmpq	%rdx, %rax
	jne	.L4
	movl	g_15(%rip), %r8d
	movl	$27, %edi
	movl	$0, g_347(%rip)
	leaq	40+g_169(%rip), %r9
	leaq	400(%r9), %r10
	orl	$27, %r8d
	movl	%r8d, g_15(%rip)
	call	crc32_8bytes
	movslq	%r8d, %rdi
	call	crc32_8bytes
	movq	$-1353492171, %rdi
	call	crc32_8bytes
	movl	$4, %edi
	call	crc32_8bytes
	.p2align 4,,10
	.p2align 3
.L5:
	leaq	-40(%r9), %r8
	.p2align 4,,10
	.p2align 3
.L6:
	movswq	(%r8), %rdi
	addq	$4, %r8
	call	crc32_8bytes
	movswq	-2(%r8), %rdi
	call	crc32_8bytes
	cmpq	%r9, %r8
	jne	.L6
	leaq	40(%r8), %r9
	cmpq	%r10, %r9
	jne	.L5
	movl	$3986226544, %edi
	call	crc32_8bytes
	xorl	%edi, %edi
	call	crc32_8bytes
	movl	$4294967295, %edi
	call	crc32_8bytes
	movl	$2421, %edi
	call	crc32_8bytes
	movl	crc32_context(%rip), %esi
	leaq	.LC6(%rip), %rdi
	xorl	%eax, %eax
	notl	%esi
	call	printf@PLT
	xorl	%eax, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE117:
	.size	main, .-main
	.data
	.align 4
	.type	g_347, @object
	.size	g_347, 4
g_347:
	.long	1973367453
	.section	.rodata
	.align 32
	.type	g_169, @object
	.size	g_169, 400
g_169:
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.value	-9
	.data
	.align 4
	.type	g_15, @object
	.size	g_15, 4
g_15:
	.long	1083737291
	.local	g_4
	.comm	g_4,4,4
	.align 4
	.type	crc32_context, @object
	.size	crc32_context, 4
crc32_context:
	.long	-1
	.local	crc32_tab
	.comm	crc32_tab,1024,32
	.section	.rodata.cst32,"aM",@progbits,32
	.align 32
.LC2:
	.long	0
	.long	1
	.long	2
	.long	3
	.long	4
	.long	5
	.long	6
	.long	7
	.ident	"GCC: (GNU) 13.2.1 20230801"
	.section	.note.GNU-stack,"",@progbits


