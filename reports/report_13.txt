--- Interesting Case Report --- 

Interesting Variables: 
['g_15', 'g_17', 'g_186']

Interesting Assembly Lines: 
{'g_15': {'setting1:': [['movb', '$1,', 'g_15(%rip)']], 'setting2': [['movb', '$30,', 'g_15(%rip)']]}, 'g_17': {'setting1:': [], 'setting2': [['movl', '$5,', 'g_17(%rip)']]}, 'g_186': {'setting1:': [], 'setting2': [['movl', '$0,', 'g_186(%rip)']]}}

Source Code: 
/*
 * This is a RANDOMLY GENERATED PROGRAM.
 *
 * Generator: csmith 2.3.0
 * Git version: 30dccd7
 * Options:   --no-unions --safe-math --no-argc --no-volatiles --no-volatile-pointers --no-arrays --no-bitfields --checksum --comma-operators --no-compound-assignment --consts --no-divs --no-embedded-assigns --no-jumps --longlong --no-force-non-uniform-arrays --no-math64 --no-muls --packed-struct --paranoid --no-pointers --structs --inline-function --return-structs --no-arg-structs --dangling-global-pointers
 * Seed:      16972859473329461736
 */

#include "csmith.h"


static long __undefined;

/* --- Struct/Union Declarations --- */
#pragma pack(push)
#pragma pack(1)
struct S0 {
   int16_t  f0;
   int32_t  f1;
   int32_t  f2;
   int16_t  f3;
   uint8_t  f4;
};
#pragma pack(pop)

struct S1 {
   int32_t  f0;
};

/* --- GLOBAL VARIABLES --- */
static int16_t g_11 = 5L;
static uint8_t g_15 = 0x3EL;
static uint32_t g_16 = 4294967295UL;
static struct S1 g_17 = {0x54114571L};
static uint32_t g_186 = 0x7AEA757CL;
static struct S0 g_212 = {3L,0x03A0161FL,1L,0x5FA9L,0x02L};
static const int32_t g_363 = 0x446925B1L;
static uint32_t g_395 = 0UL;
static struct S0 g_536 = {0xDB18L,0x096DBF31L,0x740E68EFL,0x56F2L,0xCFL};
static uint8_t g_606 = 6UL;


/* --- FORWARD DECLARATIONS --- */
static int16_t  func_1(void);
inline static uint16_t  func_2(uint32_t  p_3, uint16_t  p_4, const uint16_t  p_5, uint16_t  p_6);
static struct S1  func_7(int16_t  p_8, int32_t  p_9, uint32_t  p_10);
static struct S1  func_13(int32_t  p_14);
inline static uint32_t  func_19(uint32_t  p_20, int16_t  p_21, int32_t  p_22);
inline static int8_t  func_23(int32_t  p_24, int32_t  p_25, int32_t  p_26);
inline static int32_t  func_29(int8_t  p_30, int32_t  p_31, uint32_t  p_32, int32_t  p_33);
inline static uint32_t  func_35(int32_t  p_36, int32_t  p_37);
static int32_t  func_38(uint32_t  p_39, uint8_t  p_40, const int16_t  p_41, int32_t  p_42, uint8_t  p_43);
inline static uint8_t  func_52(uint32_t  p_53);


/* --- FUNCTIONS --- */
/* ------------------------------------------ */
/* 
 * reads : g_11 g_15 g_17 g_16 g_186 g_212.f2 g_212.f0 g_212.f3 g_212.f4 g_212.f1 g_212 g_363 g_395 g_536.f4 g_536.f3 g_536.f2 g_536.f1 g_536.f0 g_606
 * writes: g_16 g_15 g_17.f0 g_212 g_186 g_11 g_536
 */
static int16_t  func_1(void)
{ /* block id: 0 */
    int16_t l_12 = 0x8F9CL;
    int32_t l_378 = 0x4648E599L;
    uint8_t l_393 = 0x0FL;
    int32_t l_394 = 0xD513D345L;
    uint32_t l_408 = 0x51C81A55L;
    int32_t l_534 = 6L;
    const struct S0 l_548 = {0x3792L,-9L,-1L,0x7026L,0x2DL};
    int32_t l_608 = 0x7210B4DAL;
    l_378 = ((((func_2((func_7(g_11, l_12, g_11) , func_19((func_23(l_12, ((safe_lshift_func_int16_t_s_s((0x9B4AF7BDL <= 0x8407374FL), g_11)) <= (-1L)), g_11) == g_11), g_11, l_12)), l_12, l_12, g_11) <= l_12) & 0UL) == l_12) != g_11);
    for (g_212.f4 = 15; (g_212.f4 >= 20); g_212.f4++)
    { /* block id: 139 */
        uint32_t l_386 = 0xE8A97BB6L;
        int32_t l_406 = 4L;
        int16_t l_527 = (-1L);
        int32_t l_572 = 0x59CFA0F7L;
        const uint16_t l_573 = 1UL;
        uint8_t l_586 = 1UL;
        uint16_t l_587 = 0xF367L;
        uint32_t l_630 = 1UL;
        uint32_t l_631 = 0UL;
        if (g_11)
            break;
        if (((((safe_lshift_func_uint8_t_u_s(((((safe_add_func_uint16_t_u_u(g_212.f3, (safe_unary_minus_func_uint16_t_u(l_378)))) > (l_386 , ((func_7(l_378, l_12, (safe_rshift_func_uint16_t_u_s((g_186 > (((safe_sub_func_uint16_t_u_u((safe_lshift_func_uint8_t_u_u((func_13(((l_393 ^ l_386) , l_394)) , g_16), g_212.f3)), l_378)) <= l_386) , l_386)), 4))) , g_15) >= 6UL))) != 0L) || g_16), 6)) != g_186) >= g_212.f0) && g_395))
        { /* block id: 141 */
            int16_t l_407 = 1L;
            int16_t l_467 = 0x82E8L;
            uint32_t l_468 = 18446744073709551615UL;
            int8_t l_496 = 0x93L;
            int32_t l_497 = (-3L);
            if (g_212.f1)
                break;
            if ((safe_mod_func_int8_t_s_s(((l_386 , 0xD6L) ^ ((safe_mod_func_uint8_t_u_u((((safe_sub_func_int16_t_s_s((safe_sub_func_int32_t_s_s(((-4L) <= g_212.f0), (safe_add_func_int8_t_s_s(0x9EL, ((l_406 != (g_17 , l_386)) , 0x85L))))), g_11)) || 1L) >= l_407), l_406)) ^ l_406)), 247UL)))
            { /* block id: 143 */
                g_212.f2 = l_408;
            }
            else
            { /* block id: 145 */
                uint8_t l_415 = 0x7AL;
                int32_t l_432 = 1L;
                for (g_11 = 0; (g_11 <= 15); g_11 = safe_add_func_int8_t_s_s(g_11, 6))
                { /* block id: 148 */
                    int32_t l_424 = 8L;
                    if (((((l_386 ^ (safe_sub_func_uint32_t_u_u(0x52DE9F1DL, (l_406 , (safe_add_func_int16_t_s_s(l_415, g_212.f4)))))) == g_17.f0) < 0L) == ((((4294967295UL < (safe_mod_func_int32_t_s_s(l_406, g_16))) , 0xE6L) >= g_186) ^ 0xCEL)))
                    { /* block id: 149 */
                        int16_t l_429 = 0x824FL;
                        l_432 = (safe_lshift_func_uint16_t_u_u(((safe_sub_func_uint16_t_u_u(((((0L ^ ((safe_add_func_int8_t_s_s((2UL | (g_212.f0 <= g_395)), l_406)) || l_424)) != (safe_rshift_func_int16_t_s_u((((((((safe_add_func_int32_t_s_s(l_429, g_17.f0)) <= (safe_lshift_func_uint16_t_u_s(g_212.f1, 12))) == l_406) || 0x4297L) <= 0x96E82DC9L) , l_424) & g_363), 14))) >= g_212.f0) >= g_16), 4UL)) != g_212.f1), 8));
                        g_212.f2 = (safe_lshift_func_int16_t_s_s((l_415 | ((safe_sub_func_uint16_t_u_u((safe_rshift_func_int16_t_s_s((!(safe_add_func_int8_t_s_s((safe_sub_func_uint8_t_u_u(g_212.f2, (65534UL <= ((((((((0xAD31L | (safe_sub_func_uint8_t_u_u((safe_lshift_func_int16_t_s_s(((safe_mod_func_int32_t_s_s((safe_sub_func_uint8_t_u_u(((safe_add_func_uint32_t_u_u(((((safe_lshift_func_int16_t_s_s((safe_add_func_int32_t_s_s((((safe_mod_func_int8_t_s_s((safe_rshift_func_uint8_t_u_u((l_394 | l_432), (((((+g_212.f0) , 0x81L) <= (((((safe_sub_func_int16_t_s_s(((safe_mod_func_int8_t_s_s(l_467, l_424)) < 0xC5L), g_212.f1)) < g_395) ^ 0x9DB8L) <= l_429) >= g_363)) < g_15) < l_424))), g_212.f0)) & l_432) & 0x1802L), 0xD5610DBBL)), l_408)) || g_395) & 6L) ^ g_186), l_393)) < 0xC515AA2AL), g_11)), l_393)) ^ g_212.f4), 1)), g_17.f0))) < l_432) | l_415) <= 0x34EBCE35L) | g_212.f1) >= 0x15L) == l_429) >= g_212.f0)))), 0L))), l_468)), g_212.f0)) , 0x1683L)), 9));
                    }
                    else
                    { /* block id: 152 */
                        if (g_17.f0)
                            break;
                    }
                    l_497 = (safe_add_func_uint32_t_u_u((safe_add_func_uint8_t_u_u((safe_rshift_func_int16_t_s_s((safe_sub_func_int32_t_s_s((((safe_lshift_func_int8_t_s_s((safe_lshift_func_uint8_t_u_s(g_186, (safe_add_func_int32_t_s_s(((+l_424) , (((((safe_sub_func_uint16_t_u_u((((l_406 | ((((safe_lshift_func_uint16_t_u_s((g_212.f3 > ((((safe_mod_func_int32_t_s_s((g_186 > (safe_mod_func_uint16_t_u_u((l_393 != ((safe_mod_func_int32_t_s_s((-3L), l_415)) , ((safe_rshift_func_int8_t_s_s((1L & 1UL), l_468)) , l_468))), l_415))), l_424)) , l_406) | l_424) <= l_415)), l_424)) & g_15) || 1L) || 65533UL)) , g_212.f3) > l_386), g_212.f0)) | l_407) == g_16) || l_408) == 0x784EL)), 0UL)))), l_378)) , l_496) != g_212.f1), l_496)), 14)), 246UL)), 0L));
                    if (l_406)
                        continue;
                }
            }
            g_17.f0 = (safe_lshift_func_uint16_t_u_s((((safe_add_func_uint8_t_u_u(((((+(g_17 , ((0x71L || (safe_sub_func_int16_t_s_s(((safe_sub_func_uint8_t_u_u((1L < (safe_rshift_func_uint8_t_u_s(((safe_lshift_func_int16_t_s_s(g_212.f3, 12)) >= ((safe_unary_minus_func_int32_t_s((safe_rshift_func_uint8_t_u_u(l_394, 2)))) > (safe_add_func_uint16_t_u_u((safe_lshift_func_uint8_t_u_s((safe_sub_func_uint8_t_u_u((g_212.f0 <= (g_212.f2 | ((((l_406 <= (((safe_lshift_func_uint16_t_u_u((g_212.f0 ^ g_17.f0), 15)) >= l_406) != l_467)) ^ g_363) & g_212.f1) > g_15))), 0xA1L)), 5)), 1L)))), 3))), g_186)) , g_186), l_407))) && l_12))) != 0x336256F0L) | g_212.f4) || 0x2CDDAEF6L), l_407)) , 0xCBL) || (-2L)), l_386));
        }
        else
        { /* block id: 160 */
            int8_t l_526 = (-10L);
            int32_t l_535 = 0xCA7BEFD9L;
            l_535 = ((safe_add_func_int32_t_s_s((((g_15 && ((-1L) || (safe_add_func_uint32_t_u_u(((((g_363 <= l_526) >= l_527) > (safe_lshift_func_int8_t_s_s(g_212.f0, l_527))) ^ (6UL < (safe_mod_func_int32_t_s_s((safe_sub_func_int8_t_s_s((l_534 && 255UL), l_378)), g_395)))), l_527)))) , l_526) , (-1L)), g_15)) != 0x7AL);
            g_536 = g_212;
            if (g_212.f2)
            { /* block id: 163 */
                int32_t l_545 = 0x2B7958AEL;
                g_536.f2 = (safe_add_func_int8_t_s_s((safe_mod_func_uint8_t_u_u(((safe_mod_func_int16_t_s_s((safe_lshift_func_uint16_t_u_s(l_545, (safe_rshift_func_uint8_t_u_u(g_212.f0, 4)))), (-2L))) == ((l_386 >= (l_548 , l_548.f0)) < (((safe_rshift_func_uint16_t_u_u((((func_7((((((2UL < (((safe_rshift_func_int16_t_s_u(((l_545 != g_212.f1) && g_536.f4), 4)) || l_406) & 0x824BL)) < 1L) <= 0UL) == 3UL) & l_386), l_378, g_536.f3) , 0x96L) < g_212.f2) == l_548.f4), g_15)) & l_408) && 0UL))), l_545)), l_534));
            }
            else
            { /* block id: 165 */
                uint32_t l_566 = 0x0CCBE227L;
                g_536.f2 = (safe_sub_func_int16_t_s_s((safe_rshift_func_uint8_t_u_s(((((0xAA98B150L && ((safe_mod_func_uint16_t_u_u((65535UL ^ 0x3035L), (safe_lshift_func_int16_t_s_u((~(safe_rshift_func_uint16_t_u_u((((g_212.f0 <= ((safe_sub_func_uint32_t_u_u(((l_566 == (g_363 == (func_7(((!(((((((0x7B63D270L && ((safe_rshift_func_uint16_t_u_u((safe_mod_func_uint16_t_u_u((g_186 & 0x00BCL), 65535UL)), l_566)) >= 1UL)) || (-1L)) || l_566) > 65528UL) < l_406) <= 0UL) & 0xFFL)) , l_548.f3), l_572, l_394) , g_17.f0))) == 65528UL), l_573)) > l_566)) ^ g_212.f3) < 251UL), 7))), g_536.f4)))) >= g_536.f2)) == l_535) != g_15) != g_363), 4)), g_536.f1));
            }
        }
        g_212.f2 = (safe_rshift_func_uint8_t_u_s(g_11, ((safe_lshift_func_uint8_t_u_u((safe_sub_func_uint16_t_u_u(g_536.f2, ((((safe_mod_func_uint32_t_u_u(((safe_lshift_func_uint16_t_u_u((l_406 && ((((((safe_mod_func_uint8_t_u_u(l_393, l_586)) <= ((1L > (((l_378 && g_15) ^ g_16) != l_586)) ^ g_536.f2)) >= g_212.f3) ^ g_212.f2) , l_548.f3) , 0xAF9D02D4L)), 13)) , l_573), g_212.f0)) > l_587) && l_548.f4) , g_536.f0))), g_536.f1)) && g_212.f0)));
        for (g_536.f0 = (-4); (g_536.f0 < 22); ++g_536.f0)
        { /* block id: 172 */
            int32_t l_607 = (-1L);
            struct S1 l_614 = {7L};
            struct S0 l_652 = {0xABF9L,0x93EB3843L,-7L,0x9016L,0x31L};
            for (g_212.f3 = (-1); (g_212.f3 > (-20)); g_212.f3--)
            { /* block id: 175 */
                uint32_t l_601 = 0xC2F4BA8DL;
                l_607 = ((((1L == (safe_rshift_func_uint16_t_u_s((+g_212.f1), 13))) <= (safe_add_func_int8_t_s_s((((safe_lshift_func_uint8_t_u_s((g_363 != (safe_mod_func_int8_t_s_s((l_548.f4 <= l_601), (((safe_add_func_int32_t_s_s((g_212.f1 != ((safe_unary_minus_func_uint16_t_u((~g_536.f3))) & ((((g_395 > (0xEDBCL != 0x92D1L)) , 255UL) != 0x65L) && l_548.f4))), 0x49C17993L)) != 0UL) && g_606)))), 1)) ^ 0x9CECL) | l_406), 255UL))) || l_601) ^ l_586);
                l_614 = (g_212 , func_7(g_606, g_15, (l_608 | ((safe_add_func_int8_t_s_s((~(safe_sub_func_int32_t_s_s(g_16, g_15))), l_601)) , g_536.f2))));
                g_536.f2 = (safe_sub_func_int16_t_s_s((safe_sub_func_int8_t_s_s((safe_rshift_func_int16_t_s_s(0L, 4)), (safe_add_func_uint16_t_u_u((safe_rshift_func_uint16_t_u_u(65532UL, 9)), ((safe_add_func_uint16_t_u_u((((safe_lshift_func_int8_t_s_u(((+g_395) == ((0x38B7B97BL & l_548.f2) >= (((((l_607 , l_12) == 251UL) ^ l_548.f1) <= l_601) & g_11))), l_630)) , l_631) || 0x5AL), 0xDD4EL)) , g_536.f1))))), l_607));
                g_212.f2 = (func_7(g_606, l_607, ((safe_unary_minus_func_int16_t_s(((((safe_rshift_func_int8_t_s_s((safe_rshift_func_int8_t_s_s((safe_add_func_uint32_t_u_u((l_614.f0 , (g_536.f0 & (safe_sub_func_uint8_t_u_u((safe_mod_func_uint16_t_u_u((func_7(((l_601 & (((g_11 > (0UL && 255UL)) < g_536.f2) >= 0xFEC69BE2L)) >= g_606), g_212.f2, g_606) , l_12), l_534)), 0UL)))), l_548.f4)), 5)), g_606)) , l_534) < l_394) | l_614.f0))) < 0xECL)) , 0xD1102B47L);
            }
            g_212.f2 = l_631;
            l_406 = ((0x59L < l_607) == ((((safe_add_func_uint8_t_u_u(g_212.f0, 0xF2L)) != ((safe_mod_func_int16_t_s_s((g_212.f4 , (((((((0xE1L || ((g_212.f4 | ((safe_mod_func_uint32_t_u_u((+((l_652 , (l_630 & 1UL)) <= 0xCB82L)), l_586)) > 0xA066L)) == l_573)) , g_212.f0) != l_548.f2) || 0L) ^ l_12) <= l_652.f4) != g_212.f1)), 1L)) & l_573)) != l_548.f2) , 0x07L));
        }
    }
    return l_534;
}


/* ------------------------------------------ */
/* 
 * reads : g_186 g_212.f3 g_212.f2 g_212.f4 g_212.f1 g_15
 * writes:
 */
inline static uint16_t  func_2(uint32_t  p_3, uint16_t  p_4, const uint16_t  p_5, uint16_t  p_6)
{ /* block id: 132 */
    int16_t l_364 = 0L;
    int32_t l_376 = 9L;
    int16_t l_377 = 0x8F18L;
    l_364 = 0xACACCCADL;
    l_376 = ((+(((((safe_rshift_func_uint16_t_u_s(p_3, 10)) == (((255UL ^ l_364) , (g_186 && ((safe_rshift_func_int16_t_s_s(g_212.f3, 1)) > ((p_6 < (!((((~(g_212.f2 & (safe_mod_func_uint8_t_u_u((safe_sub_func_int8_t_s_s(((0xB4L >= g_212.f4) , g_212.f1), l_364)), p_5)))) , 0xC0B2L) <= (-1L)) | p_6))) & g_15)))) < 0xE1L)) , p_3) | p_5) & 4294967292UL)) & g_212.f3);
    return l_377;
}


/* ------------------------------------------ */
/* 
 * reads : g_11 g_15 g_17
 * writes: g_16
 */
static struct S1  func_7(int16_t  p_8, int32_t  p_9, uint32_t  p_10)
{ /* block id: 1 */
    struct S1 l_18 = {1L};
    l_18 = func_13(g_11);
    return l_18;
}


/* ------------------------------------------ */
/* 
 * reads : g_15 g_17
 * writes: g_16
 */
static struct S1  func_13(int32_t  p_14)
{ /* block id: 2 */
    g_16 = (g_15 == p_14);
    return g_17;
}


/* ------------------------------------------ */
/* 
 * reads : g_186 g_212.f4 g_11 g_212.f2 g_16 g_212.f1 g_15 g_212.f3 g_212.f0 g_17.f0 g_17 g_212 g_363
 * writes: g_186 g_17.f0 g_212.f2 g_212.f3 g_16 g_212
 */
inline static uint32_t  func_19(uint32_t  p_20, int16_t  p_21, int32_t  p_22)
{ /* block id: 80 */
    uint32_t l_263 = 0x90AFDDB5L;
    const int32_t l_323 = 0x6E2DF889L;
    struct S0 l_330 = {0xA4B4L,0x117C2A5BL,1L,0L,1UL};
    struct S1 l_332 = {1L};
    for (g_186 = 0; (g_186 >= 24); g_186 = safe_add_func_int8_t_s_s(g_186, 2))
    { /* block id: 83 */
        uint16_t l_259 = 65532UL;
        struct S1 l_260 = {0L};
        struct S0 l_266 = {0x5467L,0xE963307FL,1L,0L,0xF5L};
        if ((safe_lshift_func_int8_t_s_s(((((safe_sub_func_int16_t_s_s(g_212.f4, (((((g_11 >= (((safe_mod_func_int16_t_s_s((((((((safe_sub_func_int8_t_s_s(0x0BL, (safe_mod_func_int16_t_s_s(((safe_add_func_uint16_t_u_u((p_20 == (safe_sub_func_uint8_t_u_u(((safe_sub_func_int16_t_s_s(g_212.f2, ((~(safe_mod_func_uint32_t_u_u((safe_add_func_int8_t_s_s(l_259, ((p_21 , l_260) , (safe_lshift_func_int16_t_s_s(((((1UL >= g_16) || 0x291146D7L) | g_186) >= g_212.f1), g_186))))), 4294967288UL))) | 0L))) || l_263), 0L))), g_16)) && l_263), p_22)))) <= (-3L)) && p_20) <= (-6L)) >= g_15) >= p_21) < 0L), p_20)) && p_20) , p_22)) >= 1UL) != 0x65BCL) != l_259) == 0xC7L))) , g_212.f3) == p_22) , p_22), l_263)))
        { /* block id: 84 */
            int16_t l_267 = 0x66BCL;
            for (p_22 = 0; (p_22 == 28); p_22 = safe_add_func_int32_t_s_s(p_22, 9))
            { /* block id: 87 */
                int8_t l_306 = 0x39L;
                l_267 = ((l_266 , g_212.f1) , g_15);
                l_266.f2 = (safe_add_func_uint16_t_u_u(65535UL, ((!(safe_rshift_func_int8_t_s_s(((g_15 == ((p_22 | (g_11 > (1L & (safe_add_func_int32_t_s_s(0L, ((+((safe_sub_func_int32_t_s_s(0xB0A57D7BL, ((((0x7C4C677BL > (safe_rshift_func_int8_t_s_s((g_212.f0 , p_21), 5))) || p_22) >= l_267) <= l_267))) && 0x103EE57EL)) && g_212.f3)))))) , 3UL)) < g_16), 1))) & 0x4ED68EFFL)));
                for (g_17.f0 = 10; (g_17.f0 >= (-7)); g_17.f0 = safe_sub_func_int32_t_s_s(g_17.f0, 6))
                { /* block id: 92 */
                    uint32_t l_304 = 0x4537C15CL;
                    struct S1 l_305 = {1L};
                    for (g_212.f2 = (-17); (g_212.f2 > 5); g_212.f2 = safe_add_func_uint16_t_u_u(g_212.f2, 2))
                    { /* block id: 95 */
                        return g_212.f4;
                    }
                    if (g_15)
                        break;
                    for (g_212.f3 = 17; (g_212.f3 > (-9)); g_212.f3--)
                    { /* block id: 101 */
                        int8_t l_286 = 2L;
                        int16_t l_289 = 0L;
                        l_305 = func_7(l_286, g_212.f0, (((safe_sub_func_int8_t_s_s(((((p_22 , l_289) | 0x765BL) , (((safe_mod_func_uint16_t_u_u(0UL, (safe_mod_func_uint32_t_u_u(p_20, (safe_add_func_uint32_t_u_u((safe_mod_func_uint16_t_u_u((safe_lshift_func_uint8_t_u_u(((safe_mod_func_int32_t_s_s(((safe_add_func_uint16_t_u_u((g_186 == 1L), g_212.f0)) , p_22), p_22)) >= 0x2A67L), 5)), 0x58D5L)), l_304)))))) != 1UL) , 0x4EB4L)) & g_186), g_186)) < p_20) , 1UL));
                        l_306 = g_17.f0;
                    }
                }
                for (l_259 = (-7); (l_259 >= 32); l_259++)
                { /* block id: 108 */
                    uint32_t l_324 = 0x21904DDFL;
                    int32_t l_326 = 0x1F3B268BL;
                    if (g_212.f0)
                    { /* block id: 109 */
                        return p_20;
                    }
                    else
                    { /* block id: 111 */
                        uint16_t l_325 = 0xA408L;
                        int8_t l_327 = 5L;
                        l_266.f2 = ((safe_mod_func_uint8_t_u_u(g_17.f0, l_266.f4)) >= (safe_mod_func_int8_t_s_s(l_306, ((0x8B5C4B60L <= (safe_sub_func_uint32_t_u_u(((safe_lshift_func_int8_t_s_u((((((g_212 , (safe_sub_func_uint32_t_u_u(((p_21 & (((((safe_rshift_func_int16_t_s_u((((safe_rshift_func_uint16_t_u_u((((-9L) != (g_17 , p_20)) | p_21), 12)) & l_323) , g_212.f1), 8)) != l_323) ^ (-6L)) ^ 0x45C908EFL) | l_324)) != l_325), l_324))) , (-3L)) && g_212.f3) <= 7L) || l_260.f0), 2)) || p_21), (-4L)))) && 253UL))));
                        l_326 = g_212.f0;
                        return l_327;
                    }
                }
            }
        }
        else
        { /* block id: 118 */
            uint32_t l_331 = 18446744073709551615UL;
            for (p_20 = 0; (p_20 < 50); p_20 = safe_add_func_int8_t_s_s(p_20, 6))
            { /* block id: 121 */
                if (p_21)
                    break;
                l_330 = l_266;
                l_331 = g_212.f1;
            }
        }
        l_332 = g_17;
        g_212.f2 = (((safe_mod_func_int32_t_s_s((safe_add_func_uint8_t_u_u((g_212 , (safe_rshift_func_uint8_t_u_s(p_20, ((safe_sub_func_uint32_t_u_u((7UL >= (((((safe_mod_func_int8_t_s_s(((safe_unary_minus_func_int16_t_s((g_212 , (safe_lshift_func_uint8_t_u_u(((!((((safe_rshift_func_uint8_t_u_s((safe_add_func_int8_t_s_s(((safe_add_func_int8_t_s_s(0x8FL, (safe_sub_func_uint16_t_u_u((safe_add_func_uint16_t_u_u((((((((((safe_sub_func_uint8_t_u_u(((safe_add_func_uint16_t_u_u((safe_lshift_func_uint16_t_u_s(g_212.f4, l_330.f2)), (g_212.f2 & 0x1A8F85E5L))) , 0x20L), p_22)) && 0xFDFEFE26L) , l_332) , l_330.f4) && g_212.f0) <= (-1L)) && p_21) && p_21) != 0x04B7L), g_17.f0)), l_266.f0)))) != p_20), 0x34L)), 6)) != 1UL) , 9L) < l_266.f2)) , 5UL), 0))))) == g_212.f3), 1UL)) <= l_259) ^ 0UL) == p_20) != 0x8A97L)), (-10L))) , (-1L))))), g_363)), g_15)) && g_363) , 1L);
        g_212 = g_212;
    }
    return l_323;
}


/* ------------------------------------------ */
/* 
 * reads : g_17.f0 g_16 g_11 g_15 g_17 g_186 g_212.f2 g_212.f0 g_212.f3 g_212.f4
 * writes: g_15 g_17.f0 g_16 g_212
 */
inline static int8_t  func_23(int32_t  p_24, int32_t  p_25, int32_t  p_26)
{ /* block id: 7 */
    int16_t l_34 = 1L;
    uint8_t l_235 = 255UL;
    p_25 = ((((p_25 != func_29(l_34, p_25, (func_35(func_38(g_17.f0, (((safe_mod_func_uint16_t_u_u(((safe_sub_func_uint32_t_u_u(g_16, ((safe_unary_minus_func_int8_t_s((((+l_34) == (safe_sub_func_uint16_t_u_u(((l_34 && g_11) || (func_52((p_25 < p_25)) && p_26)), 9UL))) ^ l_34))) ^ g_16))) ^ l_34), p_26)) ^ p_24) > 1UL), g_11, p_24, g_17.f0), p_24) , l_34), g_186)) < g_186) && g_186) & l_235);
    return g_11;
}


/* ------------------------------------------ */
/* 
 * reads :
 * writes:
 */
inline static int32_t  func_29(int8_t  p_30, int32_t  p_31, uint32_t  p_32, int32_t  p_33)
{ /* block id: 76 */
    return p_32;
}


/* ------------------------------------------ */
/* 
 * reads : g_17.f0 g_15 g_11 g_186 g_16 g_17 g_212.f2 g_212.f0 g_212.f3 g_212.f4
 * writes: g_15 g_212
 */
inline static uint32_t  func_35(int32_t  p_36, int32_t  p_37)
{ /* block id: 61 */
    uint32_t l_163 = 0x00D59F51L;
    int32_t l_187 = (-1L);
    uint8_t l_209 = 0x79L;
    uint32_t l_210 = 6UL;
    const struct S0 l_211 = {0xF0B0L,-10L,1L,9L,0x75L};
    struct S1 l_229 = {0xA5FCD0D6L};
    struct S0 l_232 = {8L,3L,0x9B939D7BL,0x268FL,0x5BL};
    p_36 = ((3L > (((safe_sub_func_uint32_t_u_u(((248UL < (((safe_add_func_uint16_t_u_u(p_36, ((p_36 || g_17.f0) && (l_163 < (safe_rshift_func_int8_t_s_s(l_163, 2)))))) , (~((((0xE25250D9L || 0x14414898L) , p_37) ^ p_36) , 0x0B2CD532L))) > g_15)) , l_163), 0xB6254A21L)) , p_36) < p_37)) == l_163);
    l_187 = (p_37 <= ((safe_rshift_func_uint8_t_u_s((safe_lshift_func_uint16_t_u_s((((((+g_17.f0) , ((-9L) >= ((safe_sub_func_uint16_t_u_u((safe_lshift_func_uint8_t_u_s(((safe_add_func_uint16_t_u_u((0xE144L && (0xA5L == g_15)), (safe_add_func_int16_t_s_s(g_11, (safe_add_func_int16_t_s_s((safe_rshift_func_uint16_t_u_u((safe_mod_func_uint32_t_u_u(0x5E4FF753L, 0xE7D5C82DL)), g_11)), g_15)))))) != 0UL), 4)), g_15)) >= 0L))) , l_163) == g_11) & g_11), p_36)), g_186)) != (-2L)));
    for (g_15 = 0; (g_15 <= 29); ++g_15)
    { /* block id: 66 */
        int16_t l_190 = 0xF726L;
        uint16_t l_191 = 0x467CL;
        struct S0 l_226 = {6L,1L,0x2010D2CAL,-1L,0xEBL};
        if (l_190)
        { /* block id: 67 */
            p_36 = p_37;
        }
        else
        { /* block id: 69 */
            const int16_t l_207 = 0xA31BL;
            int16_t l_208 = 0L;
            l_210 = (l_191 != (+(((((safe_add_func_uint32_t_u_u(((-6L) <= (((p_37 != (g_16 && (safe_sub_func_int8_t_s_s((g_17 , (safe_add_func_int8_t_s_s(p_36, (l_187 <= (((((((safe_unary_minus_func_uint16_t_u(((safe_mod_func_uint32_t_u_u((1UL & ((((~(((((safe_rshift_func_int16_t_s_s((((safe_add_func_uint32_t_u_u((p_37 , l_207), l_207)) ^ g_16) | g_186), l_163)) && 0x01A7L) == p_37) == p_37) != g_15)) && l_207) != g_186) & g_11)), 1UL)) != 0xE2CBL))) && l_207) & 1L) , 0xC5L) < l_208) <= 0xB077L) && g_15))))), l_190)))) && p_36) ^ g_186)), 0x65B9F8BEL)) && 0UL) != l_190) , g_15) | l_209)));
        }
        g_212 = l_211;
        p_36 = (((((safe_add_func_uint16_t_u_u((safe_mod_func_uint16_t_u_u((safe_add_func_int32_t_s_s((g_212.f2 > (((safe_lshift_func_uint8_t_u_u((safe_sub_func_int16_t_s_s(g_212.f2, ((((safe_mod_func_uint8_t_u_u((~((l_226 , ((p_36 == ((safe_add_func_int8_t_s_s(((l_229 , (safe_mod_func_uint32_t_u_u(((p_36 | (l_232 , ((safe_mod_func_uint16_t_u_u(l_232.f3, g_212.f0)) , 0x38543485L))) <= g_15), (-1L)))) < l_226.f0), l_232.f3)) , 5UL)) , p_36)) != 255UL)), g_212.f3)) != l_232.f1) ^ (-2L)) > g_186))), g_212.f3)) || (-9L)) != p_36)), 1UL)), l_163)), (-1L))) & g_212.f2) == g_212.f4) > l_226.f4) <= (-9L));
    }
    return l_232.f3;
}


/* ------------------------------------------ */
/* 
 * reads : g_15 g_16 g_11 g_17.f0 g_17
 * writes: g_17.f0 g_16
 */
static int32_t  func_38(uint32_t  p_39, uint8_t  p_40, const int16_t  p_41, int32_t  p_42, uint8_t  p_43)
{ /* block id: 19 */
    uint16_t l_86 = 7UL;
    struct S0 l_91 = {0L,0L,7L,0x2DD2L,0x7AL};
    uint32_t l_99 = 0x0E3E679CL;
    int8_t l_123 = 0xB8L;
    int8_t l_153 = 0xBAL;
    if (l_86)
    { /* block id: 20 */
        uint32_t l_98 = 0xC85E55DFL;
        int32_t l_119 = 0x53C6A96BL;
        for (p_39 = (-9); (p_39 >= 5); p_39 = safe_add_func_int8_t_s_s(p_39, 9))
        { /* block id: 23 */
            int32_t l_100 = 1L;
            struct S0 l_101 = {0xF504L,0xEB93D755L,0xAF010A37L,1L,255UL};
            if ((((p_40 == 0UL) , (g_15 && (l_91 , (((safe_add_func_uint16_t_u_u((p_43 & (0x46L || (0x736D3DFDL && ((((((safe_lshift_func_int8_t_s_s(((-2L) & ((safe_sub_func_int32_t_s_s(0x32CFE06CL, g_16)) != 252UL)), 5)) < p_42) >= 0L) == p_39) <= g_15) , l_98)))), g_16)) , p_43) && l_99)))) | 0L))
            { /* block id: 24 */
                l_100 = ((0UL != p_39) , g_15);
                p_42 = l_98;
            }
            else
            { /* block id: 27 */
                g_17.f0 = g_11;
            }
            l_101 = l_91;
        }
        for (l_91.f3 = 0; (l_91.f3 == 6); l_91.f3++)
        { /* block id: 34 */
            int16_t l_115 = 0xBFC9L;
            for (l_98 = 0; (l_98 >= 1); l_98++)
            { /* block id: 37 */
                int32_t l_120 = 0x77FA4877L;
                for (l_91.f2 = 0; (l_91.f2 <= 15); ++l_91.f2)
                { /* block id: 40 */
                    int8_t l_118 = 1L;
                    p_42 = (safe_add_func_uint8_t_u_u((1UL < g_16), ((safe_lshift_func_uint16_t_u_s(l_98, (~(safe_rshift_func_int16_t_s_u(((((l_115 == 1UL) , (safe_sub_func_uint32_t_u_u(l_98, 0x0EF1A537L))) ^ ((g_15 >= l_118) , g_17.f0)) == 4L), g_16))))) <= l_98)));
                }
                l_119 = l_91.f1;
                l_120 = 0xE88EED36L;
                g_17.f0 = (7UL > (safe_rshift_func_uint16_t_u_u(l_120, 11)));
            }
            if (l_115)
                break;
            l_91.f2 = l_115;
        }
        p_42 = l_123;
    }
    else
    { /* block id: 51 */
        int32_t l_152 = 0x6208B9B0L;
        int32_t l_154 = 0L;
        p_42 = (!(((g_11 | ((safe_rshift_func_int16_t_s_u((safe_unary_minus_func_uint32_t_u(((safe_rshift_func_uint16_t_u_u((safe_rshift_func_uint16_t_u_u(0x8FF6L, 2)), 15)) ^ (safe_lshift_func_uint16_t_u_s(((safe_sub_func_int16_t_s_s(g_17.f0, ((((safe_sub_func_uint16_t_u_u(((safe_add_func_int16_t_s_s((safe_add_func_uint32_t_u_u(0x75B28349L, ((safe_lshift_func_uint16_t_u_s((safe_sub_func_uint32_t_u_u((~(((((((safe_sub_func_uint16_t_u_u((((((+((safe_add_func_uint32_t_u_u((l_152 | (65526UL || (l_123 > 1UL))), ((func_13(l_152) , l_91.f3) | 0x97L))) & l_123)) < l_152) | 0xA80D186CL) || p_41) | 0x0655L), p_39)) || 65531UL) && l_91.f0) && l_153) != l_91.f0) && l_153) != 0x0DL)), 0xECCF47AEL)), g_15)) < 0x4BL))), p_43)) > l_152), p_39)) & g_15) | p_41) == (-1L)))) && 0xF3E27632L), 0))))), 13)) & 0x045AL)) & l_154) == l_153));
        for (p_40 = 0; (p_40 < 42); ++p_40)
        { /* block id: 55 */
            l_91 = l_91;
        }
    }
    p_42 = (safe_lshift_func_uint16_t_u_s(0x4359L, 7));
    return p_43;
}


/* ------------------------------------------ */
/* 
 * reads : g_17.f0 g_16 g_11 g_15
 * writes: g_15
 */
inline static uint8_t  func_52(uint32_t  p_53)
{ /* block id: 8 */
    int32_t l_62 = 0L;
    if (((0xF8EFL && ((((g_17.f0 >= ((safe_rshift_func_int16_t_s_s(((((safe_add_func_int8_t_s_s((safe_sub_func_uint32_t_u_u(p_53, 0xBA600AC8L)), (((((0x1DC0AC77L < 0xAEC2B2A8L) != ((safe_add_func_int8_t_s_s((0x7B1D0057L == g_16), (g_16 ^ l_62))) <= p_53)) != 0L) <= l_62) >= l_62))) && l_62) || 0x33DFL) <= 0x3EFBB05DL), l_62)) && l_62)) & 2L) || 0xC288L) <= p_53)) || g_11))
    { /* block id: 9 */
        return p_53;
    }
    else
    { /* block id: 11 */
        int16_t l_75 = (-4L);
        uint8_t l_84 = 247UL;
        for (g_15 = 0; (g_15 > 50); g_15++)
        { /* block id: 14 */
            int32_t l_74 = 0L;
            int32_t l_85 = 0L;
            l_85 = ((safe_sub_func_uint8_t_u_u(0x19L, 0x50L)) <= (((safe_lshift_func_int16_t_s_s(((((((safe_add_func_int32_t_s_s((((p_53 != (!(safe_lshift_func_uint16_t_u_u(l_74, 9)))) , (1L && (((l_75 > (safe_lshift_func_int8_t_s_s(((((((safe_add_func_int8_t_s_s((safe_mod_func_int16_t_s_s(((-1L) ^ (l_74 , ((-8L) > g_17.f0))), 0x372BL)), l_62)) > 0x03027642L) != p_53) | l_62) || l_62) != 0UL), 6))) > p_53) && l_62))) >= l_74), l_84)) ^ p_53) , p_53) && p_53) ^ (-1L)) >= 0x34BBL), l_62)) ^ 0L) , 65528UL));
        }
        return l_84;
    }
}




/* ---------------------------------------- */
int main (void)
{
    int print_hash_value = 0;
    platform_main_begin();
    crc32_gentab();
    func_1();
    transparent_crc(g_11, "g_11", print_hash_value);
    transparent_crc(g_15, "g_15", print_hash_value);
    transparent_crc(g_16, "g_16", print_hash_value);
    transparent_crc(g_17.f0, "g_17.f0", print_hash_value);
    transparent_crc(g_186, "g_186", print_hash_value);
    transparent_crc(g_212.f0, "g_212.f0", print_hash_value);
    transparent_crc(g_212.f1, "g_212.f1", print_hash_value);
    transparent_crc(g_212.f2, "g_212.f2", print_hash_value);
    transparent_crc(g_212.f3, "g_212.f3", print_hash_value);
    transparent_crc(g_212.f4, "g_212.f4", print_hash_value);
    transparent_crc(g_363, "g_363", print_hash_value);
    transparent_crc(g_395, "g_395", print_hash_value);
    transparent_crc(g_536.f0, "g_536.f0", print_hash_value);
    transparent_crc(g_536.f1, "g_536.f1", print_hash_value);
    transparent_crc(g_536.f2, "g_536.f2", print_hash_value);
    transparent_crc(g_536.f3, "g_536.f3", print_hash_value);
    transparent_crc(g_536.f4, "g_536.f4", print_hash_value);
    transparent_crc(g_606, "g_606", print_hash_value);
    platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
    return 0;
}

/************************ statistics *************************
XXX max struct depth: 1
breakdown:
   depth: 0, occurrence: 81
   depth: 1, occurrence: 18
XXX total union variables: 0

XXX max expression depth: 45
breakdown:
   depth: 1, occurrence: 98
   depth: 2, occurrence: 21
   depth: 3, occurrence: 3
   depth: 9, occurrence: 1
   depth: 13, occurrence: 2
   depth: 15, occurrence: 1
   depth: 17, occurrence: 1
   depth: 19, occurrence: 2
   depth: 20, occurrence: 1
   depth: 21, occurrence: 3
   depth: 23, occurrence: 6
   depth: 24, occurrence: 1
   depth: 25, occurrence: 1
   depth: 26, occurrence: 1
   depth: 28, occurrence: 1
   depth: 29, occurrence: 1
   depth: 31, occurrence: 3
   depth: 33, occurrence: 1
   depth: 36, occurrence: 2
   depth: 37, occurrence: 1
   depth: 38, occurrence: 1
   depth: 41, occurrence: 2
   depth: 45, occurrence: 1

XXX total number of pointers: 0

XXX times a non-volatile is read: 617
XXX times a non-volatile is write: 71
XXX times a volatile is read: 0
XXX    times read thru a pointer: 0
XXX times a volatile is write: 0
XXX    times written thru a pointer: 0
XXX times a volatile is available for access: 0
XXX percentage of non-volatile access: 100

XXX forward jumps: 0
XXX backward jumps: 0

XXX stmts: 102
XXX max block depth: 5
breakdown:
   depth: 0, occurrence: 23
   depth: 1, occurrence: 19
   depth: 2, occurrence: 20
   depth: 3, occurrence: 22
   depth: 4, occurrence: 8
   depth: 5, occurrence: 10

XXX percentage a fresh-made variable is used: 15.1
XXX percentage an existing variable is used: 84.9
********************* end of statistics **********************/



Assembly Code with Setting 1: 
	.text
	.file	"tmp__xpdw3o.c"
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5, 0x0                          # -- Begin function main
.LCPI0_0:
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	2                               # 0x2
	.long	3                               # 0x3
	.long	4                               # 0x4
	.long	5                               # 0x5
	.long	6                               # 0x6
	.long	7                               # 0x7
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0
.LCPI0_1:
	.long	3988292384                      # 0xedb88320
.LCPI0_2:
	.long	8                               # 0x8
	.text
	.globl	main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:
	pushq	%rax
	.cfi_def_cfa_offset 16
	vmovdqa	.LCPI0_0(%rip), %ymm0           # ymm0 = [0,1,2,3,4,5,6,7]
	xorl	%ecx, %ecx
	vpbroadcastd	.LCPI0_1(%rip), %ymm1   # ymm1 = [3988292384,3988292384,3988292384,3988292384,3988292384,3988292384,3988292384,3988292384]
	leaq	crc32_tab(%rip), %rax
	vpbroadcastd	.LCPI0_2(%rip), %ymm2   # ymm2 = [8,8,8,8,8,8,8,8]
	.p2align	4, 0x90
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
	vpsrld	$1, %ymm0, %ymm3
	vpxor	%ymm1, %ymm3, %ymm4
	vpslld	$31, %ymm0, %ymm5
	vblendvps	%ymm5, %ymm4, %ymm3, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vmovups	%ymm3, (%rcx,%rax)
	vpaddd	%ymm2, %ymm0, %ymm0
	addq	$32, %rcx
	cmpq	$1024, %rcx                     # imm = 0x400
	jne	.LBB0_1
# %bb.2:
	movl	crc32_context(%rip), %ecx
	movzbl	%cl, %edx
                                        # kill: def $ecx killed $ecx killed $rcx
	shrl	$8, %ecx
	xorq	$5, %rdx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$30, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	cmpb	$0, g_17.0(%rip)
	movl	$5, %esi
	movl	$1410418033, %edx               # imm = 0x54114571
	cmovneq	%rsi, %rdx
	movl	%edx, %esi
	xorl	%ecx, %esi
	shrl	$8, %ecx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %ecx
	movl	%edx, %esi
	shrl	$8, %esi
	xorl	%ecx, %esi
	shrl	$8, %ecx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %ecx
	movl	%edx, %esi
	shrl	$16, %esi
	xorl	%ecx, %esi
	shrl	$8, %ecx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %ecx
	shrq	$24, %rdx
	movzbl	%cl, %esi
	shrl	$8, %ecx
	xorq	%rdx, %rsi
	xorl	(%rax,%rsi,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
                                        # kill: def $ecx killed $ecx def $rcx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movabsq	$562949952827568, %rdx          # imm = 0x1FFFFFFF6F0B0
	movl	%ecx, %esi
	shrl	$8, %esi
	xorl	$176, %ecx
	movzbl	%cl, %ecx
	xorl	(%rax,%rcx,4), %esi
	movq	%rdx, g_212(%rip)
	movl	%esi, %ecx
	shrl	$8, %ecx
	xorl	$240, %esi
	movzbl	%sil, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	$589824, g_212+8(%rip)          # imm = 0x90000
	movl	%ecx, %edx
	shrl	$8, %edx
	notl	%ecx
	movzbl	%cl, %ecx
	xorl	(%rax,%rcx,4), %edx
	movb	$15, g_212+12(%rip)
	movl	%edx, %ecx
	shrl	$8, %ecx
	notl	%edx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	shrl	$8, %edx
	notl	%ecx
	movzbl	%cl, %ecx
	xorl	(%rax,%rcx,4), %edx
	movl	%edx, %ecx
	shrl	$8, %ecx
	notl	%edx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	shrl	$8, %edx
	notl	%ecx
	movzbl	%cl, %ecx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	movl	%edx, %esi
	shrl	$8, %esi
	xorq	$255, %rcx
	xorl	(%rax,%rcx,4), %esi
	movslq	g_212+2(%rip), %rcx
	movl	%esi, %edx
	shrl	$8, %edx
	xorl	%ecx, %esi
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%ecx, %esi
	shrl	$8, %esi
	xorl	%edx, %esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%ecx, %esi
	shrl	$16, %esi
	xorl	%edx, %esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%ecx, %esi
	shrl	$24, %esi
	xorl	%edx, %esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movq	%rcx, %rsi
	shrq	$32, %rsi
	xorl	%edx, %esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movq	%rcx, %rsi
	shrq	$40, %rsi
	xorl	%edx, %esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movq	%rcx, %rsi
	shrq	$48, %rsi
	xorl	%edx, %esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	shrq	$56, %rcx
	movzbl	%dl, %esi
	movl	%edx, %edi
	shrl	$8, %edi
	xorq	%rcx, %rsi
	xorl	(%rax,%rsi,4), %edi
	movslq	g_212+6(%rip), %rcx
	movl	%edi, %edx
	shrl	$8, %edx
	xorl	%ecx, %edi
	movzbl	%dil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%ecx, %esi
	shrl	$8, %esi
	xorl	%edx, %esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%ecx, %esi
	shrl	$16, %esi
	xorl	%edx, %esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%ecx, %esi
	shrl	$24, %esi
	xorl	%edx, %esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movq	%rcx, %rsi
	shrq	$32, %rsi
	xorl	%edx, %esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movq	%rcx, %rsi
	shrq	$40, %rsi
	xorl	%edx, %esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movq	%rcx, %rsi
	shrq	$48, %rsi
	xorl	%edx, %esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	shrq	$56, %rcx
	movzbl	%dl, %esi
	movl	%edx, %edi
	shrl	$8, %edi
	xorq	%rcx, %rsi
	xorl	(%rax,%rsi,4), %edi
	movswl	g_212+10(%rip), %ecx
	movslq	%ecx, %rcx
	movl	%edi, %edx
	shrl	$8, %edx
	xorl	%ecx, %edi
	movzbl	%dil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%ecx, %esi
	shrl	$8, %esi
	xorl	%edx, %esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%ecx, %esi
	shrl	$16, %esi
	xorl	%edx, %esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%ecx, %esi
	shrl	$24, %esi
	xorl	%edx, %esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movq	%rcx, %rsi
	shrq	$32, %rsi
	xorl	%edx, %esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movq	%rcx, %rsi
	shrq	$40, %rsi
	xorl	%edx, %esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movq	%rcx, %rsi
	shrq	$48, %rsi
	xorl	%edx, %esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	shrq	$56, %rcx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorq	%rcx, %rsi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	$15, %ecx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	$177, %ecx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	$37, %ecx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	$105, %ecx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	$68, %ecx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	$24, %ecx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %esi
	movl	%edx, %ecx
	shrl	$8, %ecx
	xorl	$219, %esi
	xorl	(%rax,%rsi,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$49, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$191, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$109, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$9, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$239, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$104, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$14, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$116, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$242, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$86, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$207, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movb	$1, g_15(%rip)
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$6, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	movl	%ecx, %esi
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movl	%esi, crc32_context(%rip)
	notl	%esi
	leaq	.L.str.19(%rip), %rdi
	xorl	%eax, %eax
	vzeroupper
	callq	printf@PLT
	xorl	%eax, %eax
	popq	%rcx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end0:
	.size	main, .Lfunc_end0-main
	.cfi_endproc
                                        # -- End function
	.type	g_15,@object                    # @g_15
	.local	g_15
	.comm	g_15,1,1
	.type	g_17.0,@object                  # @g_17.0
	.local	g_17.0
	.comm	g_17.0,1,4
	.type	g_212,@object                   # @g_212
	.data
	.p2align	1, 0x0
g_212:
	.short	3                               # 0x3
	.long	60823071                        # 0x3a0161f
	.long	1                               # 0x1
	.short	24489                           # 0x5fa9
	.byte	2                               # 0x2
	.size	g_212, 13

	.type	crc32_context,@object           # @crc32_context
	.p2align	2, 0x0
crc32_context:
	.long	4294967295                      # 0xffffffff
	.size	crc32_context, 4

	.type	crc32_tab,@object               # @crc32_tab
	.local	crc32_tab
	.comm	crc32_tab,1024,16
	.type	.L__const.func_35.l_211,@object # @__const.func_35.l_211
	.section	.rodata,"a",@progbits
.L__const.func_35.l_211:
	.short	61616                           # 0xf0b0
	.long	4294967286                      # 0xfffffff6
	.long	1                               # 0x1
	.short	9                               # 0x9
	.byte	117                             # 0x75
	.size	.L__const.func_35.l_211, 13

	.type	.L.str.19,@object               # @.str.19
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.19:
	.asciz	"checksum = %X\n"
	.size	.L.str.19, 15

	.ident	"clang version 16.0.6"
	.section	".note.GNU-stack","",@progbits
	.addrsig


Assembly Code with Setting 2: 
	.file	"tmp2zqu4ile.c"
	.text
	.p2align 4
	.type	crc32_8bytes, @function
crc32_8bytes:
.LFB104:
	.cfi_startproc
	movl	crc32_context(%rip), %eax
	leaq	crc32_tab(%rip), %rdx
	movq	%rdi, %rcx
	movl	%eax, %esi
	shrl	$8, %eax
	xorl	%edi, %esi
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movzbl	%ch, %esi
	shrq	$56, %rcx
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movq	%rdi, %rsi
	shrq	$16, %rsi
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movl	%edi, %esi
	shrl	$24, %esi
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movq	%rdi, %rsi
	shrq	$32, %rsi
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movq	%rdi, %rsi
	shrq	$40, %rsi
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movq	%rdi, %rsi
	shrq	$48, %rsi
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	xorl	%eax, %ecx
	shrl	$8, %eax
	movzbl	%cl, %ecx
	xorl	(%rdx,%rcx,4), %eax
	movl	%eax, crc32_context(%rip)
	ret
	.cfi_endproc
.LFE104:
	.size	crc32_8bytes, .-crc32_8bytes
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC4:
	.string	"checksum = %X\n"
	.section	.text.startup,"ax",@progbits
	.p2align 4
	.globl	main
	.type	main, @function
main:
.LFB117:
	.cfi_startproc
	movl	$8, %ecx
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	leaq	crc32_tab(%rip), %rax
	vmovdqa	.LC0(%rip), %ymm5
	vmovd	%ecx, %xmm6
	leaq	1024(%rax), %rdx
	vpxor	%xmm4, %xmm4, %xmm4
	movl	$1, %ecx
	vmovd	%ecx, %xmm3
	movl	$-306674912, %ecx
	vpbroadcastd	%xmm6, %ymm6
	vmovd	%ecx, %xmm2
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	vpbroadcastd	%xmm3, %ymm3
	andq	$-32, %rsp
	vpbroadcastd	%xmm2, %ymm2
	.p2align 4,,10
	.p2align 3
.L4:
	vmovdqa	%ymm5, %ymm1
	addq	$32, %rax
	vpaddd	%ymm6, %ymm5, %ymm5
	vpand	%ymm3, %ymm1, %ymm0
	vpsrld	$1, %ymm1, %ymm1
	vpsubd	%ymm0, %ymm4, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm0, %ymm0
	vpand	%ymm3, %ymm0, %ymm1
	vpsrld	$1, %ymm0, %ymm0
	vpsubd	%ymm1, %ymm4, %ymm1
	vpand	%ymm2, %ymm1, %ymm1
	vpxor	%ymm0, %ymm1, %ymm1
	vpand	%ymm3, %ymm1, %ymm0
	vpsrld	$1, %ymm1, %ymm1
	vpsubd	%ymm0, %ymm4, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm0, %ymm0
	vpand	%ymm3, %ymm0, %ymm1
	vpsrld	$1, %ymm0, %ymm0
	vpsubd	%ymm1, %ymm4, %ymm1
	vpand	%ymm2, %ymm1, %ymm1
	vpxor	%ymm0, %ymm1, %ymm1
	vpand	%ymm3, %ymm1, %ymm0
	vpsrld	$1, %ymm1, %ymm1
	vpsubd	%ymm0, %ymm4, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm0, %ymm0
	vpand	%ymm3, %ymm0, %ymm1
	vpsrld	$1, %ymm0, %ymm0
	vpsubd	%ymm1, %ymm4, %ymm1
	vpand	%ymm2, %ymm1, %ymm1
	vpxor	%ymm0, %ymm1, %ymm1
	vpand	%ymm3, %ymm1, %ymm0
	vpsrld	$1, %ymm1, %ymm1
	vpsubd	%ymm0, %ymm4, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm0, %ymm0
	vpand	%ymm3, %ymm0, %ymm1
	vpsrld	$1, %ymm0, %ymm0
	vpsubd	%ymm1, %ymm4, %ymm1
	vpand	%ymm2, %ymm1, %ymm1
	vpxor	%ymm0, %ymm1, %ymm0
	vmovdqa	%ymm0, -32(%rax)
	cmpq	%rax, %rdx
	jne	.L4
	movzbl	g_15(%rip), %eax
	movslq	g_17(%rip), %r8
	cmpb	$5, %al
	sete	%dl
	sete	%r9b
	movzbl	%dl, %edx
	movl	%edx, g_16(%rip)
	testb	%al, %al
	je	.L5
	testb	%r8b, %r8b
	jne	.L6
.L5:
	movl	$5, g_17(%rip)
	movl	$5, %r8d
.L6:
	movabsq	$562949952827568, %rax
	movl	$5, %edi
	movb	$30, g_15(%rip)
	movq	%rax, g_212(%rip)
	movl	$0, g_186(%rip)
	movl	$589824, 8+g_212(%rip)
	movb	$15, 12+g_212(%rip)
	call	crc32_8bytes
	movl	$30, %edi
	call	crc32_8bytes
	movzbl	%r9b, %edi
	call	crc32_8bytes
	movq	%r8, %rdi
	call	crc32_8bytes
	xorl	%edi, %edi
	call	crc32_8bytes
	movq	$-3920, %rdi
	call	crc32_8bytes
	movq	$-10, %rdi
	call	crc32_8bytes
	movl	$1, %edi
	call	crc32_8bytes
	movl	$9, %edi
	call	crc32_8bytes
	movl	$15, %edi
	call	crc32_8bytes
	movl	$1147741617, %edi
	call	crc32_8bytes
	xorl	%edi, %edi
	call	crc32_8bytes
	movq	$-9448, %rdi
	call	crc32_8bytes
	movl	$158187313, %edi
	call	crc32_8bytes
	movl	$1947101423, %edi
	call	crc32_8bytes
	movl	$22258, %edi
	call	crc32_8bytes
	movl	$207, %edi
	call	crc32_8bytes
	movl	$6, %edi
	call	crc32_8bytes
	movl	crc32_context(%rip), %esi
	leaq	.LC4(%rip), %rdi
	xorl	%eax, %eax
	notl	%esi
	call	printf@PLT
	xorl	%eax, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE117:
	.size	main, .-main
	.data
	.align 8
	.type	g_212, @object
	.size	g_212, 13
g_212:
	.value	3
	.long	60823071
	.long	1
	.value	24489
	.byte	2
	.align 4
	.type	g_186, @object
	.size	g_186, 4
g_186:
	.long	2062185852
	.align 4
	.type	g_17, @object
	.size	g_17, 4
g_17:
	.long	1410418033
	.align 4
	.type	g_16, @object
	.size	g_16, 4
g_16:
	.long	-1
	.type	g_15, @object
	.size	g_15, 1
g_15:
	.byte	62
	.align 4
	.type	crc32_context, @object
	.size	crc32_context, 4
crc32_context:
	.long	-1
	.local	crc32_tab
	.comm	crc32_tab,1024,32
	.section	.rodata.cst32,"aM",@progbits,32
	.align 32
.LC0:
	.long	0
	.long	1
	.long	2
	.long	3
	.long	4
	.long	5
	.long	6
	.long	7
	.ident	"GCC: (GNU) 13.2.1 20230801"
	.section	.note.GNU-stack,"",@progbits


