--- Interesting Case Report --- 

Interesting Variables: 
['g_115', 'g_108', 'g_279', 'g_817', 'g_850']

Interesting Assembly Lines: 
{'g_115': {'setting1:': [], 'setting2': [['movb', '$1,', 'g_115(%rip)']]}, 'g_108': {'setting1:': [], 'setting2': [['movl', '$65535,', 'g_108(%rip)']]}, 'g_279': {'setting1:': [], 'setting2': [['movl', '$0,', 'g_279(%rip)']]}, 'g_817': {'setting1:': [], 'setting2': [['movb', '$1,', 'g_817(%rip)']]}, 'g_850': {'setting1:': [], 'setting2': [['movl', '$34,', 'g_850(%rip)']]}}

Source Code: 
/*
 * This is a RANDOMLY GENERATED PROGRAM.
 *
 * Generator: csmith 2.3.0
 * Git version: 30dccd7
 * Options:   --no-unions --safe-math --no-argc --no-volatiles --no-volatile-pointers --no-arrays --bitfields --checksum --comma-operators --no-compound-assignment --no-consts --no-divs --embedded-assigns --jumps --longlong --no-force-non-uniform-arrays --no-math64 --muls --packed-struct --no-paranoid --pointers --no-structs --inline-function --return-structs --arg-structs --dangling-global-pointers
 * Seed:      17820997656954750528
 */

#include "csmith.h"


static long __undefined;

/* --- Struct/Union Declarations --- */
/* --- GLOBAL VARIABLES --- */
static int8_t g_8 = 0xDAL;
static int32_t g_22 = 0x452FA814L;
static int32_t *g_21 = &g_22;
static int32_t *g_52 = &g_22;
static int32_t **g_51 = &g_52;
static int8_t g_85 = (-9L);
static int32_t g_87 = (-4L);
static int32_t g_108 = (-1L);
static int32_t *g_107 = &g_108;
static uint8_t g_115 = 0xBDL;
static int16_t g_127 = 1L;
static uint16_t g_167 = 0x81B6L;
static uint16_t g_185 = 8UL;
static int16_t **g_188 = (void*)0;
static uint8_t g_268 = 6UL;
static uint8_t *g_276 = &g_115;
static uint32_t g_279 = 0x7AA1D18FL;
static uint16_t g_340 = 65535UL;
static int16_t ***g_356 = (void*)0;
static int16_t ****g_355 = &g_356;
static int8_t g_445 = 0L;
static int32_t *g_459 = &g_108;
static uint32_t g_514 = 0xD8C914E6L;
static uint32_t g_515 = 18446744073709551615UL;
static uint16_t *g_518 = &g_185;
static uint16_t **g_517 = &g_518;
static uint32_t *g_749 = &g_279;
static uint32_t g_755 = 0x780991ADL;
static int16_t g_797 = (-1L);
static uint8_t g_817 = 0x95L;
static uint16_t g_834 = 8UL;
static uint32_t g_850 = 0x02C7FD85L;


/* --- FORWARD DECLARATIONS --- */
static uint8_t  func_1(void);
static int32_t * func_2(int32_t  p_3, int32_t  p_4);
inline static int16_t  func_15(uint8_t  p_16);
inline static int32_t * func_19(int32_t * p_20);
static uint8_t  func_26(int32_t * p_27, uint16_t  p_28);
inline static int32_t  func_33(int16_t  p_34, uint32_t  p_35, int32_t ** p_36, int32_t * p_37);
inline static int8_t  func_40(int32_t  p_41);
inline static uint16_t  func_47(int16_t  p_48, int32_t ** p_49, int32_t  p_50);
inline static int32_t  func_53(uint8_t  p_54, int8_t  p_55, int32_t  p_56, int32_t * p_57, uint16_t  p_58);
inline static uint16_t  func_60(uint32_t  p_61);


/* --- FUNCTIONS --- */
/* ------------------------------------------ */
/* 
 * reads : g_8 g_21 g_22 g_51 g_52 g_115 g_85 g_107 g_108 g_445 g_340 g_276 g_459 g_279 g_87 g_127 g_268 g_517 g_518 g_167 g_355 g_356 g_514 g_755 g_185 g_515 g_817 g_797
 * writes: g_21 g_52 g_279 g_167 g_108 g_340 g_185 g_514 g_515 g_517 g_518 g_85 g_268 g_356 g_87 g_115 g_749 g_127 g_797 g_22 g_850 g_817 g_834 g_107
 */
static uint8_t  func_1(void)
{ /* block id: 0 */
    uint8_t l_5 = 247UL;
    (*g_51) = func_2(((((((l_5 ^ (((safe_lshift_func_int8_t_s_s(g_8, 7)) , ((((!0xF80CL) <= ((safe_unary_minus_func_int32_t_s((safe_mod_func_uint32_t_u_u((safe_unary_minus_func_uint8_t_u(g_8)), l_5)))) , (1L < ((~g_8) & ((func_15(l_5) , 8UL) || (*g_518)))))) , 0x38D4E32DL) == 4294967295UL)) >= 9UL)) , 9L) & l_5) & 0x2142A846L) , 0x09D6631CL) <= l_5), l_5);
    (*g_51) = (*g_51);
    (*g_51) = (*g_51);
    return (*g_276);
}


/* ------------------------------------------ */
/* 
 * reads : g_21 g_107 g_51 g_52
 * writes: g_22 g_108
 */
static int32_t * func_2(int32_t  p_3, int32_t  p_4)
{ /* block id: 427 */
    int32_t l_893 = (-1L);
    uint16_t *****l_894 = (void*)0;
    uint16_t ***l_897 = &g_517;
    uint16_t ****l_896 = &l_897;
    uint16_t *****l_895 = &l_896;
    (*g_21) = l_893;
    l_893 = ((*g_107) = ((void*)0 != &g_87));
    l_895 = l_894;
    return (*g_51);
}


/* ------------------------------------------ */
/* 
 * reads : g_21 g_8 g_22 g_51 g_52 g_115 g_85 g_107 g_108 g_445 g_340 g_276 g_459 g_279 g_87 g_127 g_268 g_517 g_518 g_167 g_355 g_356 g_514 g_755 g_185 g_515 g_817 g_797
 * writes: g_21 g_52 g_279 g_167 g_108 g_340 g_185 g_514 g_515 g_517 g_518 g_85 g_268 g_356 g_87 g_115 g_749 g_127 g_797 g_22 g_850 g_817 g_834 g_107
 */
inline static int16_t  func_15(uint8_t  p_16)
{ /* block id: 1 */
    int8_t l_18 = 0xAFL;
    int32_t *l_29 = &g_22;
    int32_t **l_30 = &l_29;
    uint16_t *l_892 = &g_167;
    (*g_459) = (safe_unary_minus_func_uint16_t_u(((*l_892) = (l_18 && ((g_21 = func_19(g_21)) == ((safe_rshift_func_uint8_t_u_u(func_26(((*l_30) = func_19(func_19(func_19(l_29)))), g_8), p_16)) , (*g_51)))))));
    return (**l_30);
}


/* ------------------------------------------ */
/* 
 * reads :
 * writes:
 */
inline static int32_t * func_19(int32_t * p_20)
{ /* block id: 2 */
    int32_t *l_23 = &g_22;
    return l_23;
}


/* ------------------------------------------ */
/* 
 * reads : g_8 g_22 g_51 g_52 g_115 g_85 g_107 g_108 g_445 g_340 g_276 g_459 g_279 g_87 g_127 g_268 g_517 g_518 g_167 g_355 g_356 g_514 g_755 g_185 g_515 g_817 g_797
 * writes: g_52 g_279 g_167 g_108 g_340 g_185 g_514 g_515 g_517 g_518 g_85 g_268 g_356 g_87 g_115 g_749 g_127 g_797 g_22 g_850 g_817 g_834 g_107
 */
static uint8_t  func_26(int32_t * p_27, uint16_t  p_28)
{ /* block id: 6 */
    int32_t *l_42 = (void*)0;
    int32_t l_43 = 0L;
    uint16_t *l_833 = &g_834;
    int32_t l_848 = (-4L);
    uint32_t *l_849 = &g_850;
    int32_t **l_851 = (void*)0;
    int32_t *l_889 = &g_22;
    int32_t **l_891 = &g_107;
    if (((((safe_sub_func_int32_t_s_s(func_33(((safe_lshift_func_uint16_t_u_u(6UL, g_8)) && func_40((l_43 = g_22))), ((*l_849) = (safe_sub_func_int8_t_s_s(((l_833 != ((safe_mul_func_int16_t_s_s((safe_sub_func_uint32_t_u_u((safe_sub_func_int8_t_s_s((safe_lshift_func_int8_t_s_u(((~p_28) || (-10L)), 2)), p_28)), (safe_mul_func_int16_t_s_s((((safe_mul_func_int8_t_s_s(g_445, p_28)) ^ 0x007D700CL) , l_848), p_28)))), 0xBA95L)) , &g_834)) ^ l_848), p_28))), l_851, p_27), (-1L))) , 6UL) ^ 9UL) , (*p_27)))
    { /* block id: 414 */
        (*g_51) = func_19(l_889);
    }
    else
    { /* block id: 416 */
        int32_t *l_890 = &g_108;
        (*g_51) = l_890;
        (*g_51) = p_27;
    }
    (*g_51) = func_19(func_19(func_19(((*l_891) = ((*g_51) = (*g_51))))));
    return (*g_276);
}


/* ------------------------------------------ */
/* 
 * reads : g_276 g_115 g_107 g_108 g_127 g_22 g_8 g_517 g_518 g_514 g_797 g_445
 * writes: g_817 g_268 g_108 g_115 g_167 g_185 g_834 g_22
 */
inline static int32_t  func_33(int16_t  p_34, uint32_t  p_35, int32_t ** p_36, int32_t * p_37)
{ /* block id: 399 */
    uint32_t l_854 = 0x17CAED3DL;
    uint8_t *l_855 = &g_817;
    uint8_t *l_856 = &g_268;
    int32_t l_857 = 1L;
    uint16_t *l_879 = &g_834;
    uint32_t l_888 = 18446744073709551612UL;
    (*g_107) = (safe_mul_func_int8_t_s_s(l_854, ((((*g_276) > (l_857 = ((*l_856) = ((*l_855) = (*g_276))))) , &g_107) != (void*)0)));
    (*p_37) = ((((((safe_mod_func_int8_t_s_s((l_857 = l_854), (safe_rshift_func_uint16_t_u_u((safe_mul_func_uint16_t_u_u((safe_rshift_func_uint16_t_u_s((((safe_mod_func_uint16_t_u_u(((*l_879) = ((**g_517) = (((((p_35 , ((((safe_add_func_int8_t_s_s((safe_lshift_func_int16_t_s_s((l_854 || (+g_108)), l_854)), ((safe_add_func_uint8_t_u_u((g_127 != (((safe_sub_func_uint8_t_u_u((safe_add_func_uint32_t_u_u(l_854, (*p_37))), ((*g_276) = ((*l_855) = 1UL)))) , (*p_37)) & g_8)), l_854)) | l_854))) | l_854) <= l_854) > p_35)) | l_854) != 0x4D6BL) == 1UL) < 0L))), g_514)) || 0xCEL) , l_854), 8)), 0x22FEL)), 5)))) && (*g_276)) , (void*)0) == (void*)0) ^ 0xF88AC64DL) <= (*g_107));
    l_857 = (((p_35 == (g_797 != 0UL)) < l_857) || (safe_lshift_func_uint16_t_u_u(((l_888 = (safe_mod_func_uint8_t_u_u((safe_mul_func_uint16_t_u_u((((4294967287UL && ((4L && (safe_sub_func_uint16_t_u_u((((0x0DE9C7ACL & ((*g_107) = 1L)) , (0xF8L >= 0xDDL)) == (*p_37)), p_35))) , l_857)) > g_445) || p_34), p_35)), 7UL))) & 0xEED1L), 14)));
    return (*g_107);
}


/* ------------------------------------------ */
/* 
 * reads : g_22 g_51 g_8 g_52 g_115 g_85 g_107 g_108 g_445 g_340 g_276 g_459 g_279 g_87 g_127 g_268 g_517 g_518 g_167 g_355 g_356 g_514 g_755 g_185 g_515 g_817
 * writes: g_52 g_279 g_167 g_108 g_340 g_185 g_514 g_515 g_517 g_518 g_85 g_268 g_356 g_87 g_115 g_749 g_127 g_797 g_22
 */
inline static int8_t  func_40(int32_t  p_41)
{ /* block id: 8 */
    uint32_t l_44 = 18446744073709551611UL;
    int32_t l_59 = 0x450187E5L;
    int32_t l_799 = (-1L);
    int16_t l_829 = 2L;
    uint8_t l_830 = 0UL;
    (*g_51) = (((l_44 = g_22) | (((l_59 = ((((*g_107) = (safe_sub_func_uint16_t_u_u(func_47(g_22, g_51, func_53(l_59, l_59, g_8, g_52, func_60(p_41))), 1UL))) >= g_445) , l_59)) , 0x7326A47EL) ^ l_799)) , (void*)0);
    for (g_127 = 0; (g_127 > (-11)); --g_127)
    { /* block id: 369 */
        int16_t ***l_824 = (void*)0;
        for (g_797 = 0; (g_797 >= 25); g_797++)
        { /* block id: 372 */
            uint16_t l_820 = 0UL;
            (*g_51) = func_19((*g_51));
            for (g_340 = 0; (g_340 == 5); g_340 = safe_add_func_uint8_t_u_u(g_340, 8))
            { /* block id: 376 */
                int16_t l_816 = (-1L);
                uint16_t l_818 = 0xA4E6L;
                for (g_279 = 0; (g_279 > 9); g_279 = safe_add_func_uint32_t_u_u(g_279, 1))
                { /* block id: 379 */
                    int16_t l_821 = 0x3454L;
                    int8_t *l_823 = &g_85;
                    int8_t **l_822 = &l_823;
                    if (((+(((safe_mul_func_int16_t_s_s((((safe_unary_minus_func_uint32_t_u((safe_sub_func_int32_t_s_s(p_41, (~(+(l_816 == g_817))))))) , (l_818 = 0UL)) ^ ((((safe_unary_minus_func_int8_t_s(l_820)) & (((((*g_355) == (void*)0) != ((*g_276) = l_821)) <= (p_41 | l_821)) , l_59)) < l_799) | 0xF56F5195L)), 1L)) , 2UL) < p_41)) , (**g_51)))
                    { /* block id: 382 */
                        l_799 = ((void*)0 == l_822);
                    }
                    else
                    { /* block id: 384 */
                        return p_41;
                    }
                }
                l_824 = (*g_355);
                (*g_51) = func_19(((safe_sub_func_uint8_t_u_u(3UL, ((safe_rshift_func_uint16_t_u_s(l_44, 4)) >= g_340))) , func_19((*g_51))));
                (**g_51) = (-5L);
            }
            if (p_41)
                break;
        }
    }
    (*g_459) = (((p_41 && l_829) & l_830) | 5L);
    (*g_51) = &l_799;
    return g_445;
}


/* ------------------------------------------ */
/* 
 * reads : g_115 g_85 g_107 g_108 g_445 g_340 g_276 g_459 g_51 g_52 g_22 g_279 g_87 g_127 g_268 g_517 g_518 g_167 g_355 g_356 g_514 g_755 g_185 g_515
 * writes: g_279 g_167 g_108 g_340 g_185 g_52 g_514 g_515 g_517 g_518 g_85 g_268 g_356 g_87 g_115 g_749 g_127 g_797
 */
inline static uint16_t  func_47(int16_t  p_48, int32_t ** p_49, int32_t  p_50)
{ /* block id: 170 */
    int32_t l_433 = 0x21F6F486L;
    int8_t *l_436 = (void*)0;
    uint32_t *l_437 = &g_279;
    uint16_t *l_438 = (void*)0;
    uint16_t *l_439 = &g_167;
    int32_t l_441 = 0xF99BF465L;
    uint8_t l_478 = 0xE9L;
    int16_t ***l_507 = &g_188;
    int8_t **l_560 = &l_436;
    int8_t ***l_559 = &l_560;
    int8_t ****l_558 = &l_559;
    int32_t l_637 = 0x6064A47FL;
    uint32_t l_646 = 0UL;
    int8_t l_675 = 0x5CL;
    uint8_t l_741 = 250UL;
    uint16_t l_753 = 0UL;
    int32_t l_798 = (-1L);
    if (((((l_433 != (safe_rshift_func_int8_t_s_u(g_115, 2))) > ((g_85 > (((((*l_439) = (0x34L ^ ((((*l_437) = (l_436 != (void*)0)) < l_433) <= (-1L)))) , (safe_unary_minus_func_uint16_t_u(65535UL))) > 0x80L) & 0xEE58L)) , l_433)) , 0x20927C93L) & l_441))
    { /* block id: 173 */
        int16_t l_442 = 0x4970L;
        int32_t l_457 = 0x8BF95130L;
        int32_t *l_464 = &l_433;
        int8_t l_492 = (-4L);
        int8_t **l_523 = &l_436;
        int8_t ***l_522 = &l_523;
        int16_t ****l_528 = &l_507;
        int32_t l_611 = 0x5385C01EL;
        (*g_107) = (l_442 = (l_433 , (*g_107)));
        if (((safe_lshift_func_int16_t_s_s(l_441, p_50)) < g_445))
        { /* block id: 176 */
            int8_t l_458 = 0xF6L;
            int32_t *l_463 = &l_433;
            int32_t l_495 = 0x0D1E4D87L;
            uint16_t l_496 = 65535UL;
            int8_t ****l_524 = &l_522;
            for (g_340 = 0; (g_340 > 26); ++g_340)
            { /* block id: 179 */
                int32_t *l_460 = (void*)0;
                int16_t ***l_508 = &g_188;
                if (((((*l_439) = ((*g_276) ^ (safe_unary_minus_func_uint32_t_u((((safe_lshift_func_uint8_t_u_u((safe_mod_func_uint16_t_u_u((safe_mod_func_int8_t_s_s((safe_sub_func_uint32_t_u_u((0x93L < (l_457 = l_433)), ((*g_107) = ((*g_276) , 0x6B748E91L)))), (*g_276))), l_458)), 7)) == 1L) , ((65535UL >= 0xFED9L) != p_48)))))) , l_433) & l_458))
                { /* block id: 183 */
                    uint16_t l_465 = 65530UL;
                    int8_t *l_472 = (void*)0;
                    int8_t *l_473 = &l_458;
                    l_460 = func_19(func_19(g_459));
                    for (g_185 = 0; (g_185 <= 59); ++g_185)
                    { /* block id: 187 */
                        (*g_51) = l_463;
                        l_464 = func_19((*g_51));
                    }
                    if (((((l_465 = g_22) & ((g_185 = ((*l_439) = 65529UL)) == ((safe_mod_func_uint8_t_u_u(((p_50 > (p_48 = (-1L))) > (((g_340 & ((((*l_437) = (safe_lshift_func_uint8_t_u_u(((safe_add_func_uint32_t_u_u((((*g_276) & (((((((*l_473) = g_279) < (((-1L) != (safe_lshift_func_int16_t_s_u(((safe_sub_func_int16_t_s_s(((((l_464 == &g_87) != l_433) ^ 4UL) | 0x1DL), 0UL)) == 0x99D6L), (*l_460)))) != (*l_463))) > (*g_276)) , 0x4A86L) == 3L) != 0UL)) | g_87), 0xFC969621L)) | 0x41L), 7))) <= l_478) , p_50)) , 4294967295UL) >= 6L)), p_50)) != 0L))) >= (*g_107)) , (*g_107)))
                    { /* block id: 197 */
                        uint32_t l_509 = 0x0534BFD1L;
                        uint32_t *l_510 = (void*)0;
                        uint32_t *l_511 = (void*)0;
                        uint32_t *l_512 = (void*)0;
                        uint32_t *l_513 = (void*)0;
                        int32_t l_516 = 0x5A7EF1A6L;
                        (*g_459) = (((*l_437) = (((safe_rshift_func_int8_t_s_s(0x89L, 6)) <= ((!(safe_lshift_func_int8_t_s_u((safe_rshift_func_uint8_t_u_s((((((safe_add_func_uint16_t_u_u(((-9L) >= (safe_lshift_func_uint8_t_u_s((l_441 <= p_50), 7))), (((*g_459) != ((*l_463) = ((((safe_lshift_func_int16_t_s_u((((l_492 = g_115) < ((*l_463) == (safe_lshift_func_int8_t_s_s((&g_22 == ((p_50 , p_48) , (void*)0)), 1)))) , l_495), g_127)) & p_50) , p_50) >= p_48))) , l_465))) | g_279) , 0x9B07L) > p_48) && (*g_459)), l_441)), 7))) <= (*g_107))) < l_441)) && l_496);
                        if ((*l_460))
                            continue;
                        l_516 = (((((g_515 = (g_514 = ((((safe_add_func_int32_t_s_s(((*g_107) = (safe_add_func_uint32_t_u_u((safe_add_func_uint32_t_u_u((p_48 , (l_441 = ((((~p_50) || g_268) , g_85) | ((*l_437) = ((safe_rshift_func_uint8_t_u_u((g_340 , (((~((p_48 != p_48) | 0x2D3BA066L)) , l_507) != l_508)), (*l_464))) > (-6L)))))), l_509)), 0x0556B745L))), (*l_460))) != (*l_460)) || l_465) & (*l_464)))) <= 0UL) < l_433) <= 0UL) <= g_87);
                    }
                    else
                    { /* block id: 209 */
                        uint16_t ***l_519 = &g_517;
                        (*l_519) = g_517;
                        if (p_48)
                            break;
                        if ((*l_464))
                            break;
                        if ((*l_464))
                            continue;
                    }
                }
                else
                { /* block id: 215 */
                    int32_t ***l_521 = &g_51;
                    int32_t ****l_520 = &l_521;
                    (*l_520) = (void*)0;
                }
            }
            (*g_51) = &g_108;
            (*l_524) = l_522;
        }
        else
        { /* block id: 221 */
            uint16_t *l_527 = &g_167;
            int32_t *l_531 = (void*)0;
            int32_t l_552 = (-5L);
            int8_t l_557 = 8L;
            uint16_t **l_564 = (void*)0;
            int32_t *l_598 = &l_552;
            for (l_433 = 4; (l_433 <= (-20)); --l_433)
            { /* block id: 224 */
                int8_t **l_556 = &l_436;
                int16_t *l_576 = &l_442;
                uint32_t *l_592 = &g_279;
                int8_t *l_612 = &g_85;
                int32_t l_613 = 8L;
                uint8_t *l_614 = &g_268;
                uint8_t *l_615 = (void*)0;
                uint8_t *l_616 = &l_478;
                if ((((((*g_517) = l_527) != l_527) , g_279) > ((void*)0 != l_528)))
                { /* block id: 226 */
                    uint16_t *l_543 = &g_185;
                    int16_t ****l_546 = &l_507;
                    int32_t l_551 = 0x21BD6B79L;
                    int32_t *l_553 = &l_552;
                    (*g_51) = &g_108;
                    if (l_478)
                        break;
                    (*l_553) = (safe_add_func_uint32_t_u_u((l_464 != l_531), ((*g_107) = (!(safe_rshift_func_uint16_t_u_u((safe_mul_func_uint16_t_u_u((safe_mod_func_int16_t_s_s((safe_lshift_func_int16_t_s_u((((**g_517) | (safe_mod_func_uint16_t_u_u(((*l_543) = (**g_517)), (safe_rshift_func_uint16_t_u_s(((void*)0 != l_546), (0x3346L < (safe_add_func_int8_t_s_s((*l_464), (((safe_mod_func_int8_t_s_s(p_48, 0x81L)) ^ l_551) & p_50))))))))) != 0L), 9)), 0x226AL)), l_552)), 13))))));
                }
                else
                { /* block id: 232 */
                    uint32_t l_561 = 0xC9520C32L;
                    int16_t *l_562 = (void*)0;
                    int16_t *l_563 = &l_442;
                    (*g_459) = ((((*l_563) = (((g_85 = ((0L < (1UL || ((*g_276) && 1L))) , (l_441 = g_445))) | ((((safe_sub_func_int16_t_s_s(((p_48 != ((*l_439) = (((void*)0 != l_556) != (0x59EEL < 0x47E0L)))) ^ l_433), l_557)) != 0x81L) , l_558) != (void*)0)) & l_561)) ^ l_433) && p_48);
                    l_552 = (&l_527 != (l_564 = &l_438));
                    for (l_442 = 0; (l_442 == 9); l_442 = safe_add_func_uint32_t_u_u(l_442, 2))
                    { /* block id: 242 */
                        (*g_51) = &p_50;
                        (*g_51) = func_19((*p_49));
                    }
                }
                for (l_552 = 0; (l_552 != (-18)); l_552 = safe_sub_func_int16_t_s_s(l_552, 6))
                { /* block id: 249 */
                    int32_t *l_571 = &l_433;
                    int32_t *l_580 = &g_87;
                    for (g_268 = 0; (g_268 == 7); g_268 = safe_add_func_int32_t_s_s(g_268, 5))
                    { /* block id: 252 */
                        (*g_355) = ((*l_528) = (*g_355));
                        (*p_49) = l_571;
                    }
                    if ((((3L <= (l_552 <= ((*g_459) , (safe_lshift_func_int8_t_s_u((safe_add_func_uint8_t_u_u((((((l_552 , l_576) == (void*)0) <= ((*l_464) < ((safe_sub_func_uint16_t_u_u(((((*l_580) = (~(*l_464))) , (safe_rshift_func_uint8_t_u_s((l_441 && 250UL), 7))) & (*g_107)), (**g_517))) >= (*g_107)))) , l_441) > g_514), (*g_276))), (*l_571)))))) | 0xC79A2B35L) < 0x38D0C215L))
                    { /* block id: 258 */
                        (*g_51) = (void*)0;
                    }
                    else
                    { /* block id: 260 */
                        uint32_t l_587 = 18446744073709551615UL;
                        (*p_49) = ((((safe_rshift_func_uint16_t_u_u((safe_sub_func_int8_t_s_s(l_587, g_115)), 11)) >= p_48) || (safe_mod_func_uint8_t_u_u((((safe_rshift_func_uint16_t_u_u((((*l_571) & l_587) > ((*g_518) >= ((void*)0 == l_592))), 11)) >= (safe_add_func_uint8_t_u_u((+((l_441 = (safe_sub_func_int32_t_s_s((p_50 != (*l_571)), p_48))) != 0xB1L)), p_48))) , l_552), (*g_276)))) , &g_22);
                    }
                    (*g_51) = l_598;
                }
                if ((*g_459))
                    break;
                (*g_459) = (safe_mul_func_int16_t_s_s((safe_add_func_uint8_t_u_u(((*g_276) < ((((((0UL ^ l_433) & (0xE906L || ((safe_add_func_int16_t_s_s(((p_48 == ((*l_576) = (safe_sub_func_uint8_t_u_u(((*l_616) = ((*l_614) = ((((((l_478 , (2UL || p_48)) != ((*l_612) = (safe_rshift_func_int8_t_s_s((safe_sub_func_int32_t_s_s(((((*l_598) = 0L) & (*g_459)) , (-10L)), l_611)), p_50)))) <= 4294967289UL) , (*g_276)) && p_48) & l_613))), p_50)))) > g_115), p_48)) & 0x89L))) ^ 65531UL) >= 0x685B260BL) | l_441) || l_613)), l_613)), (*l_464)));
            }
        }
    }
    else
    { /* block id: 275 */
        int32_t l_674 = 0xE0FAAD68L;
        int32_t *l_780 = &l_441;
        for (g_115 = 0; (g_115 >= 10); g_115 = safe_add_func_int16_t_s_s(g_115, 3))
        { /* block id: 278 */
            int32_t *l_619 = &l_433;
            int32_t l_721 = 2L;
            int16_t ****l_751 = (void*)0;
            int8_t *l_777 = &l_675;
            (*p_49) = func_19(l_619);
            if ((**p_49))
            { /* block id: 280 */
                int32_t l_628 = (-6L);
                uint16_t ***l_663 = &g_517;
                for (g_268 = (-17); (g_268 > 10); g_268 = safe_add_func_uint8_t_u_u(g_268, 3))
                { /* block id: 283 */
                    int8_t *l_640 = (void*)0;
                    int32_t l_641 = 0x5822D8EBL;
                }
                for (g_108 = 0; (g_108 == (-22)); --g_108)
                { /* block id: 314 */
                    int32_t ***l_705 = (void*)0;
                    int32_t ****l_704 = &l_705;
                    int8_t *l_717 = &l_675;
                    if (l_637)
                        break;
                    (*l_704) = &g_51;
                    (*l_619) = (safe_mod_func_uint32_t_u_u((((void*)0 == (*l_663)) , p_50), (safe_unary_minus_func_int16_t_s(0xFF5BL))));
                }
            }
            else
            { /* block id: 322 */
                uint8_t l_727 = 0UL;
                if ((l_721 ^ (**p_49)))
                { /* block id: 323 */
                    int8_t *l_730 = &l_675;
                    int32_t l_748 = 0x481FD019L;
                    int16_t *l_750 = &g_127;
                    int16_t ****l_752 = &l_507;
                    uint8_t *l_754 = &l_741;
                    (*g_459) = (safe_mul_func_uint16_t_u_u(((safe_add_func_int8_t_s_s((safe_unary_minus_func_uint32_t_u(((((l_727 , g_85) <= (((safe_sub_func_int8_t_s_s(((*l_730) = (-5L)), (safe_add_func_uint8_t_u_u(((safe_sub_func_int16_t_s_s((safe_add_func_uint16_t_u_u(((*l_619) = (((p_50 , (((((*l_754) = ((((*l_439) = ((4294967294UL || (((((safe_rshift_func_int16_t_s_u(((*l_750) = (p_48 = (((safe_lshift_func_uint8_t_u_s((l_741 , (safe_lshift_func_int8_t_s_u((safe_lshift_func_uint8_t_u_u(((((**g_517) = ((g_749 = (((safe_add_func_uint32_t_u_u(4294967295UL, ((g_108 > ((250UL >= (*l_619)) <= p_50)) || l_748))) && (-1L)) , (void*)0)) == (void*)0)) , p_50) != p_48), p_48)), 2))), 0)) & p_50) , l_727))), 4)) , l_751) == l_752) < l_674) && g_85)) ^ l_753)) , g_108) , l_674)) > l_646) > (**g_51)) != g_755)) >= (**p_49)) , (*g_518))), l_727)), p_50)) ^ l_478), p_50)))) , (void*)0) == &g_517)) <= l_748) ^ p_50))), l_637)) == 0xE7L), p_50));
                    for (l_478 = 0; (l_478 == 40); l_478 = safe_add_func_int16_t_s_s(l_478, 2))
                    { /* block id: 335 */
                        uint16_t ****l_765 = (void*)0;
                        uint16_t ***l_767 = &g_517;
                        uint16_t ****l_766 = &l_767;
                        int16_t *l_774 = (void*)0;
                        (*l_619) = (safe_add_func_uint16_t_u_u((safe_lshift_func_int8_t_s_s((safe_rshift_func_int16_t_s_u(((!((**g_517) = l_727)) , (((((*l_766) = &g_517) == &g_517) ^ ((safe_rshift_func_int8_t_s_u(((safe_mul_func_uint8_t_u_u((((((safe_mul_func_int16_t_s_s((((**p_49) , ((void*)0 != l_774)) ^ 0x169E307AL), (((*g_52) || (((((*l_437) = (&l_438 == &g_518)) , (void*)0) != l_777) == l_753)) | 0x8A38L))) >= g_515) & p_50) , p_48) | 0x4FAAL), g_87)) | (*g_518)), 1)) ^ p_48)) > 0x5235L)), l_674)), p_50)), 0x0D47L));
                        return l_674;
                    }
                    (*g_51) = func_19((*g_51));
                    (*g_51) = func_19((*g_51));
                }
                else
                { /* block id: 344 */
                    for (l_646 = 0; (l_646 >= 19); l_646++)
                    { /* block id: 347 */
                        if ((**g_51))
                            break;
                    }
                }
                if ((**p_49))
                    continue;
            }
        }
        (*g_107) = p_48;
        l_780 = &p_50;
        l_433 = ((*l_780) & (*l_780));
    }
    (*g_51) = func_19(func_19(&l_433));
    (*g_51) = (*g_51);
    g_797 = (((((*g_107) = ((safe_mul_func_uint16_t_u_u((((safe_rshift_func_int8_t_s_s(p_48, 7)) < (safe_add_func_int16_t_s_s(l_753, ((safe_add_func_int32_t_s_s((((((**p_49) >= ((safe_lshift_func_int8_t_s_u(l_675, p_50)) ^ ((*g_276) = ((safe_rshift_func_uint8_t_u_s(((((l_637 == (safe_add_func_int16_t_s_s(p_48, (safe_sub_func_int8_t_s_s(p_50, 1UL))))) > (-1L)) | p_48) <= l_441), 7)) ^ p_48)))) , (*g_276)) & (-1L)) > (*g_518)), l_753)) <= 0L)))) & l_675), l_741)) , l_441)) | p_50) ^ l_478) & p_50);
    return l_798;
}


/* ------------------------------------------ */
/* 
 * reads : g_51 g_52
 * writes: g_52
 */
inline static int32_t  func_53(uint8_t  p_54, int8_t  p_55, int32_t  p_56, int32_t * p_57, uint16_t  p_58)
{ /* block id: 164 */
    int16_t *l_429 = &g_127;
    int16_t **l_430 = &l_429;
    int16_t *l_431 = &g_127;
    int32_t l_432 = (-7L);
    l_432 = (((*l_430) = l_429) != l_431);
    (*g_51) = &l_432;
    (**g_51) = (-1L);
    return p_55;
}


/* ------------------------------------------ */
/* 
 * reads : g_52 g_22
 * writes:
 */
inline static uint16_t  func_60(uint32_t  p_61)
{ /* block id: 10 */
    int8_t l_66 = 0x6BL;
    int8_t *l_84 = &g_85;
    int32_t *l_86 = &g_87;
    int16_t l_88 = (-9L);
    int32_t **l_89 = &g_52;
    int32_t l_116 = 0xA20016C6L;
    int16_t l_183 = 0x6939L;
    uint8_t l_187 = 0xC2L;
    int16_t **l_267 = (void*)0;
    int32_t l_269 = 0xA7757BEDL;
    int32_t *l_270 = &l_269;
    uint16_t l_275 = 0x24ADL;
    int8_t l_334 = 0xB0L;
    int16_t ****l_354 = (void*)0;
    int8_t **l_365 = &l_84;
    uint8_t l_424 = 248UL;
    return (**l_89);
}




/* ---------------------------------------- */
int main (void)
{
    int print_hash_value = 0;
    platform_main_begin();
    crc32_gentab();
    func_1();
    transparent_crc(g_8, "g_8", print_hash_value);
    transparent_crc(g_22, "g_22", print_hash_value);
    transparent_crc(g_85, "g_85", print_hash_value);
    transparent_crc(g_87, "g_87", print_hash_value);
    transparent_crc(g_108, "g_108", print_hash_value);
    transparent_crc(g_115, "g_115", print_hash_value);
    transparent_crc(g_127, "g_127", print_hash_value);
    transparent_crc(g_167, "g_167", print_hash_value);
    transparent_crc(g_185, "g_185", print_hash_value);
    transparent_crc(g_268, "g_268", print_hash_value);
    transparent_crc(g_279, "g_279", print_hash_value);
    transparent_crc(g_340, "g_340", print_hash_value);
    transparent_crc(g_445, "g_445", print_hash_value);
    transparent_crc(g_514, "g_514", print_hash_value);
    transparent_crc(g_515, "g_515", print_hash_value);
    transparent_crc(g_755, "g_755", print_hash_value);
    transparent_crc(g_797, "g_797", print_hash_value);
    transparent_crc(g_817, "g_817", print_hash_value);
    transparent_crc(g_834, "g_834", print_hash_value);
    transparent_crc(g_850, "g_850", print_hash_value);
    platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
    return 0;
}

/************************ statistics *************************
XXX max struct depth: 0
breakdown:
   depth: 0, occurrence: 157
XXX total union variables: 0

XXX non-zero bitfields defined in structs: 0
XXX zero bitfields defined in structs: 0
XXX const bitfields defined in structs: 0
XXX volatile bitfields defined in structs: 0
XXX structs with bitfields in the program: 0
breakdown:
XXX full-bitfields structs in the program: 0
breakdown:
XXX times a bitfields struct's address is taken: 0
XXX times a bitfields struct on LHS: 0
XXX times a bitfields struct on RHS: 0
XXX times a single bitfield on LHS: 0
XXX times a single bitfield on RHS: 0

XXX max expression depth: 54
breakdown:
   depth: 1, occurrence: 108
   depth: 2, occurrence: 26
   depth: 3, occurrence: 7
   depth: 4, occurrence: 2
   depth: 6, occurrence: 2
   depth: 7, occurrence: 1
   depth: 8, occurrence: 1
   depth: 14, occurrence: 1
   depth: 17, occurrence: 2
   depth: 19, occurrence: 3
   depth: 20, occurrence: 1
   depth: 21, occurrence: 2
   depth: 22, occurrence: 2
   depth: 27, occurrence: 2
   depth: 28, occurrence: 1
   depth: 29, occurrence: 1
   depth: 32, occurrence: 2
   depth: 36, occurrence: 1
   depth: 39, occurrence: 1
   depth: 54, occurrence: 1

XXX total number of pointers: 170

XXX times a variable address is taken: 173
XXX times a pointer is dereferenced on RHS: 184
breakdown:
   depth: 1, occurrence: 129
   depth: 2, occurrence: 54
   depth: 3, occurrence: 1
XXX times a pointer is dereferenced on LHS: 188
breakdown:
   depth: 1, occurrence: 178
   depth: 2, occurrence: 10
XXX times a pointer is compared with null: 21
XXX times a pointer is compared with address of another variable: 4
XXX times a pointer is compared with another pointer: 3
XXX times a pointer is qualified to be dereferenced: 878

XXX max dereference level: 4
breakdown:
   level: 0, occurrence: 0
   level: 1, occurrence: 592
   level: 2, occurrence: 196
   level: 3, occurrence: 26
   level: 4, occurrence: 26
XXX number of pointers point to pointers: 77
XXX number of pointers point to scalars: 93
XXX number of pointers point to structs: 0
XXX percent of pointers has null in alias set: 27.1
XXX average alias set size: 1.18

XXX times a non-volatile is read: 1010
XXX times a non-volatile is write: 477
XXX times a volatile is read: 0
XXX    times read thru a pointer: 0
XXX times a volatile is write: 0
XXX    times written thru a pointer: 0
XXX times a volatile is available for access: 0
XXX percentage of non-volatile access: 100

XXX forward jumps: 0
XXX backward jumps: 1

XXX stmts: 107
XXX max block depth: 5
breakdown:
   depth: 0, occurrence: 33
   depth: 1, occurrence: 10
   depth: 2, occurrence: 9
   depth: 3, occurrence: 13
   depth: 4, occurrence: 22
   depth: 5, occurrence: 20

XXX percentage a fresh-made variable is used: 15.1
XXX percentage an existing variable is used: 84.9
********************* end of statistics **********************/



Assembly Code with Setting 1: 
	.text
	.file	"tmptir15kwh.c"
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5, 0x0                          # -- Begin function main
.LCPI0_0:
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	2                               # 0x2
	.long	3                               # 0x3
	.long	4                               # 0x4
	.long	5                               # 0x5
	.long	6                               # 0x6
	.long	7                               # 0x7
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0
.LCPI0_1:
	.long	3988292384                      # 0xedb88320
.LCPI0_2:
	.long	8                               # 0x8
	.text
	.globl	main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:
	pushq	%rax
	.cfi_def_cfa_offset 16
	vmovdqa	.LCPI0_0(%rip), %ymm0           # ymm0 = [0,1,2,3,4,5,6,7]
	xorl	%ecx, %ecx
	vpbroadcastd	.LCPI0_1(%rip), %ymm1   # ymm1 = [3988292384,3988292384,3988292384,3988292384,3988292384,3988292384,3988292384,3988292384]
	leaq	crc32_tab(%rip), %rax
	vpbroadcastd	.LCPI0_2(%rip), %ymm2   # ymm2 = [8,8,8,8,8,8,8,8]
	.p2align	4, 0x90
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
	vpsrld	$1, %ymm0, %ymm3
	vpxor	%ymm1, %ymm3, %ymm4
	vpslld	$31, %ymm0, %ymm5
	vblendvps	%ymm5, %ymm4, %ymm3, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vmovups	%ymm3, (%rcx,%rax)
	vpaddd	%ymm2, %ymm0, %ymm0
	addq	$32, %rcx
	cmpq	$1024, %rcx                     # imm = 0x400
	jne	.LBB0_1
# %bb.2:
	movl	g_22(%rip), %ecx
	movq	g_107(%rip), %rdx
	movl	$61, (%rdx)
	movl	crc32_context(%rip), %edx
	movzbl	%dl, %esi
                                        # kill: def $edx killed $edx killed $rdx
	shrl	$8, %edx
	xorq	$218, %rsi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$1, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$247, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$252, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$1, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$245, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$1, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	shrl	$8, %esi
	xorl	%ecx, %edx
	movzbl	%dl, %ecx
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	$230, %ecx
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	$20, %ecx
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	$201, %ecx
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	$216, %ecx
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %edx
	movl	%esi, %ecx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$173, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$145, %edx
	xorl	(%rax,%rdx,4), %ecx
	leaq	g_22(%rip), %rdx
	movzbl	%cl, %esi
	shrl	$8, %ecx
	xorl	$9, %esi
	xorl	(%rax,%rsi,4), %ecx
	movq	%rdx, g_107(%rip)
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$120, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movl	$65535, g_108(%rip)             # imm = 0xFFFF
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$1, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movl	$1, g_22(%rip)
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$34, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	movl	%ecx, %esi
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movl	%esi, crc32_context(%rip)
	notl	%esi
	leaq	.L.str.21(%rip), %rdi
	xorl	%eax, %eax
	vzeroupper
	callq	printf@PLT
	xorl	%eax, %eax
	popq	%rcx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end0:
	.size	main, .Lfunc_end0-main
	.cfi_endproc
                                        # -- End function
	.type	g_22,@object                    # @g_22
	.data
	.p2align	2, 0x0
g_22:
	.long	1160751124                      # 0x452fa814
	.size	g_22, 4

	.type	g_108,@object                   # @g_108
	.p2align	2, 0x0
g_108:
	.long	4294967295                      # 0xffffffff
	.size	g_108, 4

	.type	crc32_context,@object           # @crc32_context
	.p2align	2, 0x0
crc32_context:
	.long	4294967295                      # 0xffffffff
	.size	crc32_context, 4

	.type	crc32_tab,@object               # @crc32_tab
	.local	crc32_tab
	.comm	crc32_tab,1024,16
	.type	g_107,@object                   # @g_107
	.p2align	3, 0x0
g_107:
	.quad	g_108
	.size	g_107, 8

	.type	.L.str.21,@object               # @.str.21
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.21:
	.asciz	"checksum = %X\n"
	.size	.L.str.21, 15

	.ident	"clang version 16.0.6"
	.section	".note.GNU-stack","",@progbits
	.addrsig
	.addrsig_sym g_22
	.addrsig_sym g_108


Assembly Code with Setting 2: 
	.file	"tmpnvb_ae6v.c"
	.text
	.p2align 4
	.type	crc32_8bytes, @function
crc32_8bytes:
.LFB104:
	.cfi_startproc
	movl	crc32_context(%rip), %eax
	leaq	crc32_tab(%rip), %rdx
	movq	%rdi, %rcx
	movl	%eax, %esi
	shrl	$8, %eax
	xorl	%edi, %esi
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movzbl	%ch, %esi
	shrq	$56, %rcx
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movq	%rdi, %rsi
	shrq	$16, %rsi
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movl	%edi, %esi
	shrl	$24, %esi
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movq	%rdi, %rsi
	shrq	$32, %rsi
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movq	%rdi, %rsi
	shrq	$40, %rsi
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movq	%rdi, %rsi
	shrq	$48, %rsi
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	xorl	%eax, %ecx
	shrl	$8, %eax
	movzbl	%cl, %ecx
	xorl	(%rdx,%rcx,4), %eax
	movl	%eax, crc32_context(%rip)
	ret
	.cfi_endproc
.LFE104:
	.size	crc32_8bytes, .-crc32_8bytes
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC4:
	.string	"checksum = %X\n"
	.section	.text.startup,"ax",@progbits
	.p2align 4
	.globl	main
	.type	main, @function
main:
.LFB117:
	.cfi_startproc
	movl	$8, %ecx
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	leaq	crc32_tab(%rip), %rax
	vmovdqa	.LC0(%rip), %ymm5
	vmovd	%ecx, %xmm6
	leaq	1024(%rax), %rdx
	vpxor	%xmm4, %xmm4, %xmm4
	movl	$1, %ecx
	vmovd	%ecx, %xmm3
	movl	$-306674912, %ecx
	vpbroadcastd	%xmm6, %ymm6
	vmovd	%ecx, %xmm2
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	vpbroadcastd	%xmm3, %ymm3
	andq	$-32, %rsp
	vpbroadcastd	%xmm2, %ymm2
	.p2align 4,,10
	.p2align 3
.L4:
	vmovdqa	%ymm5, %ymm1
	addq	$32, %rax
	vpaddd	%ymm6, %ymm5, %ymm5
	vpand	%ymm3, %ymm1, %ymm0
	vpsrld	$1, %ymm1, %ymm1
	vpsubd	%ymm0, %ymm4, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm0, %ymm0
	vpand	%ymm3, %ymm0, %ymm1
	vpsrld	$1, %ymm0, %ymm0
	vpsubd	%ymm1, %ymm4, %ymm1
	vpand	%ymm2, %ymm1, %ymm1
	vpxor	%ymm0, %ymm1, %ymm1
	vpand	%ymm3, %ymm1, %ymm0
	vpsrld	$1, %ymm1, %ymm1
	vpsubd	%ymm0, %ymm4, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm0, %ymm0
	vpand	%ymm3, %ymm0, %ymm1
	vpsrld	$1, %ymm0, %ymm0
	vpsubd	%ymm1, %ymm4, %ymm1
	vpand	%ymm2, %ymm1, %ymm1
	vpxor	%ymm0, %ymm1, %ymm1
	vpand	%ymm3, %ymm1, %ymm0
	vpsrld	$1, %ymm1, %ymm1
	vpsubd	%ymm0, %ymm4, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm0, %ymm0
	vpand	%ymm3, %ymm0, %ymm1
	vpsrld	$1, %ymm0, %ymm0
	vpsubd	%ymm1, %ymm4, %ymm1
	vpand	%ymm2, %ymm1, %ymm1
	vpxor	%ymm0, %ymm1, %ymm1
	vpand	%ymm3, %ymm1, %ymm0
	vpsrld	$1, %ymm1, %ymm1
	vpsubd	%ymm0, %ymm4, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm0, %ymm0
	vpand	%ymm3, %ymm0, %ymm1
	vpsrld	$1, %ymm0, %ymm0
	vpsubd	%ymm1, %ymm4, %ymm1
	vpand	%ymm2, %ymm1, %ymm1
	vpxor	%ymm0, %ymm1, %ymm0
	vmovdqa	%ymm0, -32(%rax)
	cmpq	%rax, %rdx
	jne	.L4
	xorl	%eax, %eax
	movl	g_22(%rip), %r8d
	xorl	%esi, %esi
	xorl	%edi, %edi
	movw	%ax, g_340(%rip)
	movq	g_107(%rip), %rax
	xorl	%edx, %edx
	movl	$-11, %ecx
	movw	%di, g_834(%rip)
	movl	$1, %r9d
	movq	$-38, %rdi
	movl	$61, (%rax)
	movq	g_518(%rip), %rax
	movw	%dx, g_797(%rip)
	movw	%si, (%rax)
	leaq	g_22(%rip), %rax
	movw	%cx, g_127(%rip)
	movq	%rax, g_52(%rip)
	movq	%rax, g_107(%rip)
	movq	%rax, g_21(%rip)
	movb	%r8b, g_268(%rip)
	movw	%r9w, g_167(%rip)
	movl	$34, g_850(%rip)
	movl	$0, g_279(%rip)
	movb	$1, g_817(%rip)
	movb	$1, g_115(%rip)
	movl	$65535, g_108(%rip)
	movl	$1, g_22(%rip)
	call	crc32_8bytes
	movslq	g_22(%rip), %rdi
	call	crc32_8bytes
	movq	$-9, %rdi
	call	crc32_8bytes
	movq	$-4, %rdi
	call	crc32_8bytes
	movslq	g_108(%rip), %rdi
	call	crc32_8bytes
	movzbl	g_115(%rip), %edi
	call	crc32_8bytes
	movq	$-11, %rdi
	call	crc32_8bytes
	movl	$1, %edi
	call	crc32_8bytes
	movzwl	g_185(%rip), %edi
	call	crc32_8bytes
	movzbl	%r8b, %edi
	call	crc32_8bytes
	xorl	%edi, %edi
	call	crc32_8bytes
	call	crc32_8bytes
	call	crc32_8bytes
	movl	$3637056742, %edi
	call	crc32_8bytes
	addq	$657910553, %rdi
	call	crc32_8bytes
	movl	$2013893037, %edi
	call	crc32_8bytes
	xorl	%edi, %edi
	call	crc32_8bytes
	movl	$1, %edi
	call	crc32_8bytes
	xorl	%edi, %edi
	call	crc32_8bytes
	movl	$34, %edi
	call	crc32_8bytes
	movl	crc32_context(%rip), %esi
	leaq	.LC4(%rip), %rdi
	xorl	%eax, %eax
	notl	%esi
	call	printf@PLT
	xorl	%eax, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE117:
	.size	main, .-main
	.data
	.align 4
	.type	g_850, @object
	.size	g_850, 4
g_850:
	.long	46660997
	.align 2
	.type	g_834, @object
	.size	g_834, 2
g_834:
	.value	8
	.type	g_817, @object
	.size	g_817, 1
g_817:
	.byte	-107
	.align 2
	.type	g_797, @object
	.size	g_797, 2
g_797:
	.value	-1
	.section	.data.rel.local,"aw"
	.align 8
	.type	g_518, @object
	.size	g_518, 8
g_518:
	.quad	g_185
	.data
	.align 2
	.type	g_340, @object
	.size	g_340, 2
g_340:
	.value	-1
	.align 4
	.type	g_279, @object
	.size	g_279, 4
g_279:
	.long	2057425295
	.type	g_268, @object
	.size	g_268, 1
g_268:
	.byte	6
	.align 2
	.type	g_185, @object
	.size	g_185, 2
g_185:
	.value	8
	.align 2
	.type	g_167, @object
	.size	g_167, 2
g_167:
	.value	-32330
	.align 2
	.type	g_127, @object
	.size	g_127, 2
g_127:
	.value	1
	.type	g_115, @object
	.size	g_115, 1
g_115:
	.byte	-67
	.section	.data.rel.local
	.align 8
	.type	g_107, @object
	.size	g_107, 8
g_107:
	.quad	g_108
	.data
	.align 4
	.type	g_108, @object
	.size	g_108, 4
g_108:
	.long	-1
	.section	.data.rel.local
	.align 8
	.type	g_52, @object
	.size	g_52, 8
g_52:
	.quad	g_22
	.align 8
	.type	g_21, @object
	.size	g_21, 8
g_21:
	.quad	g_22
	.data
	.align 4
	.type	g_22, @object
	.size	g_22, 4
g_22:
	.long	1160751124
	.align 4
	.type	crc32_context, @object
	.size	crc32_context, 4
crc32_context:
	.long	-1
	.local	crc32_tab
	.comm	crc32_tab,1024,32
	.section	.rodata.cst32,"aM",@progbits,32
	.align 32
.LC0:
	.long	0
	.long	1
	.long	2
	.long	3
	.long	4
	.long	5
	.long	6
	.long	7
	.ident	"GCC: (GNU) 13.2.1 20230801"
	.section	.note.GNU-stack,"",@progbits


