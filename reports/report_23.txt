--- Interesting Case Report --- 

Interesting Variables: 
['g_655', 'g_86', 'g_228', 'g_870', 'g_33', 'g_396']

Interesting Assembly Lines: 
{'g_655': {'setting1:': [['movb', '$1,', 'g_655(%rip)']], 'setting2': [['movb', '$12,', 'g_655(%rip)']]}, 'g_86': {'setting1:': [], 'setting2': [['movl', '$0,', 'g_86(%rip)'], ['movl', '$1,', 'g_86(%rip)']]}, 'g_228': {'setting1:': [], 'setting2': [['movl', '$0,', 'g_228(%rip)'], ['movl', '$7,', 'g_228(%rip)']]}, 'g_870': {'setting1:': [], 'setting2': [['movb', '$-58,', 'g_870(%rip)']]}, 'g_33': {'setting1:': [['movl', '$21,', 'g_33(%rip)']], 'setting2': [['movl', '$-1,', 'g_33(%rip)'], ['movl', '$21,', 'g_33(%rip)']]}, 'g_396': {'setting1:': [], 'setting2': [['movl', '$0,', 'g_396(%rip)']]}}

Source Code: 
/*
 * This is a RANDOMLY GENERATED PROGRAM.
 *
 * Generator: csmith 2.3.0
 * Git version: 30dccd7
 * Options:   --no-unions --safe-math --no-argc --no-volatiles --no-volatile-pointers --no-arrays --no-bitfields --checksum --no-comma-operators --no-compound-assignment --no-consts --no-divs --embedded-assigns --jumps --longlong --force-non-uniform-arrays --no-math64 --no-muls --packed-struct --no-paranoid --pointers --no-structs --no-inline-function --return-structs --arg-structs --no-dangling-global-pointers
 * Seed:      1597804406349344868
 */

#include "csmith.h"


static long __undefined;

/* --- Struct/Union Declarations --- */
/* --- GLOBAL VARIABLES --- */
static int32_t g_5 = 4L;
static uint16_t g_30 = 65535UL;
static int32_t g_33 = 0x3EDB3952L;
static int8_t g_72 = 0x50L;
static int8_t g_74 = 0x31L;
static uint16_t g_76 = 0x32AFL;
static uint16_t *g_75 = &g_76;
static uint8_t g_77 = 0UL;
static int32_t *g_81 = &g_33;
static int32_t **g_80 = &g_81;
static int32_t g_86 = 0x00A5FF0FL;
static int32_t g_220 = 0x26DC8C82L;
static uint32_t g_228 = 0x0A14B9FDL;
static uint32_t *g_227 = &g_228;
static int32_t ***g_236 = &g_80;
static int32_t ****g_235 = &g_236;
static int8_t **g_240 = (void*)0;
static uint16_t g_254 = 3UL;
static int16_t g_267 = 0x3353L;
static int16_t g_319 = (-8L);
static int8_t ***g_349 = &g_240;
static int8_t ****g_348 = &g_349;
static int16_t g_381 = 0x76DDL;
static uint16_t ***g_384 = (void*)0;
static uint32_t g_396 = 0x6F5524ACL;
static int32_t *g_399 = &g_86;
static uint32_t **g_418 = &g_227;
static uint32_t ***g_417 = &g_418;
static uint32_t ****g_416 = &g_417;
static uint16_t *****g_442 = (void*)0;
static uint8_t g_509 = 1UL;
static int32_t *g_599 = (void*)0;
static int8_t g_655 = 0L;
static int32_t g_697 = (-8L);
static uint16_t ****g_795 = &g_384;
static uint8_t g_870 = 0xC8L;
static uint32_t g_888 = 0x04A87A93L;
static int16_t g_956 = (-1L);
static uint32_t g_1040 = 0x03A01203L;
static int16_t g_1051 = 0L;
static int32_t g_1168 = 0x3842F7A4L;
static int32_t *g_1169 = &g_86;


/* --- FORWARD DECLARATIONS --- */
static uint8_t  func_1(void);
static int32_t  func_2(uint32_t  p_3, uint32_t  p_4);
static int8_t  func_6(uint32_t  p_7, uint8_t  p_8, uint16_t  p_9, uint32_t  p_10);
static uint32_t  func_16(int16_t  p_17, uint16_t  p_18, int32_t  p_19, uint16_t  p_20, int8_t  p_21);
static int32_t  func_23(uint16_t  p_24, uint32_t  p_25, int32_t  p_26, int16_t  p_27, int8_t  p_28);
static uint16_t * func_34(int32_t * p_35);
static int32_t  func_40(int32_t ** p_41, int32_t * p_42, uint32_t  p_43, uint32_t  p_44, int16_t  p_45);
static int32_t ** func_46(int32_t * p_47, int32_t * p_48);
static int32_t * func_49(int32_t ** p_50, uint16_t * p_51, uint32_t  p_52, int16_t  p_53);
static int32_t ** func_54(uint32_t  p_55, uint16_t * p_56, uint16_t * p_57, uint32_t  p_58, int16_t  p_59);


/* --- FUNCTIONS --- */
/* ------------------------------------------ */
/* 
 * reads : g_5 g_655 g_235 g_236 g_80 g_81 g_75 g_76 g_348 g_254 g_399 g_72 g_418 g_227 g_86 g_509 g_416 g_417 g_228 g_795 g_384 g_74 g_1040 g_1051 g_77 g_888 g_267 g_870 g_30 g_319 g_33 g_1169
 * writes: g_30 g_33 g_697 g_228 g_81 g_76 g_72 g_349 g_254 g_86 g_795 g_396 g_870 g_655 g_381 g_80 g_319 g_348 g_74 g_267 g_77 g_235
 */
static uint8_t  func_1(void)
{ /* block id: 0 */
    int32_t l_22 = 0x80DB959CL;
    uint16_t *l_29 = &g_30;
    int32_t *l_735 = (void*)0;
    int32_t *l_736 = &g_697;
    int32_t l_799 = (-1L);
    uint16_t ****l_1122 = &g_384;
    uint16_t l_1140 = 65532UL;
    int32_t *l_1156 = &l_22;
    int16_t l_1157 = 0x40CAL;
    int16_t *l_1164 = &g_319;
    uint32_t *l_1167 = &g_888;
    uint32_t l_1170 = 0x144D705EL;
    if ((func_2(g_5, (g_5 | (func_6(g_5, ((((~(((-6L) >= (safe_lshift_func_uint16_t_u_s((safe_sub_func_uint32_t_u_u(g_5, (l_22 = func_16(l_22, g_5, ((*l_736) = func_23(((*l_29) = g_5), (255UL || g_5), g_5, g_5, g_5)), l_22, l_22)))), l_799))) < l_799)) ^ l_799) | 0L) & l_799), l_799, l_799) | g_5))) != l_799))
    { /* block id: 654 */
        int32_t *l_1096 = &l_22;
        int32_t **l_1097 = &l_1096;
        (*l_1097) = ((*g_80) = l_1096);
        for (g_267 = 17; (g_267 < (-28)); g_267 = safe_sub_func_uint32_t_u_u(g_267, 1))
        { /* block id: 659 */
            int32_t *l_1100 = &l_22;
            int8_t *l_1103 = (void*)0;
            (*l_1097) = l_1100;
            for (g_870 = 11; (g_870 == 3); g_870 = safe_sub_func_int16_t_s_s(g_870, 3))
            { /* block id: 663 */
                uint8_t l_1110 = 0xBDL;
                uint32_t *l_1111 = &g_396;
                int16_t *l_1112 = &g_381;
                uint8_t *l_1113 = &l_1110;
                uint8_t *l_1114 = &g_77;
                (*g_399) = (g_30 ^ ((*l_1114) = ((*l_1113) = (((void*)0 != l_1103) || (((-1L) > ((*l_1096) ^ (**g_418))) && (safe_add_func_int32_t_s_s(((****g_235) = (safe_mod_func_int8_t_s_s((((*l_1112) = ((safe_add_func_uint32_t_u_u(((*l_1111) = ((*g_227) = (0x29L & ((((*g_75) <= ((((g_870 || 0x4586L) || (***g_236)) <= l_1110) & l_22)) || (***g_417)) | 0L)))), (*g_399))) | (*l_1096))) && 0x3AC6L), g_319))), l_1110)))))));
            }
        }
    }
    else
    { /* block id: 673 */
        uint16_t ****l_1121 = &g_384;
        uint8_t *l_1125 = &g_77;
        int8_t l_1134 = (-1L);
        int32_t ****l_1139 = &g_236;
        uint32_t l_1141 = 1UL;
        if ((safe_sub_func_uint8_t_u_u(((*l_1125) = ((safe_rshift_func_uint8_t_u_s((safe_rshift_func_int8_t_s_s((l_1121 == l_1122), 2)), 7)) & (safe_lshift_func_int16_t_s_s((g_267 = l_799), 12)))), g_1051)))
        { /* block id: 676 */
            return g_1040;
        }
        else
        { /* block id: 678 */
            int32_t ****l_1137 = &g_236;
            int32_t *****l_1138 = &g_235;
            int16_t l_1142 = 7L;
            (*g_399) = ((((safe_sub_func_uint16_t_u_u((safe_add_func_int8_t_s_s((safe_lshift_func_uint16_t_u_u((+l_22), ((*g_75) = (safe_unary_minus_func_int32_t_s(((((l_799 | ((l_1134 == ((((((safe_rshift_func_uint16_t_u_s((((l_1134 ^ (*g_399)) || ((*g_227) = (((*g_227) <= (((*l_1138) = l_1137) == l_1139)) | 0UL))) & 0xC431D973L), 1)) | l_799) | l_22) > g_267) && l_799) > 6L)) == l_1140)) < g_319) != l_1141) ^ g_319)))))), 0x2CL)), l_1142)) >= l_22) && g_1040) | l_1140);
        }
    }
    for (g_33 = 0; (g_33 < 18); g_33 = safe_add_func_uint16_t_u_u(g_33, 7))
    { /* block id: 687 */
        int32_t *l_1145 = (void*)0;
        (***g_235) = l_1145;
    }
    l_1157 = (safe_add_func_int8_t_s_s(l_799, (0xC8EBL || (((l_799 >= g_33) & (safe_add_func_uint16_t_u_u((safe_sub_func_int32_t_s_s(((*g_399) = (safe_lshift_func_uint16_t_u_u((3UL == l_799), 2))), ((*l_1156) = (6UL || ((((0x44E79E77L < (-2L)) & 4L) == l_1140) >= l_799))))), 0x5ACEL))) & l_799))));
    l_1156 = g_1169;
    return l_1170;
}


/* ------------------------------------------ */
/* 
 * reads : g_399 g_795 g_384 g_74 g_655 g_5 g_235 g_236 g_80 g_86 g_81 g_348 g_75 g_76 g_1040 g_228 g_1051 g_77 g_888 g_509 g_417 g_418 g_227 g_416
 * writes: g_86 g_870 g_655 g_81 g_381 g_80 g_319 g_348 g_30 g_254 g_228 g_74 g_396 g_72 g_76
 */
static int32_t  func_2(uint32_t  p_3, uint32_t  p_4)
{ /* block id: 576 */
    uint16_t l_990 = 0x8A57L;
    uint8_t *l_993 = &g_870;
    uint16_t ***l_994 = (void*)0;
    int32_t l_1007 = 0xF7A0D9DBL;
    int8_t *****l_1010 = &g_348;
    int32_t *l_1016 = &g_86;
    uint16_t **l_1085 = (void*)0;
    uint16_t **l_1086 = &g_75;
    uint16_t ***l_1087 = &l_1086;
    int16_t *l_1095 = &g_1051;
    if ((safe_sub_func_int32_t_s_s((p_3 & ((safe_lshift_func_uint8_t_u_s(((safe_mod_func_int8_t_s_s((safe_rshift_func_int16_t_s_s(((((*g_399) = l_990) && (safe_add_func_uint8_t_u_u(((*l_993) = 0x5BL), (l_990 == ((*g_795) == (l_994 = l_994)))))) >= 255UL), (safe_sub_func_uint32_t_u_u(l_990, (safe_rshift_func_int16_t_s_s((((safe_lshift_func_uint8_t_u_s((0L & 0x6B13L), l_990)) != p_4) == 1L), 15)))))), l_990)) == g_74), 4)) ^ 0x8DB0A887L)), 0x75A189CBL)))
    { /* block id: 580 */
        uint16_t ****l_1003 = &g_384;
        int32_t l_1004 = 9L;
        int8_t *****l_1009 = &g_348;
        int32_t *l_1021 = &l_1004;
        int32_t ****l_1045 = &g_236;
        int8_t *l_1069 = &g_72;
        uint32_t *l_1077 = (void*)0;
        uint32_t *l_1078 = (void*)0;
        uint32_t *l_1079 = &g_396;
        uint32_t *l_1081 = &g_888;
        uint32_t **l_1080 = &l_1081;
        uint32_t ***l_1082 = &l_1080;
        uint32_t **l_1084 = &l_1081;
        uint32_t ***l_1083 = &l_1084;
        for (g_655 = (-28); (g_655 > 14); g_655 = safe_add_func_int32_t_s_s(g_655, 6))
        { /* block id: 583 */
            l_1003 = &l_994;
            return l_1004;
        }
        if ((safe_sub_func_uint8_t_u_u((l_1007 = ((*l_993) = g_5)), ((safe_unary_minus_func_int8_t_s((l_1009 == (l_1010 = l_1009)))) == l_1004))))
        { /* block id: 590 */
            int32_t **l_1014 = (void*)0;
            int32_t ***l_1013 = &l_1014;
            uint16_t *l_1015 = &g_30;
            int8_t ****l_1032 = &g_349;
            uint16_t *l_1039 = &g_254;
            l_1004 = (safe_rshift_func_int16_t_s_u(0x4632L, 14));
            (***g_235) = l_1016;
            for (g_655 = 0; (g_655 < 12); ++g_655)
            { /* block id: 597 */
                int16_t *l_1026 = &g_319;
                int16_t *l_1027 = (void*)0;
                int16_t *l_1028 = &g_381;
                int32_t l_1029 = 0xEC839E50L;
                for (g_381 = 10; (g_381 <= 4); --g_381)
                { /* block id: 600 */
                    (*g_399) = (p_4 ^ (((*g_80) = (void*)0) == (void*)0));
                }
                l_1021 = (void*)0;
                if ((*g_399))
                    continue;
                (*g_399) = (safe_rshift_func_int16_t_s_u((((((&g_348 == (l_1009 = &g_348)) < 1UL) <= ((p_3 == (safe_sub_func_int8_t_s_s((((**g_235) = (*g_236)) == (*l_1013)), p_3))) || ((*l_1028) = ((*l_1026) = ((*l_1016) <= (&l_1007 != (*g_80))))))) ^ p_4) | l_1029), 6));
            }
            (*g_399) = ((safe_lshift_func_uint16_t_u_s(((((l_1032 == ((*l_1010) = (*l_1009))) == 0x0FL) != (1UL | (l_1021 == &g_5))) | ((safe_lshift_func_int8_t_s_u((0x1CL & ((*l_993) = ((safe_sub_func_int8_t_s_s((((safe_sub_func_uint16_t_u_u((*g_75), ((*l_1039) = ((*l_1015) = p_4)))) != p_3) <= g_1040), p_4)) < 1UL))), 1)) || 0xCE02L)), 4)) || p_3);
        }
        else
        { /* block id: 617 */
            int32_t *l_1041 = &l_1004;
            int32_t ****l_1044 = &g_236;
            (***g_235) = l_1041;
            if ((*g_399))
            { /* block id: 619 */
                (*g_80) = (*g_80);
            }
            else
            { /* block id: 621 */
                int8_t *l_1059 = (void*)0;
                int8_t *l_1060 = &g_74;
                int32_t l_1062 = (-2L);
                uint32_t *l_1064 = (void*)0;
                int32_t l_1065 = (-1L);
                uint32_t *l_1066 = &g_396;
                int8_t *l_1067 = &g_72;
                int32_t l_1068 = 8L;
                (****g_235) = 4L;
                for (g_228 = (-22); (g_228 >= 7); ++g_228)
                { /* block id: 625 */
                    (*g_399) = (l_1044 == l_1045);
                }
                l_1068 = (l_1062 = (safe_mod_func_uint32_t_u_u(((safe_add_func_int32_t_s_s((~g_1051), (safe_mod_func_uint8_t_u_u((((*l_1021) = p_3) >= ((safe_rshift_func_int16_t_s_u((((*l_1067) = (((safe_rshift_func_int8_t_s_s(((*l_1060) = (+g_77)), 0)) & (safe_unary_minus_func_int32_t_s((*g_399)))) & (p_4 > (((l_1062 & ((*l_1066) = ((+(l_1065 = ((***g_417) = (0xDEBD135EL < ((((g_888 <= (((0x6E72ECC5L < p_3) | g_1040) || p_3)) < p_4) | 0x640E9DC4L) > g_509))))) | p_3))) ^ p_4) == 0xF2L)))) == 255UL), p_3)) ^ 0UL)), p_4)))) && (*l_1016)), (*l_1016))));
            }
        }
        (*g_399) = (((*l_1069) = (0x53F01FEEL ^ (*g_227))) == (!(7L | (((((*l_993) = 0xC6L) > (safe_rshift_func_int16_t_s_s((p_4 & (255UL < p_4)), (safe_lshift_func_uint16_t_u_u((*l_1016), 6))))) && ((safe_sub_func_uint16_t_u_u((((*g_75) = (((*l_1079) = ((&l_1003 != (void*)0) > (*l_1016))) | (****g_416))) & (*l_1016)), (-1L))) > (*l_1016))) <= (-3L)))));
        (*l_1083) = ((*l_1082) = l_1080);
    }
    else
    { /* block id: 645 */
        (*g_80) = &l_1007;
    }
    (***g_235) = &l_1007;
    (*g_81) = (*l_1016);
    return (*l_1016);
}


/* ------------------------------------------ */
/* 
 * reads : g_235 g_236 g_80
 * writes: g_228 g_81
 */
static int8_t  func_6(uint32_t  p_7, uint8_t  p_8, uint16_t  p_9, uint32_t  p_10)
{ /* block id: 481 */
    int32_t **l_802 = (void*)0;
    uint16_t ****l_812 = &g_384;
    int32_t l_822 = 0xB6FA4699L;
    uint32_t l_828 = 0xB0A2A4DAL;
    int32_t l_897 = 0xEB302D3EL;
    int16_t *l_908 = &g_267;
    uint8_t l_939 = 1UL;
    for (g_228 = (-16); (g_228 != 7); g_228++)
    { /* block id: 484 */
        uint16_t *l_803 = &g_254;
        int32_t l_821 = 8L;
        (***g_235) = &l_821;
        (***g_235) = (void*)0;
    }
    return p_7;
}


/* ------------------------------------------ */
/* 
 * reads : g_235 g_236 g_80 g_81 g_75 g_76 g_5 g_348 g_254 g_399 g_72 g_418 g_227 g_86 g_509 g_416 g_417 g_228
 * writes: g_33 g_228 g_81 g_76 g_72 g_349 g_254 g_86 g_795 g_396
 */
static uint32_t  func_16(int16_t  p_17, uint16_t  p_18, int32_t  p_19, uint16_t  p_20, int8_t  p_21)
{ /* block id: 433 */
    uint8_t l_741 = 0x6AL;
    int32_t l_743 = 0x046B830DL;
    int8_t *l_753 = &g_72;
    int8_t ***l_754 = &g_240;
    uint32_t l_762 = 18446744073709551611UL;
    uint16_t *l_772 = &g_30;
    uint32_t *l_778 = &g_396;
    uint16_t ****l_793 = &g_384;
    int32_t l_796 = (-1L);
    int32_t l_797 = (-1L);
    int32_t l_798 = 8L;
    (****g_235) = (-1L);
    for (p_17 = 11; (p_17 >= (-7)); --p_17)
    { /* block id: 437 */
        int32_t *l_742 = (void*)0;
        for (g_228 = 0; (g_228 > 60); g_228++)
        { /* block id: 440 */
            if (l_741)
                break;
        }
        (**g_236) = l_742;
    }
    l_743 = (&l_741 != (void*)0);
    if ((0x6BL <= (((((*g_75) & (safe_add_func_int8_t_s_s(l_741, g_76))) && (~(safe_lshift_func_uint16_t_u_s(((*g_75) = l_741), 4)))) == ((safe_lshift_func_uint8_t_u_s(g_5, 2)) & g_5)) != (((*l_753) = (0x194E8390L | (safe_rshift_func_int16_t_s_s(((l_743 = (l_741 <= p_18)) || p_19), l_741)))) > l_741))))
    { /* block id: 449 */
        uint8_t l_761 = 7UL;
        int32_t *l_763 = &g_220;
        (*g_348) = l_754;
        for (g_254 = 0; (g_254 > 32); g_254 = safe_add_func_int32_t_s_s(g_254, 8))
        { /* block id: 453 */
            int32_t **l_760 = &g_81;
            for (p_17 = 22; (p_17 == (-22)); p_17--)
            { /* block id: 456 */
                uint32_t l_759 = 0UL;
                (*g_399) = l_759;
            }
            (***g_235) = (*l_760);
        }
        (*g_80) = l_763;
    }
    else
    { /* block id: 462 */
        int32_t **l_769 = &g_599;
        uint32_t l_773 = 0xE7F1569EL;
        uint16_t ****l_794 = &g_384;
        for (g_72 = 0; (g_72 <= (-8)); --g_72)
        { /* block id: 465 */
            uint16_t *l_770 = &g_254;
            uint16_t **l_771 = &g_75;
            l_743 = 0xBBE8E49CL;
            (**g_236) = &l_743;
        }
        (*g_399) = (safe_lshift_func_int8_t_s_u(((((9L != 0x6B11CB59L) < ((((((((safe_sub_func_uint32_t_u_u((((**g_418) = ((void*)0 != l_778)) == (l_797 = ((*l_778) = ((*g_399) < ((safe_add_func_uint32_t_u_u((p_20 >= (((safe_lshift_func_uint16_t_u_s(((((p_17 = ((!((safe_mod_func_uint32_t_u_u((safe_sub_func_uint16_t_u_u((safe_add_func_int8_t_s_s(((!((*l_753) = (((((safe_add_func_uint32_t_u_u(p_20, (l_793 == (g_795 = l_794)))) != l_796) > 1L) & 0x5236L) == p_20))) || 0x50870CD6L), p_19)), 0x9FC1L)), 1L)) <= (*g_399))) ^ 255UL)) | 65528UL) > p_18) <= l_797), 12)) && l_762) & l_762)), p_20)) | p_18))))), 0x6BF88C29L)) < p_18) <= g_509) == p_20) & l_743) == p_21) >= p_18) != l_741)) | l_798) == 5UL), 2));
    }
    return (****g_416);
}


/* ------------------------------------------ */
/* 
 * reads : g_655
 * writes: g_33
 */
static int32_t  func_23(uint16_t  p_24, uint32_t  p_25, int32_t  p_26, int16_t  p_27, int8_t  p_28)
{ /* block id: 2 */
    int32_t *l_31 = (void*)0;
    int32_t *l_32 = &g_33;
    uint16_t **l_405 = &g_75;
    uint16_t ***l_404 = &l_405;
    int32_t l_457 = 0x28413803L;
    uint16_t l_458 = 0x0695L;
    uint32_t l_562 = 18446744073709551607UL;
    int32_t ****l_666 = &g_236;
    uint8_t *l_683 = (void*)0;
    uint32_t ****l_716 = &g_417;
    (*l_32) = (-1L);
    return g_655;
}


/* ------------------------------------------ */
/* 
 * reads : g_33 g_5 g_30 g_75 g_77 g_80 g_81 g_74 g_86 g_72 g_235 g_236 g_227 g_228 g_76 g_240 g_267 g_220 g_348 g_384 g_254 g_349 g_396 g_381
 * writes: g_33 g_72 g_30 g_74 g_81 g_86 g_76 g_254 g_267 g_80 g_220 g_319 g_228 g_235 g_77 g_381 g_399
 */
static uint16_t * func_34(int32_t * p_35)
{ /* block id: 5 */
    int32_t **l_37 = (void*)0;
    int32_t *l_39 = &g_33;
    int32_t **l_38 = &l_39;
    uint16_t *l_253 = &g_254;
    int32_t l_255 = 2L;
    int32_t **l_335 = &l_39;
    int32_t l_339 = 0L;
    int32_t l_340 = 2L;
    uint8_t *l_343 = &g_77;
    int32_t l_344 = 1L;
    uint16_t l_345 = 0UL;
    int8_t ****l_350 = (void*)0;
    (*l_38) = (void*)0;
    (*p_35) = func_40(func_46(&g_33, (*l_38)), p_35, (*g_227), ((((((*g_227) < (((~((*l_253) = g_228)) < 0xFEL) && l_255)) <= 0xE4L) ^ (*g_227)) >= 0x764C4040L) || 65535UL), g_5);
    if ((((safe_sub_func_uint16_t_u_u((l_335 != ((**g_235) = func_54(((safe_rshift_func_int16_t_s_u((((!0xC0DB7EC5L) & ((l_339 ^ (0x6679L > ((((((*l_343) = ((l_340 > 1UL) & (((*p_35) && (((((safe_add_func_int16_t_s_s(g_5, (g_267 || g_30))) >= (*g_75)) > l_339) ^ 0x3DL) & (*g_227))) | 0xA9AB7FDAL))) < g_86) < (-1L)) == g_30) & (*p_35)))) & 1UL)) <= l_344), (*g_75))) | g_220), l_253, &g_254, g_220, g_5))), 0xFA21L)) == g_220) > 0UL))
    { /* block id: 190 */
        (*p_35) = l_345;
        return &g_30;
    }
    else
    { /* block id: 193 */
        uint32_t l_354 = 0x87B85D46L;
        uint16_t **l_360 = &g_75;
        int32_t ****l_365 = &g_236;
        uint32_t l_367 = 0xF29B83A2L;
        int32_t l_385 = 1L;
        int32_t l_388 = 5L;
        int32_t *l_400 = &l_388;
        for (l_345 = 0; (l_345 != 26); l_345++)
        { /* block id: 196 */
            uint16_t l_366 = 0x1BEDL;
            int16_t *l_397 = (void*)0;
            int16_t *l_398 = &g_267;
            l_350 = g_348;
            (*p_35) = (*p_35);
            for (g_267 = 10; (g_267 == (-8)); g_267--)
            { /* block id: 201 */
                uint32_t l_353 = 0UL;
                int8_t ***l_361 = (void*)0;
                int32_t *****l_364 = (void*)0;
                int8_t ***l_368 = &g_240;
                int16_t *l_379 = &g_319;
                int16_t *l_380 = &g_381;
                (*p_35) = (((((0UL && (l_354 = l_353)) && ((~(safe_rshift_func_int8_t_s_s((safe_sub_func_int8_t_s_s((l_360 != (void*)0), (((void*)0 != l_361) != (((safe_mod_func_uint32_t_u_u(l_354, l_353)) == ((g_235 = &g_236) != l_365)) == 0xC1L)))), 7))) | 0xC9L)) != (-1L)) <= l_366) | 0x3A427FD2L);
                l_367 = 0x162BEFE8L;
                (*p_35) = (((((l_368 == (void*)0) >= ((*l_379) = (safe_add_func_int8_t_s_s((((**l_365) = func_54((safe_rshift_func_int8_t_s_u((safe_add_func_int16_t_s_s((-10L), (*g_75))), ((safe_rshift_func_int16_t_s_u((safe_rshift_func_int16_t_s_s(((*l_379) = g_30), ((*l_380) = 1L))), (252UL >= g_77))) == (safe_lshift_func_int16_t_s_s(((g_384 == g_384) >= l_353), g_254))))), l_380, (*l_360), g_5, l_385)) != &p_35), 255UL)))) > 5UL) | l_366) & 0L);
            }
            (*p_35) = (((safe_mod_func_int8_t_s_s(((l_388 & ((*g_227) = ((((safe_unary_minus_func_uint16_t_u(l_366)) >= l_366) <= (*g_227)) | (((void*)0 != (**g_348)) != ((*l_398) = (((*p_35) || ((safe_rshift_func_int16_t_s_u((safe_sub_func_int8_t_s_s((((safe_rshift_func_uint16_t_u_s(((**l_360) = 6UL), 2)) & (255UL || 0xC0L)) ^ g_86), 1UL)), g_396)) && (*p_35))) <= (*g_227))))))) == l_366), l_366)) ^ (*p_35)) && 0xD1L);
        }
        l_400 = ((*l_335) = (g_399 = func_49(((*g_236) = &p_35), &l_345, g_267, g_381)));
        return (*l_360);
    }
}


/* ------------------------------------------ */
/* 
 * reads : g_75 g_76 g_81 g_33 g_240 g_74 g_235 g_236 g_80 g_72 g_267 g_227 g_228 g_30 g_86
 * writes: g_76 g_267 g_81 g_72 g_33 g_74 g_86 g_80 g_220 g_319 g_228 g_235
 */
static int32_t  func_40(int32_t ** p_41, int32_t * p_42, uint32_t  p_43, uint32_t  p_44, int16_t  p_45)
{ /* block id: 135 */
    uint32_t l_257 = 0UL;
    int32_t l_258 = 0x3BD0F48BL;
    int8_t *l_269 = &g_74;
    int8_t **l_268 = &l_269;
    int32_t **l_280 = &g_81;
    uint16_t *l_281 = &g_254;
    uint16_t l_298 = 0UL;
    int32_t l_322 = 0x84FAC850L;
    int32_t *l_327 = (void*)0;
    int32_t *l_330 = (void*)0;
    int32_t *l_331 = &g_86;
    if ((((void*)0 == &g_254) && (safe_unary_minus_func_uint16_t_u((*g_75)))))
    { /* block id: 136 */
        uint16_t **l_265 = &g_75;
        int32_t *l_271 = &l_258;
lbl_284:
        if (l_257)
        { /* block id: 137 */
            int16_t *l_266 = &g_267;
            int32_t l_270 = 1L;
            l_258 = 0xA3D0280CL;
            if ((0x7859L & ((safe_sub_func_uint8_t_u_u(((p_43 <= ((*g_81) == (safe_lshift_func_uint8_t_u_s(((((*l_266) = (safe_mod_func_uint8_t_u_u(((l_265 == (void*)0) == ((*g_75) = 0xD3E2L)), p_44))) <= (l_268 == g_240)) != g_74), 7)))) | l_270), 0UL)) > 0x79FEL)))
            { /* block id: 141 */
                return l_270;
            }
            else
            { /* block id: 143 */
                (*p_41) = (*p_41);
                if (g_74)
                    goto lbl_332;
                (***g_235) = l_271;
                for (g_72 = 28; (g_72 <= (-25)); g_72 = safe_sub_func_uint16_t_u_u(g_72, 8))
                { /* block id: 148 */
                    uint32_t l_278 = 0x071F1495L;
                    (*g_81) = (safe_add_func_int8_t_s_s((~(l_258 && l_257)), (safe_unary_minus_func_int16_t_s(l_278))));
                }
            }
        }
        else
        { /* block id: 152 */
            int32_t *l_279 = &g_220;
            (***g_235) = (l_279 = (*g_80));
            (*p_41) = func_49(l_280, l_281, p_45, p_45);
        }
        for (l_258 = (-28); (l_258 == 28); ++l_258)
        { /* block id: 159 */
            uint16_t l_291 = 1UL;
            int16_t *l_299 = (void*)0;
            int16_t *l_300 = &g_267;
            if (g_76)
                goto lbl_284;
            (**g_236) = (***g_235);
            (**g_236) = (*p_41);
        }
        if (g_74)
            goto lbl_332;
    }
    else
    { /* block id: 167 */
        int8_t l_308 = 0xAAL;
        int32_t l_316 = 0x31F2D737L;
        int32_t *l_317 = &g_220;
        int16_t *l_318 = &g_319;
        int32_t *l_320 = (void*)0;
        int32_t *l_321 = &l_258;
        int32_t l_323 = 0x6C2EC38DL;
        int32_t ****l_324 = &g_236;
        int32_t *****l_325 = (void*)0;
        int32_t *****l_326 = &g_235;
        (*g_236) = l_280;
        (*g_81) = (((safe_mod_func_int8_t_s_s((((g_267 = g_267) | (~(((safe_sub_func_int8_t_s_s((safe_mod_func_int16_t_s_s(((((l_308 && ((safe_unary_minus_func_int8_t_s(g_33)) == 2L)) == 0x32L) & 4294967295UL) > (p_45 <= (safe_add_func_uint16_t_u_u((safe_lshift_func_uint16_t_u_s((((((*l_321) = (((*l_318) = ((**l_280) <= ((*l_317) = (l_316 = (((*g_227) > p_45) < l_308))))) && (**l_280))) ^ (**p_41)) > g_30) | p_45), p_44)), l_322)))), p_43)), (**l_280))) >= p_45) < (*g_227)))) > (-2L)), (-7L))) | l_323) != (*g_75));
        l_327 = ((***l_324) = func_49((*g_236), &g_76, (((*g_227) = 0UL) != (l_324 == ((*l_326) = l_324))), g_267));
    }
lbl_332:
    (***g_235) = (*p_41);
    (***g_235) = (*l_280);
    return (*l_331);
}


/* ------------------------------------------ */
/* 
 * reads : g_33 g_5 g_30 g_75 g_77 g_80 g_81 g_74 g_86 g_72 g_235 g_236
 * writes: g_33 g_72 g_30 g_74 g_81 g_86 g_76
 */
static int32_t ** func_46(int32_t * p_47, int32_t * p_48)
{ /* block id: 7 */
    uint32_t l_64 = 4294967295UL;
    uint16_t *l_67 = &g_30;
    int16_t l_70 = (-1L);
    int8_t *l_71 = &g_72;
    int8_t *l_73 = &g_74;
    int32_t l_123 = 5L;
    int32_t l_125 = 0x484BB253L;
    int32_t *l_242 = &g_33;
    int32_t ****l_249 = &g_236;
lbl_245:
    (*g_80) = func_49(func_54((((*l_73) = (((&g_33 != p_48) || ((safe_rshift_func_uint16_t_u_s((((*p_47) = (safe_rshift_func_int8_t_s_s((g_33 > g_33), 1))) ^ l_64), (safe_mod_func_int8_t_s_s((((*l_67) = (((&g_30 == l_67) < (((*l_71) = (((-10L) && ((((((safe_mod_func_int16_t_s_s(l_70, 6L)) < l_70) == g_5) & (-1L)) == l_64) && l_70)) == g_30)) == 1L)) != 0x516035E9L)) ^ l_70), g_5)))) <= l_70)) < l_70)) ^ 0x81L), g_75, l_67, g_77, g_77), &g_76, l_64, l_70);
    if ((safe_rshift_func_int16_t_s_u(l_64, l_70)))
    { /* block id: 29 */
        int8_t *l_93 = &g_74;
        uint32_t *l_105 = &l_64;
        int8_t l_110 = 4L;
        int32_t ***l_170 = (void*)0;
        int32_t l_171 = 0L;
        uint16_t **l_244 = &l_67;
        uint16_t ***l_243 = &l_244;
        (*g_81) = ((safe_sub_func_int32_t_s_s((*g_81), (2UL <= ((safe_rshift_func_int8_t_s_s((((((0L | (((l_93 != &g_72) >= (((safe_rshift_func_uint8_t_u_s((safe_lshift_func_uint8_t_u_u(g_77, 7)), (safe_rshift_func_int8_t_s_s(((*l_71) = 1L), 4)))) && (safe_sub_func_uint16_t_u_u((safe_add_func_uint16_t_u_u(((*g_75) = (safe_unary_minus_func_int32_t_s((((*l_105) = 4294967295UL) <= (safe_unary_minus_func_int8_t_s((-3L))))))), l_70)), l_70))) && 0x846FL)) | l_70)) < (-3L)) ^ 4294967295UL) | l_70) >= g_30), 7)) | 251UL)))) ^ g_86);
        for (g_72 = 0; (g_72 < 15); ++g_72)
        { /* block id: 36 */
            uint8_t l_121 = 0xF9L;
            int16_t *l_124 = &l_70;
            int8_t *l_137 = &l_110;
            uint16_t l_140 = 0xE520L;
            int32_t ***l_168 = &g_80;
            uint32_t *l_184 = &l_64;
            (*g_81) = (-8L);
            (*p_47) = (-4L);
            (**g_80) = (*p_47);
        }
        (*l_243) = &g_75;
        (*g_80) = func_49(&p_47, l_67, (0xFAL & l_110), (*l_242));
    }
    else
    { /* block id: 127 */
        uint8_t l_246 = 0xD2L;
        int32_t ****l_251 = (void*)0;
        int32_t *****l_250 = &l_251;
        (*p_47) = (*p_47);
        if (g_77)
            goto lbl_245;
        (***g_235) = func_49((**g_235), l_67, (*l_242), (((0x5C96L || l_246) || (safe_mod_func_uint16_t_u_u(((l_246 | g_86) > (l_249 != ((*l_250) = &g_236))), 65526UL))) < l_246));
    }
    return (*g_236);
}


/* ------------------------------------------ */
/* 
 * reads : g_81 g_80 g_74 g_33
 * writes: g_33 g_81 g_74 g_86
 */
static int32_t * func_49(int32_t ** p_50, uint16_t * p_51, uint32_t  p_52, int16_t  p_53)
{ /* block id: 15 */
    uint8_t l_82 = 0x0EL;
    (**p_50) = l_82;
    (*p_50) = (*g_80);
    for (g_74 = 0; (g_74 > 26); g_74 = safe_add_func_int8_t_s_s(g_74, 3))
    { /* block id: 20 */
        int32_t *l_85 = &g_86;
        (**p_50) = 0xE690D922L;
        (*l_85) = ((**p_50) = (**p_50));
        (**p_50) = 0xFD1FA943L;
        if ((**p_50))
            break;
    }
    return (*g_80);
}


/* ------------------------------------------ */
/* 
 * reads : g_80
 * writes: g_33
 */
static int32_t ** func_54(uint32_t  p_55, uint16_t * p_56, uint16_t * p_57, uint32_t  p_58, int16_t  p_59)
{ /* block id: 12 */
    int8_t l_78 = 0xD9L;
    int32_t *l_79 = &g_33;
    (*l_79) = l_78;
    return g_80;
}




/* ---------------------------------------- */
int main (void)
{
    int print_hash_value = 0;
    platform_main_begin();
    crc32_gentab();
    func_1();
    g_81 = 0;
    transparent_crc(g_5, "g_5", print_hash_value);
    transparent_crc(g_30, "g_30", print_hash_value);
    transparent_crc(g_33, "g_33", print_hash_value);
    transparent_crc(g_72, "g_72", print_hash_value);
    transparent_crc(g_74, "g_74", print_hash_value);
    transparent_crc(g_76, "g_76", print_hash_value);
    transparent_crc(g_77, "g_77", print_hash_value);
    transparent_crc(g_86, "g_86", print_hash_value);
    transparent_crc(g_220, "g_220", print_hash_value);
    transparent_crc(g_228, "g_228", print_hash_value);
    transparent_crc(g_254, "g_254", print_hash_value);
    transparent_crc(g_267, "g_267", print_hash_value);
    transparent_crc(g_319, "g_319", print_hash_value);
    transparent_crc(g_381, "g_381", print_hash_value);
    transparent_crc(g_396, "g_396", print_hash_value);
    transparent_crc(g_509, "g_509", print_hash_value);
    transparent_crc(g_655, "g_655", print_hash_value);
    transparent_crc(g_697, "g_697", print_hash_value);
    transparent_crc(g_870, "g_870", print_hash_value);
    transparent_crc(g_888, "g_888", print_hash_value);
    transparent_crc(g_956, "g_956", print_hash_value);
    transparent_crc(g_1040, "g_1040", print_hash_value);
    transparent_crc(g_1051, "g_1051", print_hash_value);
    transparent_crc(g_1168, "g_1168", print_hash_value);
    platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
    return 0;
}

/************************ statistics *************************
XXX max struct depth: 0
breakdown:
   depth: 0, occurrence: 270
XXX total union variables: 0

XXX max expression depth: 44
breakdown:
   depth: 1, occurrence: 144
   depth: 2, occurrence: 27
   depth: 3, occurrence: 2
   depth: 4, occurrence: 1
   depth: 5, occurrence: 1
   depth: 6, occurrence: 1
   depth: 7, occurrence: 1
   depth: 8, occurrence: 1
   depth: 9, occurrence: 1
   depth: 10, occurrence: 1
   depth: 13, occurrence: 1
   depth: 16, occurrence: 2
   depth: 17, occurrence: 2
   depth: 18, occurrence: 2
   depth: 21, occurrence: 2
   depth: 22, occurrence: 1
   depth: 23, occurrence: 1
   depth: 25, occurrence: 1
   depth: 26, occurrence: 2
   depth: 28, occurrence: 1
   depth: 30, occurrence: 1
   depth: 31, occurrence: 1
   depth: 32, occurrence: 1
   depth: 33, occurrence: 1
   depth: 37, occurrence: 1
   depth: 44, occurrence: 1

XXX total number of pointers: 275

XXX times a variable address is taken: 308
XXX times a pointer is dereferenced on RHS: 222
breakdown:
   depth: 1, occurrence: 158
   depth: 2, occurrence: 37
   depth: 3, occurrence: 17
   depth: 4, occurrence: 10
XXX times a pointer is dereferenced on LHS: 300
breakdown:
   depth: 1, occurrence: 238
   depth: 2, occurrence: 37
   depth: 3, occurrence: 21
   depth: 4, occurrence: 4
XXX times a pointer is compared with null: 30
XXX times a pointer is compared with address of another variable: 17
XXX times a pointer is compared with another pointer: 12
XXX times a pointer is qualified to be dereferenced: 1466

XXX max dereference level: 5
breakdown:
   level: 0, occurrence: 0
   level: 1, occurrence: 873
   level: 2, occurrence: 375
   level: 3, occurrence: 216
   level: 4, occurrence: 150
   level: 5, occurrence: 8
XXX number of pointers point to pointers: 129
XXX number of pointers point to scalars: 146
XXX number of pointers point to structs: 0
XXX percent of pointers has null in alias set: 21.8
XXX average alias set size: 1.27

XXX times a non-volatile is read: 1323
XXX times a non-volatile is write: 827
XXX times a volatile is read: 0
XXX    times read thru a pointer: 0
XXX times a volatile is write: 0
XXX    times written thru a pointer: 0
XXX times a volatile is available for access: 0
XXX percentage of non-volatile access: 100

XXX forward jumps: 2
XXX backward jumps: 9

XXX stmts: 126
XXX max block depth: 4
breakdown:
   depth: 0, occurrence: 34
   depth: 1, occurrence: 40
   depth: 2, occurrence: 31
   depth: 3, occurrence: 18
   depth: 4, occurrence: 3

XXX percentage a fresh-made variable is used: 16.3
XXX percentage an existing variable is used: 83.7
********************* end of statistics **********************/



Assembly Code with Setting 1: 
	.text
	.file	"tmpsnwyutu2.c"
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5, 0x0                          # -- Begin function main
.LCPI0_0:
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	2                               # 0x2
	.long	3                               # 0x3
	.long	4                               # 0x4
	.long	5                               # 0x5
	.long	6                               # 0x6
	.long	7                               # 0x7
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0
.LCPI0_1:
	.long	3988292384                      # 0xedb88320
.LCPI0_2:
	.long	8                               # 0x8
	.text
	.globl	main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:
	pushq	%rax
	.cfi_def_cfa_offset 16
	vmovdqa	.LCPI0_0(%rip), %ymm0           # ymm0 = [0,1,2,3,4,5,6,7]
	xorl	%ecx, %ecx
	vpbroadcastd	.LCPI0_1(%rip), %ymm1   # ymm1 = [3988292384,3988292384,3988292384,3988292384,3988292384,3988292384,3988292384,3988292384]
	leaq	crc32_tab(%rip), %rax
	vpbroadcastd	.LCPI0_2(%rip), %ymm2   # ymm2 = [8,8,8,8,8,8,8,8]
	.p2align	4, 0x90
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
	vpsrld	$1, %ymm0, %ymm3
	vpxor	%ymm1, %ymm3, %ymm4
	vpslld	$31, %ymm0, %ymm5
	vblendvps	%ymm5, %ymm4, %ymm3, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vmovups	%ymm3, (%rcx,%rax)
	vpaddd	%ymm2, %ymm0, %ymm0
	addq	$32, %rcx
	cmpq	$1024, %rcx                     # imm = 0x400
	jne	.LBB0_1
# %bb.2:
	movq	g_81(%rip), %rcx
	xorl	%esi, %esi
	cmpb	$0, g_655(%rip)
	movl	$-1, (%rcx)
	movl	crc32_context(%rip), %edx
	movzbl	%dl, %edi
	movl	$12, %ecx
	cmoveq	%rsi, %rcx
	shrl	$8, %edx
	xorq	$4, %rdi
	xorl	(%rax,%rdi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$4, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$21, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$233, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	movzbl	%sil, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	movzbl	%sil, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	movzbl	%sil, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	movzbl	%sil, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	movzbl	%sil, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	movzbl	%sil, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	movzbl	%sil, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$49, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$7, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$130, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$140, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$220, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$38, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$7, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$4, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
                                        # kill: def $dl killed $dl killed $rdx
	movzbl	%dl, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	$17, %edx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	$248, %edx
	xorl	(%rax,%rdx,4), %esi
	movl	%esi, %edx
	notl	%edx
	movzbl	%dl, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movl	%esi, %edx
	notl	%edx
	movzbl	%dl, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movl	%esi, %edx
	notl	%edx
	movzbl	%dl, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movl	%esi, %edx
	notl	%edx
	movzbl	%dl, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movl	%esi, %edx
	notl	%edx
	movzbl	%dl, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movl	%esi, %edx
	notl	%edx
	movzbl	%dl, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movl	%esi, %edx
	notl	%edx
	movzbl	%dl, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	$10, %edx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	$1, %edx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	$12, %edx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorq	%rcx, %rdx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	$198, %ecx
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	$147, %ecx
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	$122, %ecx
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	$168, %ecx
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	$4, %ecx
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %ecx
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movzbl	%sil, %edx
	movl	%esi, %ecx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	%ecx, %edx
	notl	%edx
	shrl	$8, %ecx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$3, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$18, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$160, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$3, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$164, %edx
	xorl	(%rax,%rdx,4), %ecx
	movb	$1, g_655(%rip)
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$247, %edx
	xorl	(%rax,%rdx,4), %ecx
	movl	$21, g_33(%rip)
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$66, %edx
	xorl	(%rax,%rdx,4), %ecx
	movq	$0, g_81(%rip)
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	$56, %edx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	shrl	$8, %ecx
	xorl	(%rax,%rdx,4), %ecx
	movzbl	%cl, %edx
	movl	%ecx, %esi
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movl	%esi, crc32_context(%rip)
	notl	%esi
	leaq	.L.str.25(%rip), %rdi
	xorl	%eax, %eax
	vzeroupper
	callq	printf@PLT
	xorl	%eax, %eax
	popq	%rcx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end0:
	.size	main, .Lfunc_end0-main
	.cfi_endproc
                                        # -- End function
	.type	g_81,@object                    # @g_81
	.data
	.p2align	3, 0x0
g_81:
	.quad	g_33
	.size	g_81, 8

	.type	g_33,@object                    # @g_33
	.p2align	2, 0x0
g_33:
	.long	1054554450                      # 0x3edb3952
	.size	g_33, 4

	.type	g_655,@object                   # @g_655
	.local	g_655
	.comm	g_655,1,1
	.type	crc32_context,@object           # @crc32_context
	.p2align	2, 0x0
crc32_context:
	.long	4294967295                      # 0xffffffff
	.size	crc32_context, 4

	.type	crc32_tab,@object               # @crc32_tab
	.local	crc32_tab
	.comm	crc32_tab,1024,16
	.type	.L.str.25,@object               # @.str.25
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.25:
	.asciz	"checksum = %X\n"
	.size	.L.str.25, 15

	.ident	"clang version 16.0.6"
	.section	".note.GNU-stack","",@progbits
	.addrsig
	.addrsig_sym g_33


Assembly Code with Setting 2: 
	.file	"tmpj4ozmmyx.c"
	.text
	.p2align 4
	.type	crc32_8bytes, @function
crc32_8bytes:
.LFB104:
	.cfi_startproc
	movl	crc32_context(%rip), %eax
	leaq	crc32_tab(%rip), %rdx
	movq	%rdi, %rcx
	movl	%eax, %esi
	shrl	$8, %eax
	xorl	%edi, %esi
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movzbl	%ch, %esi
	shrq	$56, %rcx
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movq	%rdi, %rsi
	shrq	$16, %rsi
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movl	%edi, %esi
	shrl	$24, %esi
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movq	%rdi, %rsi
	shrq	$32, %rsi
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movq	%rdi, %rsi
	shrq	$40, %rsi
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	movq	%rdi, %rsi
	shrq	$48, %rsi
	xorl	%eax, %esi
	shrl	$8, %eax
	movzbl	%sil, %esi
	xorl	(%rdx,%rsi,4), %eax
	xorl	%eax, %ecx
	shrl	$8, %eax
	movzbl	%cl, %ecx
	xorl	(%rdx,%rcx,4), %eax
	movl	%eax, crc32_context(%rip)
	ret
	.cfi_endproc
.LFE104:
	.size	crc32_8bytes, .-crc32_8bytes
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC4:
	.string	"checksum = %X\n"
	.section	.text.startup,"ax",@progbits
	.p2align 4
	.globl	main
	.type	main, @function
main:
.LFB117:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movl	$8, %ecx
	vpxor	%xmm4, %xmm4, %xmm4
	vmovd	%ecx, %xmm6
	movl	$1, %ecx
	vmovd	%ecx, %xmm3
	movl	$-306674912, %ecx
	vpbroadcastd	%xmm6, %ymm6
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	vmovd	%ecx, %xmm2
	vpbroadcastd	%xmm3, %ymm3
	andq	$-32, %rsp
	subq	$32, %rsp
	vpbroadcastd	%xmm2, %ymm2
	movq	%fs:40, %rax
	movq	%rax, 24(%rsp)
	leaq	crc32_tab(%rip), %rax
	vmovdqa	.LC0(%rip), %ymm5
	leaq	1024(%rax), %rdx
	.p2align 4,,10
	.p2align 3
.L4:
	vmovdqa	%ymm5, %ymm1
	addq	$32, %rax
	vpaddd	%ymm6, %ymm5, %ymm5
	vpand	%ymm3, %ymm1, %ymm0
	vpsrld	$1, %ymm1, %ymm1
	vpsubd	%ymm0, %ymm4, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm0, %ymm0
	vpand	%ymm3, %ymm0, %ymm1
	vpsrld	$1, %ymm0, %ymm0
	vpsubd	%ymm1, %ymm4, %ymm1
	vpand	%ymm2, %ymm1, %ymm1
	vpxor	%ymm0, %ymm1, %ymm1
	vpand	%ymm3, %ymm1, %ymm0
	vpsrld	$1, %ymm1, %ymm1
	vpsubd	%ymm0, %ymm4, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm0, %ymm0
	vpand	%ymm3, %ymm0, %ymm1
	vpsrld	$1, %ymm0, %ymm0
	vpsubd	%ymm1, %ymm4, %ymm1
	vpand	%ymm2, %ymm1, %ymm1
	vpxor	%ymm0, %ymm1, %ymm1
	vpand	%ymm3, %ymm1, %ymm0
	vpsrld	$1, %ymm1, %ymm1
	vpsubd	%ymm0, %ymm4, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm0, %ymm0
	vpand	%ymm3, %ymm0, %ymm1
	vpsrld	$1, %ymm0, %ymm0
	vpsubd	%ymm1, %ymm4, %ymm1
	vpand	%ymm2, %ymm1, %ymm1
	vpxor	%ymm0, %ymm1, %ymm1
	vpand	%ymm3, %ymm1, %ymm0
	vpsrld	$1, %ymm1, %ymm1
	vpsubd	%ymm0, %ymm4, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm0, %ymm0
	vpand	%ymm3, %ymm0, %ymm1
	vpsrld	$1, %ymm0, %ymm0
	vpsubd	%ymm1, %ymm4, %ymm1
	vpand	%ymm2, %ymm1, %ymm1
	vpxor	%ymm0, %ymm1, %ymm0
	vmovdqa	%ymm0, -32(%rax)
	cmpq	%rax, %rdx
	jne	.L4
	movl	$4, %eax
	movl	$-2133092964, 16(%rsp)
	movl	$4, %esi
	movzbl	g_74(%rip), %r10d
	movw	%ax, g_30(%rip)
	movsbl	g_655(%rip), %eax
	movl	$17, %edi
	movl	$-1, g_33(%rip)
	movl	%eax, g_697(%rip)
	movl	%eax, %r8d
	movq	g_235(%rip), %rax
	movw	%si, g_254(%rip)
	movq	(%rax), %rax
	movb	$12, g_655(%rip)
	movb	$-58, g_870(%rip)
	movq	(%rax), %rax
	movl	$0, g_396(%rip)
	movq	(%rax), %rdx
	movl	$-1, (%rdx)
	movq	g_236(%rip), %rdx
	movl	$0, g_228(%rip)
	movq	(%rdx), %rdx
	movq	$0, (%rdx)
	movq	g_418(%rip), %rdx
	movq	(%rdx), %rdx
	movl	$1, (%rdx)
	movq	g_417(%rip), %rdx
	movl	$0, g_86(%rip)
	movq	(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	(%rdx), %ecx
	movl	$7, g_228(%rip)
	movl	$4, 20(%rsp)
	movl	%ecx, 16(%rsp)
	movl	$10, %ecx
	movl	$1, g_86(%rip)
	movw	%cx, g_381(%rip)
	leaq	20(%rsp), %rcx
	movl	(%rdx), %r11d
	movq	g_227(%rip), %rdx
	movw	%di, g_267(%rip)
	movl	$4, %edi
	movl	(%rdx), %edx
	movq	%rcx, (%rax)
	movw	%r11w, g_76(%rip)
	movl	%edx, %r9d
	xorl	$-18, %r9d
	cmpb	$-18, %dl
	movq	g_81(%rip), %rcx
	sete	%dl
	movb	%r9b, g_72(%rip)
	movzbl	%dl, %edx
	movl	%edx, g_86(%rip)
	movl	%edx, (%rcx)
	movq	g_80(%rip), %rdx
	leaq	16(%rsp), %rcx
	movl	$21, g_33(%rip)
	movq	%rcx, (%rdx)
	movq	$0, (%rax)
	movq	$0, g_81(%rip)
	call	crc32_8bytes
	call	crc32_8bytes
	movslq	g_33(%rip), %rdi
	call	crc32_8bytes
	movsbq	%r9b, %rdi
	call	crc32_8bytes
	movsbq	%r10b, %rdi
	call	crc32_8bytes
	movzwl	%r11w, %edi
	call	crc32_8bytes
	movzbl	g_77(%rip), %edi
	call	crc32_8bytes
	movslq	g_86(%rip), %rdi
	call	crc32_8bytes
	movl	$651988098, %edi
	call	crc32_8bytes
	movl	g_228(%rip), %edi
	call	crc32_8bytes
	movl	$4, %edi
	call	crc32_8bytes
	movl	$17, %edi
	call	crc32_8bytes
	movswq	g_319(%rip), %rdi
	call	crc32_8bytes
	movl	$10, %edi
	call	crc32_8bytes
	xorl	%edi, %edi
	call	crc32_8bytes
	movl	$1, %edi
	call	crc32_8bytes
	movl	$12, %edi
	call	crc32_8bytes
	movsbq	%r8b, %rdi
	call	crc32_8bytes
	movl	$198, %edi
	call	crc32_8bytes
	movl	g_888(%rip), %edi
	call	crc32_8bytes
	movq	$-1, %rdi
	call	crc32_8bytes
	movl	$60822019, %edi
	call	crc32_8bytes
	xorl	%edi, %edi
	call	crc32_8bytes
	movl	$943912868, %edi
	call	crc32_8bytes
	movl	crc32_context(%rip), %esi
	xorl	%eax, %eax
	leaq	.LC4(%rip), %rdi
	notl	%esi
	call	printf@PLT
	movq	24(%rsp), %rax
	subq	%fs:40, %rax
	jne	.L8
	leave
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	xorl	%eax, %eax
	ret
.L8:
	.cfi_restore_state
	call	__stack_chk_fail@PLT
	.cfi_endproc
.LFE117:
	.size	main, .-main
	.data
	.align 4
	.type	g_888, @object
	.size	g_888, 4
g_888:
	.long	78150291
	.type	g_870, @object
	.size	g_870, 1
g_870:
	.byte	-56
	.align 4
	.type	g_697, @object
	.size	g_697, 4
g_697:
	.long	-8
	.local	g_655
	.comm	g_655,1,1
	.section	.data.rel.local,"aw"
	.align 8
	.type	g_417, @object
	.size	g_417, 8
g_417:
	.quad	g_418
	.align 8
	.type	g_418, @object
	.size	g_418, 8
g_418:
	.quad	g_227
	.data
	.align 4
	.type	g_396, @object
	.size	g_396, 4
g_396:
	.long	1867850924
	.align 2
	.type	g_381, @object
	.size	g_381, 2
g_381:
	.value	30429
	.align 2
	.type	g_319, @object
	.size	g_319, 2
g_319:
	.value	-8
	.align 2
	.type	g_267, @object
	.size	g_267, 2
g_267:
	.value	13139
	.align 2
	.type	g_254, @object
	.size	g_254, 2
g_254:
	.value	3
	.section	.data.rel.local
	.align 8
	.type	g_235, @object
	.size	g_235, 8
g_235:
	.quad	g_236
	.align 8
	.type	g_236, @object
	.size	g_236, 8
g_236:
	.quad	g_80
	.align 8
	.type	g_227, @object
	.size	g_227, 8
g_227:
	.quad	g_228
	.data
	.align 4
	.type	g_228, @object
	.size	g_228, 4
g_228:
	.long	169130493
	.align 4
	.type	g_86, @object
	.size	g_86, 4
g_86:
	.long	10878735
	.section	.data.rel.local
	.align 8
	.type	g_80, @object
	.size	g_80, 8
g_80:
	.quad	g_81
	.align 8
	.type	g_81, @object
	.size	g_81, 8
g_81:
	.quad	g_33
	.local	g_77
	.comm	g_77,1,1
	.data
	.align 2
	.type	g_76, @object
	.size	g_76, 2
g_76:
	.value	12975
	.type	g_74, @object
	.size	g_74, 1
g_74:
	.byte	49
	.type	g_72, @object
	.size	g_72, 1
g_72:
	.byte	80
	.align 4
	.type	g_33, @object
	.size	g_33, 4
g_33:
	.long	1054554450
	.align 2
	.type	g_30, @object
	.size	g_30, 2
g_30:
	.value	-1
	.align 4
	.type	crc32_context, @object
	.size	crc32_context, 4
crc32_context:
	.long	-1
	.local	crc32_tab
	.comm	crc32_tab,1024,32
	.section	.rodata.cst32,"aM",@progbits,32
	.align 32
.LC0:
	.long	0
	.long	1
	.long	2
	.long	3
	.long	4
	.long	5
	.long	6
	.long	7
	.ident	"GCC: (GNU) 13.2.1 20230801"
	.section	.note.GNU-stack,"",@progbits


