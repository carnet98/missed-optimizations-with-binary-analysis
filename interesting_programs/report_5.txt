--- Interesting Case Report ---

Difference in Variables:['g_12', 'g_26', 'g_78', 'g_113', 'g_180', 'g_1090', 'g_848']



Setting 1: <bound method CompilationSetting.get_compilation_cmd of CompilationSetting(compiler=CompilerExe(project=<CompilerProject.LLVM: 1>, exe=PosixPath('/usr/bin/clang'), revision='16.0.6'), opt_level=<OptLevel.O3: 3>, flags=('-march=native',), include_paths=(), system_include_paths=(), macro_definitions=())>
Setting 1 Assembly Code:
	.text
	.file	"tmpcnk29plp.c"
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5, 0x0                          # -- Begin function main
.LCPI0_0:
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	2                               # 0x2
	.long	3                               # 0x3
	.long	4                               # 0x4
	.long	5                               # 0x5
	.long	6                               # 0x6
	.long	7                               # 0x7
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0
.LCPI0_1:
	.long	3988292384                      # 0xedb88320
.LCPI0_2:
	.long	8                               # 0x8
	.text
	.globl	main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:
	pushq	%rax
	.cfi_def_cfa_offset 16
	vmovdqa	.LCPI0_0(%rip), %ymm0           # ymm0 = [0,1,2,3,4,5,6,7]
	xorl	%ecx, %ecx
	vpbroadcastd	.LCPI0_1(%rip), %ymm1   # ymm1 = [3988292384,3988292384,3988292384,3988292384,3988292384,3988292384,3988292384,3988292384]
	leaq	crc32_tab(%rip), %rax
	vpbroadcastd	.LCPI0_2(%rip), %ymm2   # ymm2 = [8,8,8,8,8,8,8,8]
	.p2align	4, 0x90
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
	vpsrld	$1, %ymm0, %ymm3
	vpxor	%ymm1, %ymm3, %ymm4
	vpslld	$31, %ymm0, %ymm5
	vblendvps	%ymm5, %ymm4, %ymm3, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vpsrld	$1, %ymm3, %ymm4
	vpxor	%ymm1, %ymm4, %ymm5
	vpslld	$31, %ymm3, %ymm3
	vblendvps	%ymm3, %ymm5, %ymm4, %ymm3
	vmovups	%ymm3, (%rcx,%rax)
	vpaddd	%ymm2, %ymm0, %ymm0
	addq	$32, %rcx
	cmpq	$1024, %rcx                     # imm = 0x400
	jne	.LBB0_1
# %bb.2:
	cmpw	$0, g_117(%rip)
	je	.LBB0_4
# %bb.3:
	xorl	%edx, %edx
	cmpb	$0, g_78(%rip)
	movl	$18, %ecx
	cmovel	%edx, %ecx
	jmp	.LBB0_5
.LBB0_4:
	movb	$1, g_78(%rip)
	movb	$1, g_848(%rip)
	movw	$18, %cx
.LBB0_5:
	movl	crc32_context(%rip), %edx
	movzbl	%dl, %esi
                                        # kill: def $edx killed $edx killed $rdx
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$156, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$228, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$117, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$249, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$235, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$165, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$252, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$3, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	cmpb	$0, g_78(%rip)
	movl	$65526, %esi                    # imm = 0xFFF6
	movl	$27136, %edi                    # imm = 0x6A00
	cmovnel	%esi, %edi
	movl	%edx, %esi
	shrl	$8, %esi
	xorl	%edi, %edx
	movzbl	%dl, %edx
	xorl	(%rax,%rdx,4), %esi
	shrl	$8, %edi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	%edi, %edx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	$254, %edx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	$51, %edx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	$170, %edx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	$159, %edx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzwl	%cx, %edx
	movzbl	%sil, %edi
	shrl	$8, %esi
	xorl	%edx, %edi
	xorl	(%rax,%rdi,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edi
	movl	%esi, %edx
	shrl	$8, %edx
	xorl	(%rax,%rdi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$33, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$248, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$253, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$7, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$247, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$210, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$77, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$119, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$3, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$163, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$229, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$188, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$86, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$71, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$250, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$1, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$125, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	movl	%edx, %edi
	shrl	$8, %edi
	xorl	(%rax,%rsi,4), %edi
	cmpb	$0, g_848(%rip)
	movl	$1, %esi
	movl	$-1689016614, %edx              # imm = 0x9B53A6DA
	cmovnel	%esi, %edx
	movl	%edi, %esi
	shrl	$8, %esi
	xorl	%edx, %edi
	movzbl	%dil, %edi
	xorl	(%rax,%rdi,4), %esi
	movl	%edx, %edi
	shrl	$8, %edi
	xorl	%esi, %edi
	shrl	$8, %esi
	movzbl	%dil, %edi
	xorl	(%rax,%rdi,4), %esi
	movl	%edx, %edi
	shrl	$16, %edi
	xorl	%esi, %edi
	shrl	$8, %esi
	movzbl	%dil, %edi
	xorl	(%rax,%rdi,4), %esi
	shrl	$24, %edx
	movzbl	%sil, %edi
	shrl	$8, %esi
	xorl	%edx, %edi
	xorl	(%rax,%rdi,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	$250, %edx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	$47, %edx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	$49, %edx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	$16, %edx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	$170, %edx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	$109, %edx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	$59, %edx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	$253, %edx
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edx
	shrl	$8, %esi
	xorl	(%rax,%rdx,4), %esi
	movzbl	%sil, %edi
	movl	%esi, %edx
	shrl	$8, %edx
	xorl	(%rax,%rdi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movl	%edx, %esi
	notl	%esi
	shrl	$8, %edx
	movzbl	%sil, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$101, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$64, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$32, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$202, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	$237, %esi
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movzbl	%dl, %esi
	shrl	$8, %edx
	xorl	(%rax,%rsi,4), %edx
	movw	%cx, g_117(%rip)
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	$1, %ecx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	shrl	$8, %edx
	xorl	(%rax,%rcx,4), %edx
	movzbl	%dl, %ecx
	movl	%edx, %esi
	shrl	$8, %esi
	xorl	(%rax,%rcx,4), %esi
	movl	%esi, crc32_context(%rip)
	notl	%esi
	leaq	.L.str.33(%rip), %rdi
	xorl	%eax, %eax
	vzeroupper
	callq	printf@PLT
	xorl	%eax, %eax
	popq	%rcx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end0:
	.size	main, .Lfunc_end0-main
	.cfi_endproc
                                        # -- End function
	.type	g_78,@object                    # @g_78
	.local	g_78
	.comm	g_78,1,2
	.type	g_117,@object                   # @g_117
	.data
	.p2align	1, 0x0
g_117:
	.short	65529                           # 0xfff9
	.size	g_117, 2

	.type	g_848,@object                   # @g_848
	.local	g_848
	.comm	g_848,1,4
	.type	crc32_context,@object           # @crc32_context
	.p2align	2, 0x0
crc32_context:
	.long	4294967295                      # 0xffffffff
	.size	crc32_context, 4

	.type	crc32_tab,@object               # @crc32_tab
	.local	crc32_tab
	.comm	crc32_tab,1024,16
	.type	.L.str.33,@object               # @.str.33
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.33:
	.asciz	"checksum = %X\n"
	.size	.L.str.33, 15

	.ident	"clang version 16.0.6"
	.section	".note.GNU-stack","",@progbits
	.addrsig


Setting 2: <bound method CompilationSetting.get_compilation_cmd of CompilationSetting(compiler=CompilerExe(project=<CompilerProject.GCC: 0>, exe=PosixPath('/usr/bin/gcc'), revision='13.2.1'), opt_level=<OptLevel.O3: 3>, flags=('-march=native',), include_paths=(), system_include_paths=(), macro_definitions=())>
Setting 2 Assembly Code:
	.file	"tmp01tq1gnm.c"
	.text
	.p2align 4
	.type	crc32_8bytes, @function
crc32_8bytes:
.LFB84:
	.cfi_startproc
	movl	crc32_context(%rip), %eax
	leaq	crc32_tab(%rip), %rsi
	movl	%edi, %edx
	movl	%eax, %ecx
	shrl	$8, %eax
	xorl	%edi, %ecx
	movzbl	%cl, %ecx
	xorl	(%rsi,%rcx,4), %eax
	movzbl	%dh, %ecx
	shrl	$24, %edx
	xorl	%eax, %ecx
	shrl	$8, %eax
	movzbl	%cl, %ecx
	xorl	(%rsi,%rcx,4), %eax
	movl	%edi, %ecx
	shrl	$16, %ecx
	xorl	%eax, %ecx
	shrl	$8, %eax
	movzbl	%cl, %ecx
	xorl	(%rsi,%rcx,4), %eax
	xorl	%eax, %edx
	shrl	$8, %eax
	movzbl	%dl, %edx
	xorl	(%rsi,%rdx,4), %eax
	movl	%eax, crc32_context(%rip)
	ret
	.cfi_endproc
.LFE84:
	.size	crc32_8bytes, .-crc32_8bytes
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC4:
	.string	"checksum = %X\n"
	.section	.text.startup,"ax",@progbits
	.p2align 4
	.globl	main
	.type	main, @function
main:
.LFB97:
	.cfi_startproc
	movl	$8, %ecx
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	leaq	crc32_tab(%rip), %rax
	vmovdqa	.LC0(%rip), %ymm5
	vmovd	%ecx, %xmm6
	leaq	1024(%rax), %rdx
	vpxor	%xmm4, %xmm4, %xmm4
	movl	$1, %ecx
	vmovd	%ecx, %xmm3
	movl	$-306674912, %ecx
	vpbroadcastd	%xmm6, %ymm6
	vmovd	%ecx, %xmm2
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	vpbroadcastd	%xmm3, %ymm3
	andq	$-32, %rsp
	vpbroadcastd	%xmm2, %ymm2
	.p2align 4,,10
	.p2align 3
.L4:
	vmovdqa	%ymm5, %ymm1
	addq	$32, %rax
	vpaddd	%ymm6, %ymm5, %ymm5
	vpand	%ymm3, %ymm1, %ymm0
	vpsrld	$1, %ymm1, %ymm1
	vpsubd	%ymm0, %ymm4, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm0, %ymm0
	vpand	%ymm3, %ymm0, %ymm1
	vpsrld	$1, %ymm0, %ymm0
	vpsubd	%ymm1, %ymm4, %ymm1
	vpand	%ymm2, %ymm1, %ymm1
	vpxor	%ymm0, %ymm1, %ymm1
	vpand	%ymm3, %ymm1, %ymm0
	vpsrld	$1, %ymm1, %ymm1
	vpsubd	%ymm0, %ymm4, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm0, %ymm0
	vpand	%ymm3, %ymm0, %ymm1
	vpsrld	$1, %ymm0, %ymm0
	vpsubd	%ymm1, %ymm4, %ymm1
	vpand	%ymm2, %ymm1, %ymm1
	vpxor	%ymm0, %ymm1, %ymm1
	vpand	%ymm3, %ymm1, %ymm0
	vpsrld	$1, %ymm1, %ymm1
	vpsubd	%ymm0, %ymm4, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm0, %ymm0
	vpand	%ymm3, %ymm0, %ymm1
	vpsrld	$1, %ymm0, %ymm0
	vpsubd	%ymm1, %ymm4, %ymm1
	vpand	%ymm2, %ymm1, %ymm1
	vpxor	%ymm0, %ymm1, %ymm1
	vpand	%ymm3, %ymm1, %ymm0
	vpsrld	$1, %ymm1, %ymm1
	vpsubd	%ymm0, %ymm4, %ymm0
	vpand	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm0, %ymm0
	vpand	%ymm3, %ymm0, %ymm1
	vpsrld	$1, %ymm0, %ymm0
	vpsubd	%ymm1, %ymm4, %ymm1
	vpand	%ymm2, %ymm1, %ymm1
	vpxor	%ymm0, %ymm1, %ymm0
	vmovdqa	%ymm0, -32(%rax)
	cmpq	%rax, %rdx
	jne	.L4
	movq	g_768(%rip), %rax
	movq	g_367(%rip), %rdx
	movl	$0, g_12(%rip)
	movl	$1, g_26(%rip)
	movzwl	(%rax), %eax
	movq	(%rdx), %rdx
	movl	$255, g_1090(%rip)
	movw	%ax, (%rdx)
	testw	%ax, %ax
	je	.L9
.L5:
	movq	g_1310(%rip), %rax
	leaq	g_1312(%rip), %rsi
	movzwl	g_78(%rip), %r8d
	movl	$0, g_113(%rip)
	movq	%rsi, (%rax)
	movq	g_1122(%rip), %rax
	movq	(%rax), %rdx
	leaq	g_1210(%rip), %rax
	cmpq	%rax, %rdx
	je	.L6
	movq	(%rdx), %rdx
	movq	g_366(%rip), %rcx
	movq	g_1124(%rip), %rax
	movq	(%rdx), %rdx
	movq	(%rcx), %rcx
	movq	(%rax), %rax
	movzbl	(%rdx), %edx
	movq	(%rcx), %rcx
	movzbl	(%rax), %eax
	leal	0(,%rdx,4), %esi
	subl	%esi, %edx
	addl	%edx, %edx
	movsbw	%dl, %dx
	andl	%r8d, %edx
	movw	%dx, (%rcx)
	movl	$-95, %edx
	imull	%edx, %eax
	movzbl	%al, %eax
	leal	4(%rax), %edx
	movq	g_1312(%rip), %rax
	movl	%edx, (%rax)
.L6:
	movq	g_365(%rip), %rax
	movq	(%rax), %rdx
	movq	g_765(%rip), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	cmpq	%rax, (%rdx)
	sete	%al
	sete	%r9b
	xorl	%edi, %edi
	movzbl	%al, %eax
	movl	%eax, g_26(%rip)
	call	crc32_8bytes
	movzbl	%r9b, %edi
	call	crc32_8bytes
	movl	$-7012, %edi
	call	crc32_8bytes
	movl	$63861, %edi
	call	crc32_8bytes
	movl	$66889195, %edi
	call	crc32_8bytes
	movsbl	g_60(%rip), %edi
	call	crc32_8bytes
	movzwl	%r8w, %edi
	call	crc32_8bytes
	movl	$-1616235522, %edi
	call	crc32_8bytes
	xorl	%edi, %edi
	call	crc32_8bytes
	movswl	g_117(%rip), %edi
	call	crc32_8bytes
	movl	$-1, %edi
	call	crc32_8bytes
	call	crc32_8bytes
	movl	g_180(%rip), %edi
	call	crc32_8bytes
	movl	$-8, %edi
	call	crc32_8bytes
	movzbl	g_273(%rip), %edi
	call	crc32_8bytes
	movl	$7, %edi
	call	crc32_8bytes
	movl	$-9, %edi
	call	crc32_8bytes
	movl	$210, %edi
	call	crc32_8bytes
	movl	$-1560053939, %edi
	call	crc32_8bytes
	movl	$1196866789, %edi
	call	crc32_8bytes
	movl	$250, %edi
	call	crc32_8bytes
	movl	$1, %edi
	call	crc32_8bytes
	movl	$125, %edi
	call	crc32_8bytes
	movl	g_848(%rip), %edi
	call	crc32_8bytes
	movl	$12282, %edi
	call	crc32_8bytes
	movl	$1839861809, %edi
	call	crc32_8bytes
	movl	$64827, %edi
	call	crc32_8bytes
	movl	$-1, %edi
	call	crc32_8bytes
	movl	$255, %edi
	call	crc32_8bytes
	movl	$-903856027, %edi
	call	crc32_8bytes
	movl	$237, %edi
	call	crc32_8bytes
	movl	$1, %edi
	call	crc32_8bytes
	movl	crc32_context(%rip), %esi
	leaq	.LC4(%rip), %rdi
	xorl	%eax, %eax
	notl	%esi
	call	printf@PLT
	xorl	%eax, %eax
	leave
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret
.L9:
	.cfi_restore_state
	movl	$1, g_180(%rip)
	movl	$1, g_848(%rip)
	movw	$-10, g_78(%rip)
	jmp	.L5
	.cfi_endproc
.LFE97:
	.size	main, .-main
	.section	.data.rel.local,"aw"
	.align 8
	.type	g_1310, @object
	.size	g_1310, 8
g_1310:
	.quad	g_1311
	.align 8
	.type	g_1311, @object
	.size	g_1311, 8
g_1311:
	.quad	g_1312
	.align 8
	.type	g_1312, @object
	.size	g_1312, 8
g_1312:
	.quad	g_180
	.align 8
	.type	g_1210, @object
	.size	g_1210, 8
g_1210:
	.quad	g_272
	.align 8
	.type	g_1122, @object
	.size	g_1122, 8
g_1122:
	.quad	g_1123
	.align 8
	.type	g_1123, @object
	.size	g_1123, 8
g_1123:
	.quad	g_1124
	.align 8
	.type	g_1124, @object
	.size	g_1124, 8
g_1124:
	.quad	g_272
	.data
	.align 4
	.type	g_1090, @object
	.size	g_1090, 4
g_1090:
	.long	-1354811196
	.align 4
	.type	g_848, @object
	.size	g_848, 4
g_848:
	.long	-1689016614
	.section	.data.rel.local
	.align 8
	.type	g_765, @object
	.size	g_765, 8
g_765:
	.quad	g_766
	.align 8
	.type	g_766, @object
	.size	g_766, 8
g_766:
	.quad	g_767
	.align 8
	.type	g_767, @object
	.size	g_767, 8
g_767:
	.quad	g_768
	.align 8
	.type	g_768, @object
	.size	g_768, 8
g_768:
	.quad	g_117
	.align 8
	.type	g_365, @object
	.size	g_365, 8
g_365:
	.quad	g_366
	.align 8
	.type	g_366, @object
	.size	g_366, 8
g_366:
	.quad	g_367
	.align 8
	.type	g_367, @object
	.size	g_367, 8
g_367:
	.quad	g_116
	.align 8
	.type	g_272, @object
	.size	g_272, 8
g_272:
	.quad	g_273
	.data
	.type	g_273, @object
	.size	g_273, 1
g_273:
	.byte	-3
	.align 4
	.type	g_180, @object
	.size	g_180, 4
g_180:
	.long	1451317020
	.section	.data.rel.local
	.align 8
	.type	g_116, @object
	.size	g_116, 8
g_116:
	.quad	g_117
	.data
	.align 2
	.type	g_117, @object
	.size	g_117, 2
g_117:
	.value	-7
	.align 4
	.type	g_113, @object
	.size	g_113, 4
g_113:
	.long	4
	.align 2
	.type	g_78, @object
	.size	g_78, 2
g_78:
	.value	27136
	.local	g_60
	.comm	g_60,1,1
	.align 4
	.type	g_26, @object
	.size	g_26, 4
g_26:
	.long	-63991066
	.align 4
	.type	g_12, @object
	.size	g_12, 4
g_12:
	.long	-419233171
	.align 4
	.type	crc32_context, @object
	.size	crc32_context, 4
crc32_context:
	.long	-1
	.local	crc32_tab
	.comm	crc32_tab,1024,32
	.section	.rodata.cst32,"aM",@progbits,32
	.align 32
.LC0:
	.long	0
	.long	1
	.long	2
	.long	3
	.long	4
	.long	5
	.long	6
	.long	7
	.ident	"GCC: (GNU) 13.2.1 20230801"
	.section	.note.GNU-stack,"",@progbits


Source Code:
/*
 * This is a RANDOMLY GENERATED PROGRAM.
 *
 * Generator: csmith 2.3.0
 * Git version: 30dccd7
 * Options:   --no-unions --safe-math --no-argc --no-volatiles --no-volatile-pointers --no-arrays --no-bitfields --checksum --no-comma-operators --no-compound-assignment --consts --divs --embedded-assigns --jumps --no-longlong --no-force-non-uniform-arrays --math64 --muls --packed-struct --no-paranoid --pointers --no-structs --no-inline-function --no-return-structs --arg-structs --no-dangling-global-pointers
 * Seed:      15099190251611805206
 */


#define NO_LONGLONG

#include "csmith.h"


static long __undefined;

/* --- Struct/Union Declarations --- */
/* --- GLOBAL VARIABLES --- */
static int32_t g_12 = 0xE703026D;
static int32_t g_26 = 0xFC2F92E6;
static int16_t g_42 = 0xE49C;
static uint16_t g_54 = 0xF975;
static uint32_t g_56 = 0x03FCA5EB;
static int8_t g_60 = 0;
static uint16_t g_78 = 0x6A00;
static uint16_t * const g_77 = &g_78;
static uint32_t g_105 = 0x9FAA33FE;
static uint32_t *g_104 = &g_105;
static int32_t g_113 = 4;
static int16_t g_117 = (-7);
static int16_t *g_116 = &g_117;
static int32_t g_155 = (-1);
static uint32_t g_168 = 4294967295U;
static uint32_t g_180 = 0x5681571C;
static const int32_t *g_190 = &g_113;
static const int32_t **g_189 = &g_190;
static const uint32_t g_242 = 4294967288U;
static uint8_t g_273 = 253U;
static uint8_t *g_272 = &g_273;
static int16_t g_340 = 7;
static int16_t **g_367 = &g_116;
static int16_t ***g_366 = &g_367;
static int16_t ****g_365 = &g_366;
static int32_t *g_379 = &g_12;
static int32_t **g_378 = &g_379;
static int32_t ** const *g_377 = &g_378;
static int32_t ** const **g_376 = &g_377;
static int32_t ** const ***g_375 = &g_376;
static uint32_t **g_462 = &g_104;
static uint32_t ***g_461 = &g_462;
static int32_t g_522 = (-9);
static const uint8_t g_577 = 0xD2;
static int32_t g_583 = 0xA303774D;
static const uint32_t g_636 = 0x4756BCE5;
static uint8_t g_666 = 250U;
static uint8_t g_668 = 1U;
static const int8_t **g_700 = (void*)0;
static const int8_t ***g_699 = &g_700;
static const int16_t *g_768 = &g_117;
static const int16_t **g_767 = &g_768;
static const int16_t ***g_766 = &g_767;
static const int16_t ****g_765 = &g_766;
static const int16_t *****g_764 = &g_765;
static const uint8_t g_804 = 0x7D;
static const uint32_t * const g_808 = (void*)0;
static const uint32_t * const *g_807 = &g_808;
static const uint32_t * const **g_806 = &g_807;
static const uint32_t * const ***g_805 = &g_806;
static uint32_t g_848 = 0x9B53A6DA;
static uint16_t g_859 = 0x2FFA;
static const int32_t g_911 = 0x6DAA1031;
static uint16_t g_1012 = 0xFD3B;
static const uint8_t *g_1071 = &g_804;
static const uint8_t **g_1070 = &g_1071;
static const uint8_t *** const g_1069 = &g_1070;
static const uint8_t *** const *g_1068 = &g_1069;
static const uint8_t *** const **g_1067 = &g_1068;
static int16_t g_1078 = (-1);
static int32_t g_1090 = 0xAF3F38C4;
static uint8_t * const *g_1124 = &g_272;
static uint8_t * const **g_1123 = &g_1124;
static uint8_t * const ***g_1122 = &g_1123;
static uint8_t * const ****g_1121 = &g_1122;
static int32_t g_1141 = 0xCA204065;
static uint32_t ****g_1145 = &g_461;
static uint32_t *****g_1144 = &g_1145;
static uint8_t g_1181 = 0xED;
static uint8_t **g_1209 = (void*)0;
static uint8_t **g_1210 = &g_272;
static uint32_t *g_1312 = &g_180;
static uint32_t **g_1311 = &g_1312;
static uint32_t ***g_1310 = &g_1311;
static uint32_t ****g_1309 = &g_1310;
static int32_t *g_1328 = (void*)0;
static int32_t *g_1386 = &g_522;
static int32_t g_1395 = 1;
static int16_t *****g_1401 = &g_365;
static const uint32_t *g_1476 = &g_848;
static const uint32_t **g_1475 = &g_1476;


/* --- FORWARD DECLARATIONS --- */
static int32_t  func_1(void);
static int32_t  func_2(uint32_t  p_3, const uint8_t  p_4);
static uint32_t  func_21(int32_t  p_22, int8_t  p_23, uint32_t  p_24);
static const int8_t  func_34(uint32_t  p_35);
static const uint8_t  func_57(int8_t  p_58);
static int32_t * func_65(uint32_t  p_66, int16_t  p_67, uint16_t  p_68, int16_t * p_69);
static const uint16_t  func_70(int8_t * p_71, int32_t  p_72, int32_t * p_73, int16_t  p_74);
static int8_t * func_75(uint16_t * const  p_76);
static int32_t  func_79(int32_t  p_80, int32_t * p_81, uint32_t  p_82, uint8_t  p_83, int16_t * p_84);
static int8_t  func_99(uint32_t * p_100, uint32_t  p_101, int16_t * p_102, int8_t  p_103);


/* --- FUNCTIONS --- */
/* ------------------------------------------ */
/* 
 * reads : g_12 g_26 g_77 g_78 g_104 g_113 g_105 g_116 g_376 g_377 g_378 g_379 g_117 g_189 g_272 g_273 g_375 g_180 g_767 g_768 g_367 g_1067 g_1069 g_1070 g_1071 g_804 g_666 g_668 g_764 g_765 g_766 g_242 g_1121 g_1122 g_1123 g_1124 g_190 g_1144 g_1328 g_366 g_1312 g_340 g_805 g_806 g_1386 g_522 g_365 g_1395 g_54 g_1210 g_1311 g_1310 g_1475 g_1309 g_1068 g_1401
 * writes: g_26 g_12 g_42 g_54 g_56 g_60 g_113 g_180 g_190 g_273 g_340 g_379 g_668 g_666 g_522 g_117 g_1078 g_1090 g_78 g_848 g_1121 g_1141 g_1401 g_1210 g_1209 g_1475 g_1311 g_367
 */
static int32_t  func_1(void)
{ /* block id: 0 */
    uint32_t l_11 = 1U;
    int32_t *l_25 = &g_26;
    int32_t l_27 = 0x23B26D5D;
    uint32_t l_1075 = 0xF45F1B17;
    uint16_t l_1076 = 3U;
    int16_t *l_1077 = &g_1078;
    const int8_t l_1079 = 0x17;
    uint16_t l_1080 = 0xC1A2;
    int8_t *l_1109 = &g_60;
    int8_t **l_1108 = &l_1109;
    int8_t ***l_1107 = &l_1108;
    uint8_t * const ****l_1125 = &g_1122;
    int16_t l_1158 = 0;
    uint32_t l_1257 = 0xE3B84CB1;
    int32_t l_1326 = 0x2F1D77A9;
    int32_t *l_1327 = &g_522;
    uint32_t l_1443 = 0x14191CB1;
    const uint32_t ***l_1477 = &g_1475;
    uint32_t **l_1478 = &g_1312;
    uint8_t ***l_1479 = &g_1210;
    uint8_t ****l_1480 = &l_1479;
    const uint32_t * const ***l_1492 = (void*)0;
    const uint32_t * const ****l_1491 = &l_1492;
    g_12 = func_2((safe_rshift_func_uint16_t_u_s((l_27 = (((safe_rshift_func_int16_t_s_u((((safe_lshift_func_uint8_t_u_u(255U, ((0 != l_11) || ((g_12 >= ((*l_25) = (((safe_add_func_int16_t_s_s((safe_mod_func_uint32_t_u_u((safe_add_func_int16_t_s_s(((safe_add_func_uint32_t_u_u(func_21(g_12, g_12, l_11), 0x978D8EF0)) && 0xCD), 0x7356)), (-3))), g_12)) | g_12) != 0x2E607D19))) >= 0x3EE6)))) < 251U) != g_12), 8)) < g_12) >= l_27)), 13)), g_12);
    if (((0x99612158 | ((*l_25) = (0xB1 || (safe_mod_func_uint32_t_u_u((safe_mul_func_int8_t_s_s(func_34(g_26), (safe_lshift_func_int8_t_s_u(((safe_lshift_func_uint16_t_u_u((safe_lshift_func_uint8_t_u_s((safe_lshift_func_int8_t_s_s((safe_add_func_uint8_t_u_u((safe_add_func_int8_t_s_s((safe_sub_func_uint8_t_u_u((safe_lshift_func_uint16_t_u_u(((*g_77) < ((*l_1077) = (((g_1067 == (void*)0) >= (((safe_lshift_func_int16_t_s_u((!l_11), (0xC56B | 8))) > l_1075) & l_1076)) > (*g_77)))), 12)), (***g_1069))), (-1))), 8U)), 1)), g_105)), l_1079)) | l_1079), (*g_1071))))), l_1080))))) | 65531U))
    { /* block id: 535 */
        uint8_t l_1087 = 255U;
        uint32_t *l_1091 = &l_1075;
        int32_t *l_1094 = (void*)0;
        int32_t l_1095 = (-9);
        uint32_t ****l_1099 = &g_461;
        uint32_t *****l_1098 = &l_1099;
        uint32_t l_1102 = 4294967286U;
        int8_t *** const l_1110 = &l_1108;
        uint32_t *l_1111 = (void*)0;
        uint32_t *l_1112 = &g_180;
        (*l_25) = ((*l_25) != (safe_lshift_func_int16_t_s_u((-1), 12)));
        l_1095 = ((safe_mod_func_int16_t_s_s(((safe_sub_func_int32_t_s_s(((((*l_25) < (l_1087 > (safe_add_func_uint32_t_u_u((g_1090 = l_1087), ((*l_1091) = g_666))))) < (safe_add_func_int8_t_s_s(l_1087, g_668))) <= ((l_1094 == (void*)0) != (-2))), 0x7F94F336)) == 0), l_1087)) | 9);
        g_113 = (((((safe_rshift_func_int16_t_s_s(((**g_367) = (*g_768)), 0)) || ((((*l_1098) = &g_461) != &g_461) >= (safe_mod_func_uint16_t_u_u(((*g_77) = l_1102), (l_1095 ^ (safe_rshift_func_uint16_t_u_s((safe_sub_func_int16_t_s_s((((*l_25) = ((l_1107 == l_1110) || g_12)) <= (g_848 = ((*l_1112) = ((*l_1091) = (((6U ^ 0x29) != 0) <= l_1087))))), (*****g_764))), (****g_765)))))))) | l_1102) & 0xBC) > g_242);
        (*l_1098) = &g_461;
    }
    else
    { /* block id: 549 */
        int32_t l_1117 = (-3);
        uint8_t ***l_1120 = (void*)0;
        uint8_t ****l_1119 = &l_1120;
        uint8_t *****l_1118 = &l_1119;
        uint32_t *l_1127 = &g_848;
        int32_t l_1128 = 0x8ED021D8;
        uint8_t l_1160 = 5U;
        int16_t **l_1215 = &g_116;
        uint8_t l_1251 = 3U;
        int32_t *l_1259 = &g_522;
        int32_t l_1265 = 1;
        uint8_t l_1294 = 1U;
        uint32_t ****l_1313 = &g_1310;
        int8_t *l_1317 = &g_60;
        const uint32_t ****l_1355 = (void*)0;
        int32_t l_1394 = (-8);
        int16_t *****l_1408 = (void*)0;
        uint32_t l_1437 = 0xDDA4D938;
lbl_1472:
        l_1128 = (safe_rshift_func_int8_t_s_s(((safe_rshift_func_uint8_t_u_s(((*g_272) = 0x05), ((***l_1107) = (0 < (l_1117 && (l_1118 != (l_1125 = (g_1121 = g_1121)))))))) > (0x7ED8 || (~((*l_1127) = (*l_25))))), 5));
        if ((l_1128 = (l_1128 ^ (safe_lshift_func_uint8_t_u_u(0x7C, 7)))))
        { /* block id: 557 */
            int32_t *l_1131 = &l_1128;
            (*l_1131) = ((*l_25) = ((***g_1122) == (void*)0));
            (*l_1131) = ((safe_rshift_func_uint8_t_u_u(((*l_25) = l_1128), 1)) & (**g_189));
        }
        else
        { /* block id: 562 */
            uint16_t l_1140 = 1U;
            int32_t *l_1150 = (void*)0;
            uint8_t ****l_1165 = (void*)0;
            uint32_t l_1175 = 0x354BD171;
            uint8_t l_1211 = 0x00;
            int32_t l_1212 = 0xFD072D26;
            int16_t *l_1214 = &g_1078;
            uint8_t l_1256 = 1U;
            int8_t l_1276 = 0x0C;
            uint8_t l_1296 = 0xD6;
            int32_t ***l_1308 = &g_378;
            uint16_t l_1314 = 0xF158;
            int8_t *l_1324 = (void*)0;
            int8_t *l_1325 = &l_1276;
            const int16_t * const *l_1376 = (void*)0;
            const int16_t * const **l_1375 = &l_1376;
            uint32_t l_1377 = 0U;
            uint16_t l_1449 = 0xBF7F;
            int32_t l_1471 = 1;
            (*l_25) = (safe_mul_func_uint8_t_u_u(((safe_mod_func_int32_t_s_s((*l_25), (-1))) == (safe_sub_func_uint16_t_u_u((l_1140 <= (g_1141 = ((**l_1108) = (*l_25)))), (safe_sub_func_uint32_t_u_u(((void*)0 != g_1144), ((safe_mul_func_int8_t_s_s((*l_25), (4 & ((*l_1127) = 0xFCD8C7F3)))) != (**g_1070))))))), 0x5B));
            for (g_1090 = 5; (g_1090 < 18); ++g_1090)
            { /* block id: 569 */
                const uint32_t l_1153 = 1U;
                uint32_t l_1174 = 7U;
                uint8_t **l_1208 = (void*)0;
                int32_t l_1258 = 0xF73D1D15;
                uint32_t l_1289 = 0xE057A4EC;
            }
            (*l_25) = ((l_1327 = l_1150) == g_1328);
            for (g_666 = 24; (g_666 <= 23); g_666 = safe_sub_func_uint8_t_u_u(g_666, 1))
            { /* block id: 649 */
                uint8_t l_1344 = 1U;
                int32_t l_1365 = 0xABFEE621;
                uint8_t l_1368 = 0x36;
                uint32_t l_1396 = 2U;
                int32_t l_1438 = 6;
                l_1259 = &l_1326;
                if ((safe_mul_func_uint8_t_u_u(0x3E, 0x29)))
                { /* block id: 651 */
                    uint8_t l_1345 = 255U;
                    const uint32_t *****l_1356 = &l_1355;
                    (*l_1259) = (((*g_116) = ((0xA1 || (safe_lshift_func_int8_t_s_u((-10), (~((safe_mul_func_uint8_t_u_u((((*l_1259) ^ 0x9231) | g_105), (safe_mod_func_uint16_t_u_u(((((*l_1259) && 0x1966971A) || ((*l_25) = (safe_div_func_int32_t_s_s((safe_mul_func_uint16_t_u_u((((***g_366) && 1U) && 0x907A76C4), 6U)), (*g_190))))) != (*l_1259)), l_1344)))) == 0xD737))))) >= (*g_77))) <= (*l_1259));
                    (*g_189) = (*g_189);
                    (*l_25) = (l_1365 = (((*l_1077) = (l_1345 < ((~(*g_190)) || (safe_mul_func_uint8_t_u_u((safe_add_func_int16_t_s_s((0xFD == ((*g_272) = (safe_sub_func_uint32_t_u_u((*g_1312), (((safe_div_func_int16_t_s_s((((*l_1356) = l_1355) != (void*)0), (*l_1259))) | (safe_rshift_func_uint8_t_u_s((safe_lshift_func_uint8_t_u_s((safe_lshift_func_int8_t_s_s((1 >= ((safe_sub_func_int8_t_s_s((3U <= 1), 254U)) >= 1)), 0)), g_340)), 0))) > 5U))))), (*l_1259))), 0xEF))))) | 1));
                }
                else
                { /* block id: 661 */
                    (***g_376) = &l_1365;
                }
                if ((safe_mul_func_int32_t_s_s(((**g_1124) ^ l_1368), ((safe_lshift_func_uint8_t_u_u(((((((safe_add_func_uint32_t_u_u(l_1344, 9U)) <= 0xC2D4F733) & ((void*)0 != (*g_805))) >= ((l_1375 != (void*)0) < 0x18B5)) <= l_1377) != (***g_766)), (***g_1123))) >= (*g_77)))))
                { /* block id: 664 */
                    uint32_t l_1387 = 0xFC26C2E1;
                    int16_t *****l_1400 = &g_365;
                    int32_t *l_1418 = (void*)0;
                    if (((3U > (*g_77)) >= ((((safe_add_func_uint8_t_u_u((((safe_add_func_uint32_t_u_u((safe_rshift_func_uint16_t_u_s((safe_mul_func_uint16_t_u_u(((((****g_1122) = ((void*)0 == g_1386)) > ((*l_1325) = ((1 != (((((l_1387 && ((((*l_25) = (-1)) <= 0xBFE4083E) & ((safe_add_func_int16_t_s_s((safe_add_func_uint32_t_u_u((((safe_rshift_func_int8_t_s_s(((**l_1108) = (l_1368 > 254U)), (*l_1259))) && (*g_1386)) == (***g_1069)), (-5))), (****g_765))) == 0x87))) < l_1394) & 0xE8) < (****g_365)) & 0xDB0E)) >= 0))) && l_1387), (**g_767))), (***g_766))), g_1395)) > l_1396) < 0x433A), (*g_1071))) != (-1)) && 0x8F) & (***g_1069))))
                    { /* block id: 669 */
                        int32_t l_1397 = 7;
                        l_1397 = 0x7BA1D22D;
                        (*l_25) = ((safe_mul_func_int16_t_s_s((&g_765 != (g_1401 = l_1400)), (*l_25))) >= (safe_add_func_uint8_t_u_u(l_1387, ((*l_25) != (safe_mul_func_uint8_t_u_u((*g_1071), ((safe_mul_func_int16_t_s_s((l_1408 != (void*)0), 0xC4E6)) > 0xE189)))))));
                    }
                    else
                    { /* block id: 673 */
                        (*l_1259) = (safe_add_func_uint8_t_u_u((0x17 >= (safe_rshift_func_uint8_t_u_s((safe_mod_func_uint32_t_u_u((+0), (safe_lshift_func_int8_t_s_u((*l_25), 1)))), 7))), ((**l_1108) = ((&l_1365 != (l_1327 = l_1418)) != (safe_add_func_uint8_t_u_u(((*g_272) ^ ((safe_add_func_int16_t_s_s((safe_lshift_func_int8_t_s_s(4, g_54)), (*l_25))) > (***g_766))), 0xF8))))));
                    }
                }
                else
                { /* block id: 678 */
                    int16_t l_1446 = 0xF039;
                    if ((safe_lshift_func_int16_t_s_s((1 < (safe_rshift_func_uint8_t_u_s((safe_mod_func_uint32_t_u_u((((((*l_1259) > (l_1438 = (l_1365 = (safe_lshift_func_uint8_t_u_u((safe_mul_func_uint8_t_u_u(0U, (l_1437 ^ (*l_25)))), (**g_1210)))))) < (((-8) <= (*l_1259)) == (~(*l_1259)))) > (****g_1122)) | (*l_25)), (**g_1311))), (*l_25)))), (**g_767))))
                    { /* block id: 681 */
                        (*g_1386) = 0;
                    }
                    else
                    { /* block id: 683 */
                        int32_t *l_1440 = &l_27;
                        l_1440 = (void*)0;
                        (*g_189) = (*g_189);
                    }
                    (*g_1386) = (((0xF82C89AF < (safe_sub_func_uint16_t_u_u(l_1443, (((*l_1259) < (**g_1124)) || (0x67DDFDB5 == ((*l_1259) = (((safe_sub_func_int16_t_s_s((l_1446 == ((*l_25) >= 1)), ((safe_mod_func_int32_t_s_s((4294967289U >= (*l_1259)), (**g_189))) && (***g_1310)))) == (**g_1311)) ^ 8))))))) ^ l_1449) ^ l_1446);
                    if ((*l_1259))
                        continue;
                }
                for (l_1314 = 28; (l_1314 == 40); ++l_1314)
                { /* block id: 693 */
                    if ((1 ^ g_242))
                    { /* block id: 694 */
                        int8_t l_1468 = (-5);
                        int16_t l_1469 = 0xF97E;
                        (*g_1386) = (safe_unary_minus_func_uint32_t_u((safe_rshift_func_int8_t_s_u((safe_add_func_uint16_t_u_u(((safe_div_func_int16_t_s_s(((**l_1215) = ((-3) & ((-3) != (safe_mul_func_int16_t_s_s((l_1125 == &g_1122), (((0xAC == ((*g_376) != (**g_375))) != ((safe_sub_func_uint16_t_u_u(((*g_77) = (safe_add_func_int8_t_s_s(((**l_1108) = (!(1U && (*l_1259)))), 255U))), 0x8ABF)) != (*g_116))) >= l_1468)))))), 65532U)) || 7U), l_1469)), (*g_272)))));
                        if (l_1469)
                            continue;
                    }
                    else
                    { /* block id: 700 */
                        uint8_t ***l_1470 = &g_1209;
                        (*g_1386) = (l_1365 = (((*l_1470) = (g_1210 = &g_272)) != (void*)0));
                        return (*g_1386);
                    }
                    (*l_1259) = l_1471;
                    return (*g_1386);
                }
            }
        }
        if (g_117)
            goto lbl_1472;
    }
    (*l_25) = ((safe_lshift_func_int16_t_s_s(((((((*l_1477) = g_1475) != ((**g_1309) = l_1478)) != ((((*l_1480) = l_1479) != (*g_1122)) && ((*g_1312) = (safe_sub_func_int16_t_s_s((safe_mul_func_uint8_t_u_u((safe_add_func_int16_t_s_s(0x8FA1, (safe_mod_func_uint32_t_u_u((safe_mul_func_int8_t_s_s((l_1491 != &l_1492), ((safe_mul_func_int8_t_s_s((safe_mod_func_int16_t_s_s((((***g_366) = ((safe_mul_func_int8_t_s_s((-6), (*****g_1121))) & (*g_77))) != 0), 1U)), (****g_1068))) ^ (*****g_1067)))), 0x02041ED4)))), (**g_1124))), 65532U))))) > (*g_77)) & (*l_25)), (*l_25))) & (*l_25));
    (*l_25) = (((**g_365) = (***g_1401)) == (***g_764));
    return (*l_25);
}


/* ------------------------------------------ */
/* 
 * reads : g_26
 * writes: g_26
 */
static int32_t  func_2(uint32_t  p_3, const uint8_t  p_4)
{ /* block id: 5 */
    const int32_t l_28 = 0;
    int32_t *l_29 = &g_26;
    (*l_29) = l_28;
    return (*l_29);
}


/* ------------------------------------------ */
/* 
 * reads : g_12
 * writes:
 */
static uint32_t  func_21(int32_t  p_22, int8_t  p_23, uint32_t  p_24)
{ /* block id: 1 */
    return g_12;
}


/* ------------------------------------------ */
/* 
 * reads : g_12 g_26 g_77 g_78 g_104 g_113 g_105 g_116 g_376 g_377 g_378 g_379 g_117 g_189 g_272 g_273 g_375 g_180 g_767 g_768 g_367
 * writes: g_42 g_54 g_56 g_60 g_26 g_113 g_180 g_190 g_273 g_340 g_379 g_668 g_666 g_522 g_117
 */
static const int8_t  func_34(uint32_t  p_35)
{ /* block id: 9 */
    uint32_t l_40 = 0x2D9CAAF7;
    int16_t *l_41 = &g_42;
    uint16_t *l_53 = &g_54;
    uint32_t *l_55 = &g_56;
    int8_t *l_59 = &g_60;
    uint8_t *l_1046 = &g_666;
    const int32_t l_1047 = 0x21369076;
    int32_t l_1048 = (-1);
    l_1048 = (safe_mul_func_uint16_t_u_u(((*l_53) = ((safe_mul_func_int16_t_s_s(((*l_41) = l_40), ((**g_367) = (safe_mod_func_int8_t_s_s((safe_mod_func_int8_t_s_s(p_35, func_2(((*l_55) = (safe_sub_func_uint8_t_u_u((safe_lshift_func_uint16_t_u_u((safe_rshift_func_int16_t_s_s(g_12, p_35)), ((*l_53) = 9U))), p_35))), ((*l_1046) = func_57(((*l_59) = ((p_35 & (0x9DDA != g_26)) || g_26))))))), 246U))))) < l_40)), l_1047));
    return l_1047;
}


/* ------------------------------------------ */
/* 
 * reads : g_26 g_77 g_78 g_104 g_12 g_113 g_105 g_116 g_376 g_377 g_378 g_379 g_117 g_189 g_272 g_273 g_375 g_180 g_767 g_768
 * writes: g_26 g_60 g_113 g_180 g_190 g_273 g_340 g_379 g_668 g_666 g_522
 */
static const uint8_t  func_57(int8_t  p_58)
{ /* block id: 14 */
    int32_t l_61 = 6;
    int32_t *l_62 = &g_26;
    (*l_62) = l_61;
    for (g_26 = 0; (g_26 <= (-20)); g_26 = safe_sub_func_int32_t_s_s(g_26, 1))
    { /* block id: 18 */
        int32_t **l_589 = &l_62;
        int16_t *l_592 = &g_340;
        uint32_t * const **l_1045 = (void*)0;
        uint32_t * const ***l_1044 = &l_1045;
        (**g_377) = func_65(func_21(p_58, (func_70(func_75(g_77), (****g_376), ((*l_589) = &l_61), (*g_116)) != ((*l_592) = (((*g_272) = (*g_272)) <= 0x28))), p_58), l_61, (*g_77), l_592);
        (****g_375) = ((*l_589) = (*l_589));
        (**g_378) = (((*l_1044) = (void*)0) != (void*)0);
    }
    return p_58;
}


/* ------------------------------------------ */
/* 
 * reads : g_375 g_376 g_377 g_378 g_379 g_113 g_180 g_189 g_272 g_273 g_767 g_768 g_117
 * writes: g_379 g_180 g_113 g_190 g_668 g_666 g_60 g_522
 */
static int32_t * func_65(uint32_t  p_66, int16_t  p_67, uint16_t  p_68, int16_t * p_69)
{ /* block id: 317 */
    int32_t *l_593 = &g_113;
    int16_t **l_633 = &g_116;
    uint32_t l_677 = 4294967295U;
    uint8_t **l_678 = (void*)0;
    int16_t *** const *l_684 = (void*)0;
    uint32_t l_751 = 1U;
    uint32_t *l_862 = &g_180;
    uint32_t **l_861 = &l_862;
    uint32_t ***l_860 = &l_861;
    uint32_t l_910 = 4294967295U;
    uint32_t l_964 = 4294967295U;
    int32_t ** const ***l_985 = (void*)0;
lbl_1043:
    (****g_375) = l_593;
    if ((*g_379))
    { /* block id: 319 */
        uint16_t l_598 = 0U;
        int32_t l_611 = 1;
        uint8_t l_619 = 249U;
        int32_t *l_629 = (void*)0;
        for (g_180 = 0; (g_180 <= 11); g_180 = safe_add_func_int8_t_s_s(g_180, 1))
        { /* block id: 322 */
            int8_t *l_599 = (void*)0;
            int8_t *l_600 = &g_60;
            uint8_t *l_612 = &g_273;
            uint8_t **l_613 = &l_612;
            int32_t l_618 = 0x8D2A5B00;
            const uint32_t l_620 = 4294967295U;
        }
    }
    else
    { /* block id: 348 */
        int16_t **** const l_664 = &g_366;
        uint8_t *l_665 = &g_666;
        uint8_t *l_667 = &g_668;
        int32_t l_669 = 0;
        uint32_t *l_670 = &g_180;
        const uint8_t *l_803 = &g_804;
        int32_t *l_825 = &g_155;
        int32_t l_940 = 0xC244A6E8;
        uint32_t ****l_974 = (void*)0;
        (**g_378) = (**g_378);
    }
    if (((void*)0 != &g_461))
    { /* block id: 506 */
        (*g_378) = (*g_378);
        (*g_189) = ((*g_378) = (**g_377));
    }
    else
    { /* block id: 510 */
        int32_t ***l_1022 = &g_378;
        int32_t ****l_1021 = &l_1022;
        int32_t *****l_1020 = &l_1021;
        uint32_t *l_1029 = &l_751;
        uint32_t **l_1030 = &l_1029;
        uint8_t *l_1037 = &g_668;
        uint8_t *l_1038 = &g_666;
        int8_t *l_1040 = (void*)0;
        int8_t *l_1041 = &g_60;
        int32_t *l_1042 = &g_522;
        (*l_1042) = (safe_mul_func_uint16_t_u_u((safe_rshift_func_uint8_t_u_s(((void*)0 != l_1020), ((*l_1041) = ((safe_rshift_func_uint16_t_u_u((safe_mod_func_int16_t_s_s((safe_sub_func_uint32_t_u_u((((**l_860) = &g_180) == ((*l_1030) = l_1029)), (((***l_1022) = (*g_272)) > (~(safe_mul_func_uint8_t_u_u((safe_sub_func_uint16_t_u_u((!(((*l_1038) = ((*l_1037) = 0x81)) | p_67)), ((~(-3)) != p_68))), p_68)))))), (**g_767))), p_66)) & 0xA72A12BD)))), 65535U));
    }
    if (g_113)
        goto lbl_1043;
    return (**g_377);
}


/* ------------------------------------------ */
/* 
 * reads : g_189 g_113
 * writes: g_190
 */
static const uint16_t  func_70(int8_t * p_71, int32_t  p_72, int32_t * p_73, int16_t  p_74)
{ /* block id: 307 */
    const int32_t *l_590 = &g_113;
    (*g_189) = l_590;
    if ((*p_73))
    { /* block id: 309 */
        return p_72;
    }
    else
    { /* block id: 311 */
        int32_t l_591 = 4;
        l_591 = (((&l_590 != &p_73) >= (*l_590)) != 0xA1A614EF);
    }
    return (*l_590);
}


/* ------------------------------------------ */
/* 
 * reads : g_78 g_77 g_104 g_12 g_113 g_105 g_116 g_180
 * writes: g_60 g_113 g_180
 */
static int8_t * func_75(uint16_t * const  p_76)
{ /* block id: 19 */
    uint8_t l_89 = 1U;
    uint8_t l_94 = 3U;
    uint32_t l_108 = 0x52837B75;
    int16_t *l_111 = (void*)0;
    int8_t *l_114 = &g_60;
    uint32_t *l_115 = &l_108;
    int32_t *l_121 = (void*)0;
    int32_t *l_122 = &g_113;
    int32_t l_145 = 0;
    int32_t l_146 = 4;
    uint32_t l_251 = 4294967287U;
    int32_t * const *l_292 = &l_121;
    int32_t * const **l_291 = &l_292;
    int32_t * const ***l_290 = &l_291;
    const uint32_t *l_349 = (void*)0;
    const uint32_t **l_348 = &l_349;
    int32_t l_351 = 0x990AEC3A;
    int16_t ****l_369 = &g_366;
    int32_t ** const ***l_380 = &g_376;
    int8_t l_408 = 0xD7;
    uint8_t l_409 = 0U;
    int8_t **l_450 = &l_114;
    int8_t ***l_449 = &l_450;
    (*l_122) = func_79((safe_add_func_uint32_t_u_u(((*l_115) = (((safe_sub_func_int16_t_s_s(l_89, g_78)) < (safe_lshift_func_int16_t_s_u(((safe_add_func_uint16_t_u_u((*g_77), (func_21(l_94, (safe_mul_func_uint8_t_u_u((safe_mul_func_int8_t_s_s(((*l_114) = func_99(g_104, (l_94 > (safe_mul_func_int8_t_s_s((g_60 = (l_94 || (l_108 ^ (safe_lshift_func_int8_t_s_s(l_108, 7))))), 7))), l_111, g_12)), 0x8D)), l_108)), l_89) != g_105))) & l_108), 6))) <= l_108)), g_78)), l_115, (*g_104), l_94, g_116);
    for (l_108 = 0; (l_108 != 21); l_108 = safe_add_func_uint8_t_u_u(l_108, 7))
    { /* block id: 34 */
        uint16_t l_144 = 7U;
        uint32_t *l_199 = &g_168;
        int32_t l_221 = 0xB34804F9;
        int8_t *l_392 = (void*)0;
    }
    for (g_180 = 27; (g_180 <= 43); g_180 = safe_add_func_int8_t_s_s(g_180, 8))
    { /* block id: 178 */
        uint8_t l_401 = 4U;
        int32_t l_424 = 0;
        uint32_t l_428 = 4294967286U;
        int32_t l_440 = 0;
        int8_t ** const l_441 = &l_114;
        int16_t l_453 = 0x0374;
        int8_t l_523 = 2;
        int32_t l_524 = 3;
        int16_t l_525 = 0x828B;
    }
    return &g_60;
}


/* ------------------------------------------ */
/* 
 * reads : g_12
 * writes:
 */
static int32_t  func_79(int32_t  p_80, int32_t * p_81, uint32_t  p_82, uint8_t  p_83, int16_t * p_84)
{ /* block id: 26 */
    int32_t *l_119 = &g_113;
    int32_t **l_118 = &l_119;
    int32_t *l_120 = &g_113;
    l_120 = (p_81 = ((*l_118) = &g_12));
    return (*l_120);
}


/* ------------------------------------------ */
/* 
 * reads : g_113
 * writes: g_113
 */
static int8_t  func_99(uint32_t * p_100, uint32_t  p_101, int16_t * p_102, int8_t  p_103)
{ /* block id: 21 */
    int32_t *l_112 = &g_113;
    (*l_112) = p_101;
    return (*l_112);
}




/* ---------------------------------------- */
int main (void)
{
    int print_hash_value = 0;
    platform_main_begin();
    crc32_gentab();
    func_1();
    g_379 = 0;
    transparent_crc(g_12, "g_12", print_hash_value);
    transparent_crc(g_26, "g_26", print_hash_value);
    transparent_crc(g_42, "g_42", print_hash_value);
    transparent_crc(g_54, "g_54", print_hash_value);
    transparent_crc(g_56, "g_56", print_hash_value);
    transparent_crc(g_60, "g_60", print_hash_value);
    transparent_crc(g_78, "g_78", print_hash_value);
    transparent_crc(g_105, "g_105", print_hash_value);
    transparent_crc(g_113, "g_113", print_hash_value);
    transparent_crc(g_117, "g_117", print_hash_value);
    transparent_crc(g_155, "g_155", print_hash_value);
    transparent_crc(g_168, "g_168", print_hash_value);
    transparent_crc(g_180, "g_180", print_hash_value);
    transparent_crc(g_242, "g_242", print_hash_value);
    transparent_crc(g_273, "g_273", print_hash_value);
    transparent_crc(g_340, "g_340", print_hash_value);
    transparent_crc(g_522, "g_522", print_hash_value);
    transparent_crc(g_577, "g_577", print_hash_value);
    transparent_crc(g_583, "g_583", print_hash_value);
    transparent_crc(g_636, "g_636", print_hash_value);
    transparent_crc(g_666, "g_666", print_hash_value);
    transparent_crc(g_668, "g_668", print_hash_value);
    transparent_crc(g_804, "g_804", print_hash_value);
    transparent_crc(g_848, "g_848", print_hash_value);
    transparent_crc(g_859, "g_859", print_hash_value);
    transparent_crc(g_911, "g_911", print_hash_value);
    transparent_crc(g_1012, "g_1012", print_hash_value);
    transparent_crc(g_1078, "g_1078", print_hash_value);
    transparent_crc(g_1090, "g_1090", print_hash_value);
    transparent_crc(g_1141, "g_1141", print_hash_value);
    transparent_crc(g_1181, "g_1181", print_hash_value);
    transparent_crc(g_1395, "g_1395", print_hash_value);
    platform_main_end(crc32_context ^ 0xFFFFFFFFUL, print_hash_value);
    return 0;
}

/************************ statistics *************************
XXX max struct depth: 0
breakdown:
   depth: 0, occurrence: 272
XXX total union variables: 0

XXX max expression depth: 35
breakdown:
   depth: 1, occurrence: 78
   depth: 2, occurrence: 12
   depth: 3, occurrence: 6
   depth: 4, occurrence: 3
   depth: 5, occurrence: 1
   depth: 11, occurrence: 1
   depth: 13, occurrence: 1
   depth: 14, occurrence: 2
   depth: 15, occurrence: 2
   depth: 16, occurrence: 1
   depth: 17, occurrence: 1
   depth: 18, occurrence: 1
   depth: 19, occurrence: 1
   depth: 20, occurrence: 2
   depth: 22, occurrence: 1
   depth: 23, occurrence: 1
   depth: 25, occurrence: 1
   depth: 26, occurrence: 3
   depth: 31, occurrence: 1
   depth: 35, occurrence: 1

XXX total number of pointers: 304

XXX times a variable address is taken: 314
XXX times a pointer is dereferenced on RHS: 366
breakdown:
   depth: 1, occurrence: 263
   depth: 2, occurrence: 47
   depth: 3, occurrence: 21
   depth: 4, occurrence: 27
   depth: 5, occurrence: 8
XXX times a pointer is dereferenced on LHS: 321
breakdown:
   depth: 1, occurrence: 246
   depth: 2, occurrence: 34
   depth: 3, occurrence: 17
   depth: 4, occurrence: 19
   depth: 5, occurrence: 5
XXX times a pointer is compared with null: 40
XXX times a pointer is compared with address of another variable: 17
XXX times a pointer is compared with another pointer: 9
XXX times a pointer is qualified to be dereferenced: 1616

XXX max dereference level: 5
breakdown:
   level: 0, occurrence: 0
   level: 1, occurrence: 1009
   level: 2, occurrence: 280
   level: 3, occurrence: 187
   level: 4, occurrence: 170
   level: 5, occurrence: 70
XXX number of pointers point to pointers: 173
XXX number of pointers point to scalars: 131
XXX number of pointers point to structs: 0
XXX percent of pointers has null in alias set: 23.7
XXX average alias set size: 1.27

XXX times a non-volatile is read: 1540
XXX times a non-volatile is write: 922
XXX times a volatile is read: 0
XXX    times read thru a pointer: 0
XXX times a volatile is write: 0
XXX    times written thru a pointer: 0
XXX times a volatile is available for access: 0
XXX percentage of non-volatile access: 100

XXX forward jumps: 0
XXX backward jumps: 7

XXX stmts: 77
XXX max block depth: 5
breakdown:
   depth: 0, occurrence: 29
   depth: 1, occurrence: 17
   depth: 2, occurrence: 6
   depth: 3, occurrence: 4
   depth: 4, occurrence: 11
   depth: 5, occurrence: 10

XXX percentage a fresh-made variable is used: 18.5
XXX percentage an existing variable is used: 81.5
********************* end of statistics **********************/

