Title: Missed Optimization: potential redundant load


https://godbolt.org/z/jbbEPePhv

Source Code:
int a;
int *b;
int c = 0;

void foo() {
  if (b)
    c = 3;
  a = c;
}


int bar(){
    return c;
}

foo:
        cmpq    $0, b(%rip)
        movl    c(%rip), %eax <========= eax is overwritten when the jump is not taken, potentially redundant load
        je      .L3
        movl    $3, c(%rip) 
        movl    $3, %eax
.L3:
        movl    %eax, a(%rip)
        ret


%eax is written before the branch. If the branch is not taken, eax is overwritten. Which makes the highlighted load potentially unnecessary.